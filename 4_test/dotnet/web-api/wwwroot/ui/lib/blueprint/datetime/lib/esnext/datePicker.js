import{__decorate}from"tslib";import classNames from"classnames";import*as React from"react";import DayPicker from"react-day-picker";import{polyfill}from"react-lifecycles-compat";import{AbstractPureComponent2,Button,DISPLAYNAME_PREFIX,Divider}from"@blueprintjs/core";import*as Classes from"./common/classes";import*as DateUtils from"./common/dateUtils";import*as Errors from"./common/errors";import{DatePickerCaption}from"./datePickerCaption";import{getDefaultMaxDate,getDefaultMinDate}from"./datePickerCore";import{DatePickerNavbar}from"./datePickerNavbar";import{Shortcuts}from"./shortcuts";import{TimePicker}from"./timePicker";let DatePicker=class extends AbstractPureComponent2{constructor(e,t){super(e,t),this.ignoreNextMonthChange=!1,this.shouldHighlightCurrentDay=e=>{const{highlightCurrentDay:t}=this.props;return t&&DateUtils.isToday(e)},this.getDatePickerModifiers=()=>{const{modifiers:e}=this.props;return{isToday:this.shouldHighlightCurrentDay,...e}},this.renderDay=e=>{const t=e.getDate();return React.createElement("div",{className:Classes.DATEPICKER_DAY_WRAPPER},t)},this.disabledDays=e=>!DateUtils.isDayInRange(e,[this.props.minDate,this.props.maxDate]),this.getDisabledDaysModifier=()=>{const{dayPickerProps:{disabledDays:e}}=this.props;return Array.isArray(e)?[this.disabledDays,...e]:[this.disabledDays,e]},this.renderCaption=e=>React.createElement(DatePickerCaption,Object.assign({},e,{maxDate:this.props.maxDate,minDate:this.props.minDate,onDateChange:this.handleMonthChange,reverseMonthAndYearMenus:this.props.reverseMonthAndYearMenus})),this.renderNavbar=e=>React.createElement(DatePickerNavbar,Object.assign({},e,{maxDate:this.props.maxDate,minDate:this.props.minDate})),this.handleDayClick=(e,t,a)=>{if(this.props.dayPickerProps.onDayClick?.(e,t,a),t.disabled)return;this.updateDay(e);const s=this.props.canClearSelection&&t.selected?null:DateUtils.getDateTime(e,this.state.value);this.updateValue(s,!0)},this.handleShortcutClick=(e,t)=>{const{onShortcutChange:a,selectedShortcutIndex:s}=this.props,{dateRange:i,includeTime:r}=e,n=i[0],o=r?n:DateUtils.getDateTime(n,this.state.value);this.updateDay(n),this.updateValue(o,!0),void 0===s&&this.setState({selectedShortcutIndex:t}),a?.({...e,date:e.dateRange[0]},t)},this.updateDay=e=>{void 0===this.props.value&&this.setState({displayMonth:e.getMonth(),displayYear:e.getFullYear(),selectedDay:e.getDate()}),null!=this.state.value&&this.state.value.getMonth()!==e.getMonth()&&(this.ignoreNextMonthChange=!0)},this.handleClearClick=()=>this.updateValue(null,!0),this.handleMonthChange=e=>{const t=this.computeValidDateInSpecifiedMonthYear(e.getFullYear(),e.getMonth());this.setState({displayMonth:t.getMonth(),displayYear:t.getFullYear()}),null!==this.state.value&&(this.updateValue(t,!1,this.ignoreNextMonthChange),this.ignoreNextMonthChange=!1),this.props.dayPickerProps.onMonthChange?.(t)},this.handleTodayClick=()=>{const e=new Date,t=e.getMonth(),a=e.getFullYear(),s=e.getDate();this.setState({displayMonth:t,displayYear:a,selectedDay:s}),this.updateValue(e,!0)},this.handleTimeChange=e=>{this.props.timePickerProps?.onChange?.(e);const{value:t}=this.state,a=DateUtils.getDateTime(null!=t?t:new Date,e);this.updateValue(a,!0)};const a=getInitialValue(e),s=getInitialMonth(e,a);this.state={displayMonth:s.getMonth(),displayYear:s.getFullYear(),selectedDay:null==a?null:a.getDate(),selectedShortcutIndex:void 0!==this.props.selectedShortcutIndex?this.props.selectedShortcutIndex:-1,value:a}}render(){const{className:e,dayPickerProps:t,locale:a,localeUtils:s,maxDate:i,minDate:r,showActionsBar:n}=this.props,{displayMonth:o,displayYear:l}=this.state;return React.createElement("div",{className:classNames(Classes.DATEPICKER,e)},this.maybeRenderShortcuts(),React.createElement("div",null,React.createElement(DayPicker,Object.assign({showOutsideDays:!0,locale:a,localeUtils:s,modifiers:this.getDatePickerModifiers()},t,{canChangeMonth:!0,captionElement:this.renderCaption,navbarElement:this.renderNavbar,disabledDays:this.getDisabledDaysModifier(),fromMonth:r,month:new Date(l,o),onDayClick:this.handleDayClick,onMonthChange:this.handleMonthChange,selectedDays:this.state.value,toMonth:i,renderDay:t?.renderDay??this.renderDay})),this.maybeRenderTimePicker(),n&&this.renderOptionsBar()))}componentDidUpdate(e,t){super.componentDidUpdate(e,t);const{value:a}=this.props;a!==e.value&&(null==a?this.setState({value:a}):this.setState({displayMonth:a.getMonth(),displayYear:a.getFullYear(),selectedDay:a.getDate(),value:a}),this.props.selectedShortcutIndex!==e.selectedShortcutIndex&&this.setState({selectedShortcutIndex:this.props.selectedShortcutIndex}))}validateProps(e){const{defaultValue:t,initialMonth:a,maxDate:s,minDate:i,value:r}=e;null==t||DateUtils.isDayInRange(t,[i,s])||console.error(Errors.DATEPICKER_DEFAULT_VALUE_INVALID),null==a||DateUtils.isMonthInRange(a,[i,s])||console.error(Errors.DATEPICKER_INITIAL_MONTH_INVALID),null!=s&&null!=i&&s<i&&!DateUtils.areSameDay(s,i)&&console.error(Errors.DATEPICKER_MAX_DATE_INVALID),null==r||DateUtils.isDayInRange(r,[i,s])||console.error(Errors.DATEPICKER_VALUE_INVALID)}renderOptionsBar(){const{clearButtonText:e,todayButtonText:t}=this.props;return[React.createElement(Divider,{key:"div"}),React.createElement("div",{className:Classes.DATEPICKER_FOOTER,key:"footer"},React.createElement(Button,{minimal:!0,onClick:this.handleTodayClick,text:t}),React.createElement(Button,{minimal:!0,onClick:this.handleClearClick,text:e}))]}maybeRenderTimePicker(){const{timePrecision:e,timePickerProps:t,minDate:a,maxDate:s}=this.props;if(null==e&&void 0===t)return null;const i=DateUtils.areSameDay(this.state.value,a),r=DateUtils.areSameDay(this.state.value,s);return React.createElement("div",{className:Classes.DATEPICKER_TIMEPICKER_WRAPPER},React.createElement(TimePicker,Object.assign({precision:e,minTime:i?a:void 0,maxTime:r?s:void 0},t,{onChange:this.handleTimeChange,value:this.state.value})))}maybeRenderShortcuts(){const{shortcuts:e}=this.props;if(null==e||!1===e)return null;const{selectedShortcutIndex:t}=this.state,{maxDate:a,minDate:s,timePrecision:i}=this.props,r=!0===e||e.map((e=>({...e,dateRange:[e.date,void 0]})));return[React.createElement(Shortcuts,Object.assign({key:"shortcuts"},{allowSingleDayRange:!0,maxDate:a,minDate:s,selectedShortcutIndex:t,shortcuts:r,timePrecision:i},{onShortcutClick:this.handleShortcutClick,useSingleDateShortcuts:!0})),React.createElement(Divider,{key:"div"})]}computeValidDateInSpecifiedMonthYear(e,t){const{minDate:a,maxDate:s}=this.props,{selectedDay:i}=this.state,r=new Date(e,t+1,0).getDate(),n=null==i?1:Math.min(i,r),o=DateUtils.getDateTime(new Date(e,t,n,12),this.state.value);return o<a?a:o>s?s:o}updateValue(e,t,a=!1){a||this.props.onChange?.(e,t),void 0===this.props.value&&this.setState({value:e})}};DatePicker.defaultProps={canClearSelection:!0,clearButtonText:"Clear",dayPickerProps:{},highlightCurrentDay:!1,maxDate:getDefaultMaxDate(),minDate:getDefaultMinDate(),reverseMonthAndYearMenus:!1,shortcuts:!1,showActionsBar:!1,todayButtonText:"Today"},DatePicker.displayName=`${DISPLAYNAME_PREFIX}.DatePicker`,DatePicker=__decorate([polyfill],DatePicker);export{DatePicker};function getInitialValue(e){return void 0!==e.value?e.value:void 0!==e.defaultValue?e.defaultValue:null}function getInitialMonth(e,t){const a=new Date;return null!=e.initialMonth?e.initialMonth:null!=t?t:DateUtils.isDayInRange(a,[e.minDate,e.maxDate])?a:DateUtils.getDateBetween([e.minDate,e.maxDate])}