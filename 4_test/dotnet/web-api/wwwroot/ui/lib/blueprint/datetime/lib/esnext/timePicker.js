import classNames from"classnames";import*as React from"react";import{Classes as CoreClasses,DISPLAYNAME_PREFIX,HTMLSelect,Icon,Intent,Keys}from"@blueprintjs/core";import*as Classes from"./common/classes";import*as DateUtils from"./common/dateUtils";import{getDefaultMaxTime,getDefaultMinTime,getTimeUnit,getTimeUnitClassName,isTimeUnitValid,setTimeUnit,TimeUnit,wrapTimeAtUnit}from"./common/timeUnit";import*as Utils from"./common/utils";export const TimePrecision={MILLISECOND:"millisecond",MINUTE:"minute",SECOND:"second"};export class TimePicker extends React.Component{constructor(e,t){super(e,t),this.getInputChangeHandler=e=>t=>{const s=getStringValueFromInputEvent(t);switch(e){case TimeUnit.HOUR_12:case TimeUnit.HOUR_24:this.setState({hourText:s});break;case TimeUnit.MINUTE:this.setState({minuteText:s});break;case TimeUnit.SECOND:this.setState({secondText:s});break;case TimeUnit.MS:this.setState({millisecondText:s})}},this.getInputBlurHandler=e=>t=>{const s=getStringValueFromInputEvent(t);this.updateTime(parseInt(s,10),e),this.props.onBlur?.(t,e)},this.getInputFocusHandler=e=>t=>{this.props.selectAllOnFocus&&t.currentTarget.select(),this.props.onFocus?.(t,e)},this.getInputKeyDownHandler=e=>t=>{handleKeyEvent(t,{[Keys.ARROW_UP]:()=>this.incrementTime(e),[Keys.ARROW_DOWN]:()=>this.decrementTime(e),[Keys.ENTER]:()=>{t.currentTarget.blur()}}),this.props.onKeyDown?.(t,e)},this.getInputKeyUpHandler=e=>t=>{this.props.onKeyUp?.(t,e)},this.handleAmPmChange=e=>{const t="pm"===e.currentTarget.value;if(t!==this.state.isPm){const e=DateUtils.convert24HourMeridiem(this.state.value.getHours(),t);this.setState({isPm:t},(()=>this.updateTime(e,TimeUnit.HOUR_24)))}},this.incrementTime=e=>this.shiftTime(e,1),this.decrementTime=e=>this.shiftTime(e,-1),this.state=this.getFullStateFromValue(this.getInitialValue(),e.useAmPm)}render(){const e=this.props.precision===TimePrecision.MILLISECOND,t=e||this.props.precision===TimePrecision.SECOND,s=this.props.useAmPm?TimeUnit.HOUR_12:TimeUnit.HOUR_24,i=classNames(Classes.TIMEPICKER,this.props.className,{[CoreClasses.DISABLED]:this.props.disabled});return React.createElement("div",{className:i},React.createElement("div",{className:Classes.TIMEPICKER_ARROW_ROW},this.maybeRenderArrowButton(!0,s),this.maybeRenderArrowButton(!0,TimeUnit.MINUTE),t&&this.maybeRenderArrowButton(!0,TimeUnit.SECOND),e&&this.maybeRenderArrowButton(!0,TimeUnit.MS)),React.createElement("div",{className:Classes.TIMEPICKER_INPUT_ROW},this.renderInput(Classes.TIMEPICKER_HOUR,s,this.state.hourText),this.renderDivider(),this.renderInput(Classes.TIMEPICKER_MINUTE,TimeUnit.MINUTE,this.state.minuteText),t&&this.renderDivider(),t&&this.renderInput(Classes.TIMEPICKER_SECOND,TimeUnit.SECOND,this.state.secondText),e&&this.renderDivider("."),e&&this.renderInput(Classes.TIMEPICKER_MILLISECOND,TimeUnit.MS,this.state.millisecondText)),this.maybeRenderAmPm(),React.createElement("div",{className:Classes.TIMEPICKER_ARROW_ROW},this.maybeRenderArrowButton(!1,s),this.maybeRenderArrowButton(!1,TimeUnit.MINUTE),t&&this.maybeRenderArrowButton(!1,TimeUnit.SECOND),e&&this.maybeRenderArrowButton(!1,TimeUnit.MS)))}componentDidUpdate(e){const t=e.minTime!==this.props.minTime,s=e.maxTime!==this.props.maxTime,i=t||s,a=e.value!==this.props.value,n=i||a;let r=this.state.value;null==this.props.value&&(r=this.getInitialValue()),i&&(r=DateUtils.getTimeInRange(this.state.value,this.props.minTime,this.props.maxTime)),null==this.props.value||DateUtils.areSameTime(this.props.value,e.value)||(r=this.props.value),n&&this.setState(this.getFullStateFromValue(r,this.props.useAmPm))}maybeRenderArrowButton(e,t){if(!this.props.showArrowButtons)return null;const s=classNames(Classes.TIMEPICKER_ARROW_BUTTON,getTimeUnitClassName(t));return React.createElement("span",{tabIndex:-1,className:s,onClick:()=>(e?this.incrementTime:this.decrementTime)(t)},React.createElement(Icon,{icon:e?"chevron-up":"chevron-down",title:e?"Increase":"Decrease"}))}renderDivider(e=":"){return React.createElement("span",{className:Classes.TIMEPICKER_DIVIDER_TEXT},e)}renderInput(e,t,s){const i=isTimeUnitValid(t,parseInt(s,10)),a=t===TimeUnit.HOUR_12||t===TimeUnit.HOUR_24;return React.createElement("input",{className:classNames(Classes.TIMEPICKER_INPUT,{[CoreClasses.intentClass(Intent.DANGER)]:!i},e),onBlur:this.getInputBlurHandler(t),onChange:this.getInputChangeHandler(t),onFocus:this.getInputFocusHandler(t),onKeyDown:this.getInputKeyDownHandler(t),onKeyUp:this.getInputKeyUpHandler(t),value:s,disabled:this.props.disabled,autoFocus:a&&this.props.autoFocus})}maybeRenderAmPm(){return this.props.useAmPm?React.createElement(HTMLSelect,{className:Classes.TIMEPICKER_AMPM_SELECT,disabled:this.props.disabled,onChange:this.handleAmPmChange,value:this.state.isPm?"pm":"am"},React.createElement("option",{value:"am"},"AM"),React.createElement("option",{value:"pm"},"PM")):null}getFullStateFromValue(e,t){const s=DateUtils.getTimeInRange(e,this.props.minTime,this.props.maxTime),i=t?TimeUnit.HOUR_12:TimeUnit.HOUR_24;return{hourText:formatTime(s.getHours(),i),minuteText:formatTime(s.getMinutes(),TimeUnit.MINUTE),secondText:formatTime(s.getSeconds(),TimeUnit.SECOND),millisecondText:formatTime(s.getMilliseconds(),TimeUnit.MS),value:s,isPm:DateUtils.getIsPmFrom24Hour(s.getHours())}}shiftTime(e,t){if(this.props.disabled)return;const s=getTimeUnit(e,this.state.value)+t;this.updateTime(wrapTimeAtUnit(e,s),e)}updateTime(e,t){const s=DateUtils.clone(this.state.value);isTimeUnitValid(t,e)?(setTimeUnit(t,e,s,this.state.isPm),DateUtils.isTimeInRange(s,this.props.minTime,this.props.maxTime)?this.updateState({value:s}):this.updateState(this.getFullStateFromValue(this.state.value,this.props.useAmPm))):this.updateState(this.getFullStateFromValue(this.state.value,this.props.useAmPm))}updateState(e){let t=e;const s=null!=t.value&&!DateUtils.areSameTime(t.value,this.state.value);null==this.props.value?(s&&(t=this.getFullStateFromValue(t.value,this.props.useAmPm)),this.setState(t)):s?this.setState(this.getFullStateFromValue(this.state.value,this.props.useAmPm)):this.setState({...t,value:DateUtils.clone(this.state.value)}),s&&this.props.onChange?.(t.value)}getInitialValue(){let e=this.props.minTime;return null!=this.props.value?e=this.props.value:null!=this.props.defaultValue&&(e=this.props.defaultValue),e}}function formatTime(e,t){switch(t){case TimeUnit.HOUR_24:return e.toString();case TimeUnit.HOUR_12:return DateUtils.get12HourFrom24Hour(e).toString();case TimeUnit.MINUTE:case TimeUnit.SECOND:return Utils.padWithZeroes(e.toString(),2);case TimeUnit.MS:return Utils.padWithZeroes(e.toString(),3);default:throw Error("Invalid TimeUnit")}}function getStringValueFromInputEvent(e){return e.target.value}function handleKeyEvent(e,t,s=!0){for(const i of Object.keys(t)){const a=Number(i);e.which===a&&(s&&e.preventDefault(),t[a]())}}TimePicker.defaultProps={autoFocus:!1,disabled:!1,maxTime:getDefaultMaxTime(),minTime:getDefaultMinTime(),precision:TimePrecision.MINUTE,selectAllOnFocus:!1,showArrowButtons:!1,useAmPm:!1},TimePicker.displayName=`${DISPLAYNAME_PREFIX}.TimePicker`;