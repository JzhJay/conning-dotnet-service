import{__decorate}from"tslib";import classNames from"classnames";import*as React from"react";import{polyfill}from"react-lifecycles-compat";import{AbstractPureComponent2,DISPLAYNAME_PREFIX,InputGroup,Intent,Keys,Popover,refHandler,setRef}from"@blueprintjs/core";import*as Classes from"./common/classes";import{isDateValid,isDayInRange}from"./common/dateUtils";import{getFormattedDateString}from"./dateFormat";import{DatePicker}from"./datePicker";import{getDefaultMaxDate,getDefaultMinDate}from"./datePickerCore";let DateInput=class extends AbstractPureComponent2{constructor(){super(...arguments),this.state={isInputFocused:!1,isOpen:!1,value:void 0!==this.props.value?this.props.value:this.props.defaultValue,valueString:null},this.inputElement=null,this.popoverContentElement=null,this.handleInputRef=refHandler(this,"inputElement",this.props.inputProps?.inputRef),this.handlePopoverContentRef=refHandler(this,"popoverContentElement"),this.handleClosePopover=t=>{const{popoverProps:e={}}=this.props;e.onClose?.(t),this.setState({isOpen:!1})},this.handleDateChange=(t,e,s=!1)=>{const n=this.state.value,a=!e||!this.props.closeOnSelection||null!=n&&(this.hasMonthChanged(n,t)||this.hasTimeChanged(n,t)),o=!!s;if(void 0===this.props.value){const e=getFormattedDateString(t,this.props);this.setState({isInputFocused:o,isOpen:a,value:t,valueString:e})}else this.setState({isInputFocused:o,isOpen:a});this.props.onChange?.(t,e)},this.handleInputFocus=t=>{const e=null==this.state.value?"":this.formatDate(this.state.value);this.setState({isInputFocused:!0,isOpen:!0,valueString:e}),this.safeInvokeInputProp("onFocus",t)},this.handleInputClick=t=>{t.stopPropagation(),this.safeInvokeInputProp("onClick",t)},this.handleInputChange=t=>{const e=t.target.value,s=this.parseDate(e);isDateValid(s)&&this.isDateInRange(s)?(void 0===this.props.value?this.setState({value:s,valueString:e}):this.setState({valueString:e}),this.props.onChange?.(s,!0)):(0===e.length&&this.props.onChange?.(null,!0),this.setState({valueString:e})),this.safeInvokeInputProp("onChange",t)},this.handleInputBlur=t=>{const{valueString:e}=this.state,s=this.parseDate(e);!(e.length>0&&e!==getFormattedDateString(this.state.value,this.props))||isDateValid(s)&&this.isDateInRange(s)?0===e.length?this.setState({isInputFocused:!1,value:null,valueString:null}):this.setState({isInputFocused:!1}):(void 0===this.props.value?this.setState({isInputFocused:!1,value:s,valueString:null}):this.setState({isInputFocused:!1}),isNaN(s.valueOf())?this.props.onError?.(new Date(void 0)):this.isDateInRange(s)?this.props.onChange?.(s,!0):this.props.onError?.(s)),this.safeInvokeInputProp("onBlur",t)},this.handleInputKeyDown=t=>{if(t.which===Keys.ENTER){const t=this.parseDate(this.state.valueString);this.handleDateChange(t,!0,!0)}else t.which===Keys.TAB&&t.shiftKey?this.handleClosePopover():t.which===Keys.TAB&&this.state.isOpen?(this.getKeyboardFocusableElements().shift()?.focus(),t.preventDefault()):t.which===Keys.ESCAPE&&(this.setState({isOpen:!1}),this.inputElement?.blur());this.safeInvokeInputProp("onKeyDown",t)},this.getKeyboardFocusableElements=()=>{const t=Array.from(this.popoverContentElement?.querySelectorAll("button:not([disabled]),input,[tabindex]:not([tabindex='-1'])"));return t.pop(),t.shift(),t},this.handleStartFocusBoundaryFocusIn=t=>{this.popoverContentElement.contains(this.getRelatedTarget(t))?this.inputElement?.focus():this.getKeyboardFocusableElements().shift()?.focus()},this.handleEndFocusBoundaryFocusIn=t=>{this.popoverContentElement.contains(this.getRelatedTarget(t))?(this.inputElement?.focus(),this.handleClosePopover()):this.getKeyboardFocusableElements().pop()?.focus()},this.handleShortcutChange=(t,e)=>{this.setState({selectedShortcutIndex:e})}}render(){const{value:t,valueString:e}=this.state,s=this.state.isInputFocused?e:getFormattedDateString(t,this.props),n=isDateValid(t)?t:null,a={...this.props.dayPickerProps,onDayKeyDown:(t,e,s)=>{this.props.dayPickerProps.onDayKeyDown?.(t,e,s)},onMonthChange:t=>{this.props.dayPickerProps.onMonthChange?.(t)}},o=React.createElement("div",{ref:this.handlePopoverContentRef},React.createElement("div",{onFocus:this.handleStartFocusBoundaryFocusIn,tabIndex:0}),React.createElement(DatePicker,Object.assign({},this.props,{dayPickerProps:a,onChange:this.handleDateChange,value:n,onShortcutChange:this.handleShortcutChange,selectedShortcutIndex:this.state.selectedShortcutIndex})),React.createElement("div",{onFocus:this.handleEndFocusBoundaryFocusIn,tabIndex:0})),{inputProps:i={},popoverProps:r={}}=this.props,p=!(null==t||isDateValid(t)&&this.isDateInRange(t));return React.createElement(Popover,Object.assign({isOpen:this.state.isOpen&&!this.props.disabled,fill:this.props.fill},r,{autoFocus:!1,className:classNames(r.className,this.props.className),content:o,enforceFocus:!1,onClose:this.handleClosePopover,popoverClassName:classNames(Classes.DATEINPUT_POPOVER,r.popoverClassName)}),React.createElement(InputGroup,Object.assign({autoComplete:"off",intent:p?Intent.DANGER:Intent.NONE,placeholder:this.props.placeholder,rightElement:this.props.rightElement,type:"text"},i,{disabled:this.props.disabled,inputRef:this.handleInputRef,onBlur:this.handleInputBlur,onChange:this.handleInputChange,onClick:this.handleInputClick,onFocus:this.handleInputFocus,onKeyDown:this.handleInputKeyDown,value:s})))}componentDidUpdate(t,e){super.componentDidUpdate(t,e),t.inputProps?.inputRef!==this.props.inputProps?.inputRef&&(setRef(t.inputProps?.inputRef,null),this.handleInputRef=refHandler(this,"inputElement",this.props.inputProps?.inputRef),setRef(this.props.inputProps?.inputRef,this.inputElement)),t.value!==this.props.value&&this.setState({value:this.props.value})}isDateInRange(t){return isDayInRange(t,[this.props.minDate,this.props.maxDate])}hasMonthChanged(t,e){return null==t!=(null==e)||e.getMonth()!==t.getMonth()}hasTimeChanged(t,e){return null!=this.props.timePrecision&&(null==t!=(null==e)||e.getHours()!==t.getHours()||e.getMinutes()!==t.getMinutes()||e.getSeconds()!==t.getSeconds()||e.getMilliseconds()!==t.getMilliseconds())}getRelatedTarget(t){return t.relatedTarget??document.activeElement}safeInvokeInputProp(t,e){const{inputProps:s={}}=this.props;s[t]?.(e)}parseDate(t){if(t===this.props.outOfRangeMessage||t===this.props.invalidDateMessage)return null;const{locale:e,parseDate:s}=this.props,n=s(t,e);return!1===n?new Date(void 0):n}formatDate(t){if(!isDateValid(t)||!this.isDateInRange(t))return"";const{locale:e,formatDate:s}=this.props;return s(t,e)}};DateInput.displayName=`${DISPLAYNAME_PREFIX}.DateInput`,DateInput.defaultProps={closeOnSelection:!0,dayPickerProps:{},disabled:!1,invalidDateMessage:"Invalid date",maxDate:getDefaultMaxDate(),minDate:getDefaultMinDate(),outOfRangeMessage:"Out of range",reverseMonthAndYearMenus:!1},DateInput=__decorate([polyfill],DateInput);export{DateInput};