import{__decorate}from"tslib";import classNames from"classnames";import*as React from"react";import{polyfill}from"react-lifecycles-compat";import{AbstractPureComponent2,Classes,Utils}from"../../common";import{DISPLAYNAME_PREFIX}from"../../common/props";import{Button}from"../button/buttons";import{Dialog}from"./dialog";import{DialogStep}from"./dialogStep";const PADDING_BOTTOM=0,MIN_WIDTH=800;let MultistepDialog=class extends AbstractPureComponent2{constructor(){super(...arguments),this.state=this.getInitialIndexFromProps(this.props),this.renderDialogStep=(e,t)=>{const s=t+1,i=this.state.lastViewedIndex>=t,a=this.state.selectedIndex===t;return React.createElement("div",{className:classNames(Classes.DIALOG_STEP_CONTAINER,{[Classes.ACTIVE]:a,[Classes.DIALOG_STEP_VIEWED]:i}),key:t},React.createElement("div",{className:Classes.DIALOG_STEP,onClick:this.handleClickDialogStep(t)},React.createElement("div",{className:Classes.DIALOG_STEP_ICON},s),React.createElement("div",{className:Classes.DIALOG_STEP_TITLE},e.props.title)))},this.handleClickDialogStep=e=>{if(!(e>this.state.lastViewedIndex))return this.getDialogStepChangeHandler(e)}}render(){const{showCloseButtonInFooter:e,isCloseButtonShown:t,...s}=this.props,i=!e&&t;return React.createElement(Dialog,Object.assign({isCloseButtonShown:i},s,{style:this.getDialogStyle()}),React.createElement("div",{className:Classes.MULTISTEP_DIALOG_PANELS},this.renderLeftPanel(),this.maybeRenderRightPanel()))}componentDidUpdate(e){!e.resetOnClose&&e.initialStepIndex===this.props.initialStepIndex||e.isOpen||!this.props.isOpen||this.setState(this.getInitialIndexFromProps(this.props))}getDialogStyle(){return{minWidth:800,paddingBottom:0,...this.props.style}}renderLeftPanel(){return React.createElement("div",{className:Classes.MULTISTEP_DIALOG_LEFT_PANEL},this.getDialogStepChildren().filter(isDialogStepElement).map(this.renderDialogStep))}maybeRenderRightPanel(){const e=this.getDialogStepChildren();if(e.length<=this.state.selectedIndex)return null;const{className:t,panel:s,panelClassName:i}=e[this.state.selectedIndex].props;return React.createElement("div",{className:classNames(Classes.MULTISTEP_DIALOG_RIGHT_PANEL,t,i)},s,this.renderFooter())}renderFooter(){const{closeButtonProps:e,isCloseButtonShown:t,showCloseButtonInFooter:s,onClose:i}=this.props,a=s&&t?React.createElement(Button,Object.assign({text:"Close",onClick:i},e)):void 0;return React.createElement("div",{className:Classes.MULTISTEP_DIALOG_FOOTER},a,React.createElement("div",{className:Classes.DIALOG_FOOTER_ACTIONS},this.renderButtons()))}renderButtons(){const{selectedIndex:e}=this.state,t=this.getDialogStepChildren(),s=[];if(this.state.selectedIndex>0){const i=t[e].props.backButtonProps??this.props.backButtonProps;s.push(React.createElement(Button,Object.assign({key:"back",onClick:this.getDialogStepChangeHandler(e-1),text:"Back"},i)))}if(e===this.getDialogStepChildren().length-1)s.push(React.createElement(Button,Object.assign({intent:"primary",key:"final",text:"Submit"},this.props.finalButtonProps)));else{const i=t[e].props.nextButtonProps??this.props.nextButtonProps;s.push(React.createElement(Button,Object.assign({intent:"primary",key:"next",onClick:this.getDialogStepChangeHandler(e+1),text:"Next"},i)))}return s}getDialogStepChangeHandler(e){return t=>{if(void 0!==this.props.onChange){const s=this.getDialogStepChildren(),i=s[this.state.selectedIndex].props.id,a=s[e].props.id;this.props.onChange(a,i,t)}this.setState({lastViewedIndex:Math.max(this.state.lastViewedIndex,e),selectedIndex:e})}}getDialogStepChildren(e=this.props){return React.Children.toArray(e.children).filter(isDialogStepElement)}getInitialIndexFromProps(e){if(void 0!==e.initialStepIndex){const t=Math.max(0,Math.min(e.initialStepIndex,this.getDialogStepChildren(e).length-1));return{lastViewedIndex:t,selectedIndex:t}}return{lastViewedIndex:0,selectedIndex:0}}};MultistepDialog.displayName=`${DISPLAYNAME_PREFIX}.MultistepDialog`,MultistepDialog.defaultProps={canOutsideClickClose:!0,isOpen:!1,resetOnClose:!0,showCloseButtonInFooter:!1},MultistepDialog=__decorate([polyfill],MultistepDialog);export{MultistepDialog};function isDialogStepElement(e){return Utils.isElementOfType(e,DialogStep)}