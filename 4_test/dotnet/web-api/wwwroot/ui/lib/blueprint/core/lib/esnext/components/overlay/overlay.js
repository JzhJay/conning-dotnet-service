var Overlay_1;import{__decorate}from"tslib";import classNames from"classnames";import*as React from"react";import{findDOMNode}from"react-dom";import{polyfill}from"react-lifecycles-compat";import{CSSTransition,TransitionGroup}from"react-transition-group";import{AbstractPureComponent2,Classes,Keys}from"../../common";import{DISPLAYNAME_PREFIX}from"../../common/props";import{isFunction}from"../../common/utils";import{Portal}from"../portal/portal";let Overlay=Overlay_1=class extends AbstractPureComponent2{constructor(){super(...arguments),this.isAutoFocusing=!1,this.state={hasEverOpened:this.props.isOpen},this.containerElement=null,this.startFocusTrapElement=null,this.endFocusTrapElement=null,this.refHandlers={container:e=>this.containerElement=findDOMNode(e),endFocusTrap:e=>this.endFocusTrapElement=e,startFocusTrap:e=>this.startFocusTrapElement=e},this.maybeRenderChild=e=>{if(isFunction(e)&&(e=e()),null==e)return null;const t="object"==typeof e?React.cloneElement(e,{className:classNames(e.props.className,Classes.OVERLAY_CONTENT)}):React.createElement("span",{className:Classes.OVERLAY_CONTENT},e),{onOpening:s,onOpened:n,onClosing:o,transitionDuration:a,transitionName:r}=this.props,i=CSSTransition;return React.createElement(i,{classNames:r,onEntering:s,onEntered:n,onExiting:o,onExited:this.handleTransitionExited,timeout:a,addEndListener:this.handleTransitionAddEnd},t)},this.handleStartFocusTrapElementFocus=e=>{this.props.enforceFocus&&!this.isAutoFocusing&&null!=e.relatedTarget&&this.containerElement.contains(e.relatedTarget)&&e.relatedTarget!==this.endFocusTrapElement&&this.endFocusTrapElement?.focus({preventScroll:!0})},this.handleStartFocusTrapElementKeyDown=e=>{if(this.props.enforceFocus&&e.shiftKey&&e.which===Keys.TAB){const e=this.getKeyboardFocusableElements().pop();null!=e?e.focus():this.endFocusTrapElement?.focus({preventScroll:!0})}},this.handleEndFocusTrapElementFocus=e=>{if(null!=e.relatedTarget&&this.containerElement.contains(e.relatedTarget)&&e.relatedTarget!==this.startFocusTrapElement){const t=this.getKeyboardFocusableElements().shift();this.isAutoFocusing||null==t||t===e.relatedTarget?this.startFocusTrapElement?.focus({preventScroll:!0}):t.focus()}else{const e=this.getKeyboardFocusableElements().pop();null!=e?e.focus():this.startFocusTrapElement?.focus({preventScroll:!0})}},this.handleTransitionExited=e=>{this.props.shouldReturnFocusOnClose&&this.lastActiveElementBeforeOpened instanceof HTMLElement&&this.lastActiveElementBeforeOpened.focus(),this.props.onClosed?.(e)},this.handleBackdropMouseDown=e=>{const{backdropProps:t,canOutsideClickClose:s,enforceFocus:n,onClose:o}=this.props;s&&o?.(e),n&&this.bringFocusInsideOverlay(),t?.onMouseDown?.(e)},this.handleDocumentClick=e=>{const{canOutsideClickClose:t,isOpen:s,onClose:n}=this.props,o=e.composed?e.composedPath()[0]:e.target,a=Overlay_1.openStack.indexOf(this),r=Overlay_1.openStack.slice(a).some((({containerElement:e})=>e&&e.contains(o)&&!e.isSameNode(o)));s&&!r&&t&&n?.(e)},this.handleDocumentFocus=e=>{const t=e.composed?e.composedPath()[0]:e.target;this.props.enforceFocus&&null!=this.containerElement&&t instanceof Node&&!this.containerElement.contains(t)&&(e.preventDefault(),e.stopImmediatePropagation(),this.bringFocusInsideOverlay())},this.handleKeyDown=e=>{const{canEscapeKeyClose:t,onClose:s}=this.props;e.which===Keys.ESCAPE&&t&&(s?.(e),e.preventDefault())},this.handleTransitionAddEnd=()=>{}}static getDerivedStateFromProps({isOpen:e}){return e?{hasEverOpened:e}:null}render(){if(this.props.lazy&&!this.state.hasEverOpened)return null;const{autoFocus:e,children:t,className:s,enforceFocus:n,usePortal:o,isOpen:a}=this.props,r=a?React.Children.map(t,this.maybeRenderChild)??[]:[],i=this.maybeRenderBackdrop();null!==i&&r.unshift(i),a&&(e||n)&&r.length>0&&(r.unshift(this.renderDummyElement("__start",{className:Classes.OVERLAY_START_FOCUS_TRAP,onFocus:this.handleStartFocusTrapElementFocus,onKeyDown:this.handleStartFocusTrapElementKeyDown,ref:this.refHandlers.startFocusTrap})),n&&r.push(this.renderDummyElement("__end",{className:Classes.OVERLAY_END_FOCUS_TRAP,onFocus:this.handleEndFocusTrapElementFocus,ref:this.refHandlers.endFocusTrap})));const l=classNames(Classes.OVERLAY,{[Classes.OVERLAY_OPEN]:a,[Classes.OVERLAY_INLINE]:!o},s),c=React.createElement(TransitionGroup,{appear:!0,"aria-live":"polite",className:l,component:"div",onKeyDown:this.handleKeyDown,ref:this.refHandlers.container},r);return o?React.createElement(Portal,{className:this.props.portalClassName,container:this.props.portalContainer},c):c}componentDidMount(){this.props.isOpen&&this.overlayWillOpen()}componentDidUpdate(e){e.isOpen&&!this.props.isOpen?this.overlayWillClose():!e.isOpen&&this.props.isOpen&&this.overlayWillOpen()}componentWillUnmount(){this.overlayWillClose()}bringFocusInsideOverlay(){return this.requestAnimationFrame((()=>{null!=this.containerElement&&null!=document.activeElement&&this.props.isOpen&&!this.containerElement.contains(document.activeElement)&&(this.startFocusTrapElement?.focus({preventScroll:!0}),this.isAutoFocusing=!1)}))}maybeRenderBackdrop(){const{backdropClassName:e,backdropProps:t,hasBackdrop:s,isOpen:n,transitionDuration:o,transitionName:a}=this.props;return s&&n?React.createElement(CSSTransition,{classNames:a,key:"__backdrop",timeout:o,addEndListener:this.handleTransitionAddEnd},React.createElement("div",Object.assign({},t,{className:classNames(Classes.OVERLAY_BACKDROP,e,t?.className),onMouseDown:this.handleBackdropMouseDown}))):null}renderDummyElement(e,t){const{transitionDuration:s,transitionName:n}=this.props;return React.createElement(CSSTransition,{classNames:n,key:e,addEndListener:this.handleTransitionAddEnd,timeout:s,unmountOnExit:!0},React.createElement("div",Object.assign({tabIndex:0},t)))}getKeyboardFocusableElements(){return(null!==this.containerElement?Array.from(this.containerElement.querySelectorAll(['a[href]:not([tabindex="-1"])','button:not([disabled]):not([tabindex="-1"])','details:not([tabindex="-1"])','input:not([disabled]):not([tabindex="-1"])','select:not([disabled]):not([tabindex="-1"])','textarea:not([disabled]):not([tabindex="-1"])','[tabindex]:not([tabindex="-1"])'].join(","))):[]).filter((e=>!e.classList.contains(Classes.OVERLAY_START_FOCUS_TRAP)&&!e.classList.contains(Classes.OVERLAY_END_FOCUS_TRAP)))}overlayWillClose(){document.removeEventListener("focus",this.handleDocumentFocus,!0),document.removeEventListener("mousedown",this.handleDocumentClick);const{openStack:e}=Overlay_1,t=e.indexOf(this);if(-1!==t){if(e.splice(t,1),e.length>0){const e=Overlay_1.getLastOpened();e.props.autoFocus&&e.props.enforceFocus&&(e.bringFocusInsideOverlay(),document.addEventListener("focus",e.handleDocumentFocus,!0))}0===e.filter((e=>e.props.usePortal&&e.props.hasBackdrop)).length&&document.body.classList.remove(Classes.OVERLAY_OPEN)}}overlayWillOpen(){const{getLastOpened:e,openStack:t}=Overlay_1;t.length>0&&document.removeEventListener("focus",e().handleDocumentFocus,!0),t.push(this),this.props.autoFocus&&(this.isAutoFocusing=!0,this.bringFocusInsideOverlay()),this.props.enforceFocus&&document.addEventListener("focus",this.handleDocumentFocus,!0),this.props.canOutsideClickClose&&!this.props.hasBackdrop&&document.addEventListener("mousedown",this.handleDocumentClick),this.props.hasBackdrop&&this.props.usePortal&&document.body.classList.add(Classes.OVERLAY_OPEN),this.lastActiveElementBeforeOpened=document.activeElement}};Overlay.displayName=`${DISPLAYNAME_PREFIX}.Overlay`,Overlay.defaultProps={autoFocus:!0,backdropProps:{},canEscapeKeyClose:!0,canOutsideClickClose:!0,enforceFocus:!0,hasBackdrop:!0,isOpen:!1,lazy:!0,shouldReturnFocusOnClose:!0,transitionDuration:300,transitionName:Classes.OVERLAY,usePortal:!0},Overlay.openStack=[],Overlay.getLastOpened=()=>Overlay_1.openStack[Overlay_1.openStack.length-1],Overlay=Overlay_1=__decorate([polyfill],Overlay);export{Overlay};