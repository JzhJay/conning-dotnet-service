import*as React from"react";import{shallowCompareKeys}from"../../common/utils";import{HotkeysDialog2}from"../../components/hotkeys/hotkeysDialog2";const initialHotkeysState={hotkeys:[],isDialogOpen:!1},noOpDispatch=()=>null;export const HotkeysContext=React.createContext?.([initialHotkeysState,noOpDispatch]);const hotkeysReducer=(e,t)=>{switch(t.type){case"ADD_HOTKEYS":const o=[];for(const s of t.payload){let t=!0;for(const o of e.hotkeys)t&&=!shallowCompareKeys(s,o,{exclude:["onKeyDown","onKeyUp"]});t&&o.push(s)}return{...e,hotkeys:[...e.hotkeys,...o]};case"REMOVE_HOTKEYS":return{...e,hotkeys:e.hotkeys.filter((e=>-1===t.payload.indexOf(e)))};case"OPEN_DIALOG":return{...e,isDialogOpen:!0};case"CLOSE_DIALOG":return{...e,isDialogOpen:!1};default:return e}};export const HotkeysProvider=({children:e,dialogProps:t,renderDialog:o,value:s})=>{const a=null!=s,[n,r]=s??React.useReducer(hotkeysReducer,initialHotkeysState),i=React.useCallback((()=>r({type:"CLOSE_DIALOG"})),[]),l=o?.(n,{handleDialogClose:i})??React.createElement(HotkeysDialog2,Object.assign({},t,{isOpen:n.isDialogOpen,hotkeys:n.hotkeys,onClose:i}));return React.createElement(HotkeysContext.Provider,{value:[n,r]},e,a?void 0:l)};