import classNames from"classnames";import*as React from"react";import*as Classes from"../../common/classes";import{DISPLAYNAME_PREFIX}from"../../common/props";import{Collapse}from"../collapse/collapse";import{Icon}from"../icon/icon";export class TreeNode extends React.Component{constructor(){super(...arguments),this.handleCaretClick=e=>{e.stopPropagation();const{isExpanded:s,onCollapse:a,onExpand:t}=this.props;(s?a:t)?.(this,e)},this.handleClick=e=>{this.props.onClick?.(this,e)},this.handleContentRef=e=>{this.props.contentRef?.(this,e)},this.handleContextMenu=e=>{this.props.onContextMenu?.(this,e)},this.handleDoubleClick=e=>{this.props.onDoubleClick?.(this,e)},this.handleMouseEnter=e=>{this.props.onMouseEnter?.(this,e)},this.handleMouseLeave=e=>{this.props.onMouseLeave?.(this,e)}}static ofType(){return TreeNode}render(){const{children:e,className:s,disabled:a,icon:t,isExpanded:n,isSelected:o,label:l}=this.props,r=classNames(Classes.TREE_NODE,{[Classes.DISABLED]:a,[Classes.TREE_NODE_SELECTED]:o,[Classes.TREE_NODE_EXPANDED]:n},s),i=classNames(Classes.TREE_NODE_CONTENT,`${Classes.TREE_NODE_CONTENT}-${this.props.depth}`),c=!0===a?{}:{onClick:this.handleClick,onContextMenu:this.handleContextMenu,onDoubleClick:this.handleDoubleClick,onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave};return React.createElement("li",{className:r},React.createElement("div",Object.assign({className:i,ref:this.handleContentRef},c),this.maybeRenderCaret(),React.createElement(Icon,{className:Classes.TREE_NODE_ICON,icon:t}),React.createElement("span",{className:Classes.TREE_NODE_LABEL},l),this.maybeRenderSecondaryLabel()),React.createElement(Collapse,{isOpen:n},e))}maybeRenderCaret(){const{children:e,isExpanded:s,disabled:a,hasCaret:t=React.Children.count(e)>0}=this.props;if(t){const e=classNames(Classes.TREE_NODE_CARET,s?Classes.TREE_NODE_CARET_OPEN:Classes.TREE_NODE_CARET_CLOSED),t=!0===a?void 0:this.handleCaretClick;return React.createElement(Icon,{title:s?"Collapse group":"Expand group",className:e,onClick:t,icon:"chevron-right"})}return React.createElement("span",{className:Classes.TREE_NODE_CARET_NONE})}maybeRenderSecondaryLabel(){return null!=this.props.secondaryLabel?React.createElement("span",{className:Classes.TREE_NODE_SECONDARY_LABEL},this.props.secondaryLabel):void 0}}TreeNode.displayName=`${DISPLAYNAME_PREFIX}.TreeNode`;