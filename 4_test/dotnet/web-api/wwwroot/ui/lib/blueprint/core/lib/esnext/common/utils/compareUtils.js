export function arraysEqual(e,r,n=((e,r)=>e===r)){return null==e&&null==r||null!=e&&null!=r&&e.length===r.length&&e.every(((e,l)=>n(e,r[l])))}export function shallowCompareKeys(e,r,n){if(null==e&&null==r)return!0;if(null==e||null==r)return!1;if(Array.isArray(e)||Array.isArray(r))return!1;if(null!=n)return shallowCompareKeysImpl(e,r,n);{const n=Object.keys(e),l=Object.keys(r);return shallowCompareKeysImpl(e,r,{include:n})&&shallowCompareKeysImpl(e,r,{include:l})}}export function deepCompareKeys(e,r,n){if(e===r)return!0;if(null==e&&null==r)return!0;if(null==e||null==r)return!1;if(Array.isArray(e)||Array.isArray(r))return arraysEqual(e,r,deepCompareKeys);if(isSimplePrimitiveType(e)||isSimplePrimitiveType(r))return e===r;if(null!=n)return deepCompareKeysImpl(e,r,n);if(e.constructor!==r.constructor)return!1;{const n=Object.keys(e),l=Object.keys(r);return null!=n&&null!=l&&(0===n.length&&0===l.length||arraysEqual(n,l)&&deepCompareKeysImpl(e,r,n))}}export function getDeepUnequalKeyValues(e={},r={},n){return getUnequalKeyValues(e,r,null==n?unionKeys(e,r):n,((e,r,n)=>deepCompareKeys(e,r,[n])))}function shallowCompareKeysImpl(e,r,n){return filterKeys(e,r,n).every((n=>e.hasOwnProperty(n)===r.hasOwnProperty(n)&&e[n]===r[n]))}function deepCompareKeysImpl(e,r,n){return n.every((n=>e.hasOwnProperty(n)===r.hasOwnProperty(n)&&deepCompareKeys(e[n],r[n])))}function isSimplePrimitiveType(e){return"number"==typeof e||"string"==typeof e||"boolean"==typeof e}function filterKeys(e,r,n){if(isAllowlist(n))return n.include;if(isDenylist(n)){const l=Object.keys(e),t=Object.keys(r),u=arrayToObject(l.concat(t));return n.exclude.forEach((e=>delete u[e])),Object.keys(u)}return[]}function isAllowlist(e){return null!=e&&null!=e.include}function isDenylist(e){return null!=e&&null!=e.exclude}function arrayToObject(e){return e.reduce(((e,r)=>(e[r]=!0,e)),{})}function getUnequalKeyValues(e,r,n,l){return n.filter((n=>!l(e,r,n))).map((n=>({key:n,valueA:e[n],valueB:r[n]})))}function unionKeys(e,r){const n=Object.keys(e),l=Object.keys(r),t=arrayToObject(n.concat(l));return Object.keys(t)}