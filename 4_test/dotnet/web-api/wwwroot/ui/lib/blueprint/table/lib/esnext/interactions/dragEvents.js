export class DragEvents{constructor(){this.handleMouseDown=t=>{this.initCoordinateData(t),(null==this.handler||null==this.handler.onActivate||!1!==this.handler.onActivate(t))&&(this.isActivated=!0,this.maybeAlterEventChain(t),this.detachDocumentEventListeners(),this.attachDocumentEventListeners())},this.handleMouseMove=t=>{if(this.maybeAlterEventChain(t),this.isActivated&&(this.isDragging=!0),this.isDragging){const e=this.updateCoordinateData(t);null!=this.handler&&null!=this.handler.onDragMove&&this.handler.onDragMove(t,e)}},this.handleMouseUp=t=>{if(this.maybeAlterEventChain(t),null!=this.handler)if(this.isDragging){const e=this.updateCoordinateData(t);null!=this.handler.onDragMove&&this.handler.onDragMove(t,e),null!=this.handler.onDragEnd&&this.handler.onDragEnd(t,e)}else this.isActivated&&(null!=this.handler.onDoubleClick?null==this.doubleClickTimeoutToken?this.doubleClickTimeoutToken=window.setTimeout((()=>{delete this.doubleClickTimeoutToken,null!=this.handler.onClick&&this.handler.onClick(t)}),DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC):(window.clearTimeout(this.doubleClickTimeoutToken),delete this.doubleClickTimeoutToken,this.handler.onDoubleClick(t)):null!=this.handler.onClick&&this.handler.onClick(t));this.isActivated=!1,this.isDragging=!1,this.detachDocumentEventListeners()}}static isAdditive(t){return t.ctrlKey||t.metaKey}attach(t,e){return this.detach(),this.handler=e,this.element=t,this.isValidDragHandler(e)&&this.element.addEventListener("mousedown",this.handleMouseDown),this}detach(){null!=this.element&&(this.element.removeEventListener("mousedown",this.handleMouseDown),this.detachDocumentEventListeners())}isValidDragHandler(t){return null!=t&&(null!=t.onActivate||null!=t.onDragMove||null!=t.onDragEnd||null!=t.onClick||null!=t.onDoubleClick)}attachDocumentEventListeners(){document.addEventListener("mousemove",this.handleMouseMove),document.addEventListener("mouseup",this.handleMouseUp)}detachDocumentEventListeners(){document.removeEventListener("mousemove",this.handleMouseMove),document.removeEventListener("mouseup",this.handleMouseUp)}initCoordinateData(t){this.activationCoordinates=[t.clientX,t.clientY],this.lastCoordinates=this.activationCoordinates}updateCoordinateData(t){const e=[t.clientX,t.clientY],n=[e[0]-this.lastCoordinates[0],e[1]-this.lastCoordinates[1]],i=[e[0]-this.activationCoordinates[0],e[1]-this.activationCoordinates[1]],s={activation:this.activationCoordinates,current:e,delta:n,last:this.lastCoordinates,offset:i};return this.lastCoordinates=[t.clientX,t.clientY],s}maybeAlterEventChain(t){this.handler.preventDefault&&t.preventDefault(),this.handler.stopPropagation&&t.stopPropagation()}}DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC=500;