import{__assign,__extends}from"tslib";import*as React from"react";import{Utils as CoreUtils}from"@blueprintjs/core";import*as FocusedCellUtils from"../common/internal/focusedCellUtils";import*as PlatformUtils from"../common/internal/platformUtils";import{Utils}from"../common/utils";import{Regions}from"../regions";import{DragEvents}from"./dragEvents";import{Draggable}from"./draggable";var DragSelectable=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.didExpandSelectionOnActivate=!1,n.handleActivate=function(e){var o=n.props,t=o.locateClick,l=o.selectedRegions,i=o.selectedRegionTransform;if(n.shouldIgnoreMouseDown(e))return!1;var a=t(e);if(!Regions.isValid(a))return!1;null!=i&&(a=i(a,e));var r=Regions.findMatchingRegion(l,a),s=-1!==r;return s&&DragEvents.isAdditive(e)?(n.handleClearSelectionAtIndex(r),!1):(s?n.handleClearAllSelectionsNotAtIndex(r):n.shouldExpandSelection(e)?n.handleExpandSelection(a):n.shouldAddDisjointSelection(e)?n.handleAddDisjointSelection(a):n.handleReplaceSelection(a),!0)},n.handleDragMove=function(e,o){var t=n.props,l=t.enableMultipleSelection,i=t.focusedCell,a=t.locateClick,r=t.locateDrag,s=t.selectedRegions,c=t.selectedRegionTransform,d=l?r(e,o,n.didExpandSelectionOnActivate):a(e);if(Regions.isValid(d)){null!=c&&(d=c(d,e,o));var p=n.didExpandSelectionOnActivate?n.expandSelectedRegions(s,d,i):Regions.update(s,d);if(n.maybeInvokeSelectionCallback(p),!l){var u=p.length-1,g=p[u];n.invokeOnFocusCallbackForRegion(g,u)}}},n.handleDragEnd=function(){n.finishInteraction()},n.handleClick=function(){n.finishInteraction()},n.shouldExpandSelection=function(e){return n.props.enableMultipleSelection&&e.shiftKey},n.shouldAddDisjointSelection=function(e){return n.props.enableMultipleSelection&&DragEvents.isAdditive(e)},n.handleClearSelectionAtIndex=function(e){var o=n.props.selectedRegions.slice();if(o.splice(e,1),n.maybeInvokeSelectionCallback(o),o.length>0){var t=o.length-1;n.invokeOnFocusCallbackForRegion(o[t],t)}},n.handleClearAllSelectionsNotAtIndex=function(e){var o=n.props.selectedRegions[e];n.maybeInvokeSelectionCallback([o]),n.invokeOnFocusCallbackForRegion(o,0)},n.handleExpandSelection=function(e){var o=n.props,t=o.focusedCell,l=o.selectedRegions;n.didExpandSelectionOnActivate=!0;var i=n.expandSelectedRegions(l,e,t);n.maybeInvokeSelectionCallback(i),null!=l&&0!==l.length||n.invokeOnFocusCallbackForRegion(e)},n.handleAddDisjointSelection=function(e){var o=n.props.selectedRegions,t=Regions.add(o,e);n.maybeInvokeSelectionCallback(t),n.invokeOnFocusCallbackForRegion(e,t.length-1)},n.handleReplaceSelection=function(e){var o=[e];n.maybeInvokeSelectionCallback(o),n.invokeOnFocusCallbackForRegion(e)},n.invokeOnFocusCallbackForRegion=function(e,o){void 0===o&&(o=0);var t=n.props.onFocusedCell,l=Regions.getFocusCellCoordinatesFromRegion(e);t(FocusedCellUtils.toFullCoordinates(l,o))},n.finishInteraction=function(){var e,o;null===(o=(e=n.props).onSelectionEnd)||void 0===o||o.call(e,n.props.selectedRegions),n.didExpandSelectionOnActivate=!1,n.lastEmittedSelectedRegions=null},n}return __extends(n,e),n.prototype.render=function(){var e=this.getDraggableProps();return React.createElement(Draggable,__assign({},e,{preventDefault:!1}),this.props.children)},n.prototype.getDraggableProps=function(){return null==this.props.onSelection?{}:{onActivate:this.handleActivate,onClick:this.handleClick,onDragEnd:this.handleDragEnd,onDragMove:this.handleDragMove}},n.prototype.shouldIgnoreMouseDown=function(e){var n=this.props,o=n.disabled,t=n.ignoredSelectors,l=void 0===t?[]:t,i=e.target,a=Utils.isLeftClick(e),r=a&&e.ctrlKey&&PlatformUtils.isMac(),s="function"==typeof o?o(e):o;return!a||r||s||l.some((function(e){return null!=i.closest(e)}))},n.prototype.maybeInvokeSelectionCallback=function(e){var n=this.props.onSelection;null!=this.lastEmittedSelectedRegions&&CoreUtils.deepCompareKeys(this.lastEmittedSelectedRegions,e)||(n(e),this.lastEmittedSelectedRegions=e)},n.prototype.expandSelectedRegions=function(e,n,o){if(0===e.length)return[n];if(null!=o){var t=FocusedCellUtils.expandFocusedRegion(o,n);return Regions.update(e,t)}return t=Regions.expandRegion(e[e.length-1],n),Regions.update(e,t)},n.defaultProps={disabled:!1,enableMultipleSelection:!1,selectedRegions:[]},n}(React.PureComponent);export{DragSelectable};