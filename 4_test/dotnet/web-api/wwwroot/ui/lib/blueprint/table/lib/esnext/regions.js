import*as Classes from"./common/classes";import{Utils}from"./common/utils";export var RegionCardinality;!function(n){n.CELLS="cells",n.FULL_ROWS="full-rows",n.FULL_COLUMNS="full-columns",n.FULL_TABLE="full-table"}(RegionCardinality||(RegionCardinality={}));export const SelectionModes={ALL:[RegionCardinality.FULL_TABLE,RegionCardinality.FULL_COLUMNS,RegionCardinality.FULL_ROWS,RegionCardinality.CELLS],COLUMNS_AND_CELLS:[RegionCardinality.FULL_COLUMNS,RegionCardinality.CELLS],COLUMNS_ONLY:[RegionCardinality.FULL_COLUMNS],NONE:[],ROWS_AND_CELLS:[RegionCardinality.FULL_ROWS,RegionCardinality.CELLS],ROWS_ONLY:[RegionCardinality.FULL_ROWS]};export var ColumnLoadingOption;!function(n){n.CELLS="cells",n.HEADER="column-header"}(ColumnLoadingOption||(ColumnLoadingOption={}));export var RowLoadingOption;!function(n){n.CELLS="cells",n.HEADER="row-header"}(RowLoadingOption||(RowLoadingOption={}));export var TableLoadingOption;!function(n){n.CELLS="cells",n.COLUMN_HEADERS="column-header",n.ROW_HEADERS="row-header"}(TableLoadingOption||(TableLoadingOption={}));export class Regions{static getRegionCardinality(n){return null!=n.cols&&null!=n.rows?RegionCardinality.CELLS:null!=n.cols?RegionCardinality.FULL_COLUMNS:null!=n.rows?RegionCardinality.FULL_ROWS:RegionCardinality.FULL_TABLE}static getFocusCellCoordinatesFromRegion(n){switch(Regions.getRegionCardinality(n)){case RegionCardinality.FULL_TABLE:return{col:0,row:0};case RegionCardinality.FULL_COLUMNS:return{col:n.cols[0],row:0};case RegionCardinality.FULL_ROWS:return{col:0,row:n.rows[0]};case RegionCardinality.CELLS:return{col:n.cols[0],row:n.rows[0]};default:return null}}static copy(n){const i=Regions.getRegionCardinality(n);return i===RegionCardinality.CELLS?Regions.cell(n.rows[0],n.cols[0],n.rows[1],n.cols[1]):i===RegionCardinality.FULL_COLUMNS?Regions.column(n.cols[0],n.cols[1]):i===RegionCardinality.FULL_ROWS?Regions.row(n.rows[0],n.rows[1]):Regions.table()}static cell(n,i,o,e){return{cols:this.normalizeInterval(i,e),rows:this.normalizeInterval(n,o)}}static row(n,i){return{rows:this.normalizeInterval(n,i)}}static column(n,i){return{cols:this.normalizeInterval(n,i)}}static table(){return{}}static add(n,i){const o=n.slice();return o.push(i),o}static update(n,i,o){const e=n.slice();return null!=o?e.splice(o,1,i):(e.pop(),e.push(i)),e}static clampRegion(n,i,o){const e=Regions.copy(n);return null!=n.rows&&(e.rows[0]=Utils.clamp(n.rows[0],0,i),e.rows[1]=Utils.clamp(n.rows[1],0,i)),null!=n.cols&&(e.cols[0]=Utils.clamp(n.cols[0],0,o),e.cols[1]=Utils.clamp(n.cols[1],0,o)),e}static lastRegionIsEqual(n,i){if(null==n||0===n.length)return!1;const o=n[n.length-1];return Regions.regionsEqual(o,i)}static findMatchingRegion(n,i){if(null==n)return-1;for(let o=0;o<n.length;o++)if(Regions.regionsEqual(n[o],i))return o;return-1}static findContainingRegion(n,i){if(null==n)return-1;for(let o=0;o<n.length;o++)if(Regions.regionContains(n[o],i))return o;return-1}static hasFullColumn(n,i){if(null==n)return!1;for(const o of n){const n=Regions.getRegionCardinality(o);if(n===RegionCardinality.FULL_TABLE)return!0;if(n===RegionCardinality.FULL_COLUMNS&&Regions.intervalContainsIndex(o.cols,i))return!0}return!1}static hasFullRow(n,i){if(null==n)return!1;for(const o of n){const n=Regions.getRegionCardinality(o);if(n===RegionCardinality.FULL_TABLE)return!0;if(n===RegionCardinality.FULL_ROWS&&Regions.intervalContainsIndex(o.rows,i))return!0}return!1}static hasFullTable(n){if(null==n)return!1;for(const i of n)if(Regions.getRegionCardinality(i)===RegionCardinality.FULL_TABLE)return!0;return!1}static containsRegion(n,i){return Regions.overlapsRegion(n,i,!1)}static overlapsRegion(n,i,o=!1){const e=o?Regions.intervalOverlaps:Regions.intervalContains;if(null==n||null==i)return!1;for(const o of n)switch(Regions.getRegionCardinality(o)){case RegionCardinality.FULL_TABLE:return!0;case RegionCardinality.FULL_COLUMNS:if(e(o.cols,i.cols))return!0;continue;case RegionCardinality.FULL_ROWS:if(e(o.rows,i.rows))return!0;continue;case RegionCardinality.CELLS:if(e(o.cols,i.cols)&&e(o.rows,i.rows))return!0;continue}return!1}static eachUniqueFullColumn(n,i){if(null==n||0===n.length||null==i)return;const o={};n.forEach((n=>{if(Regions.getRegionCardinality(n)===RegionCardinality.FULL_COLUMNS){const[e,t]=n.cols;for(let n=e;n<=t;n++)o[n]||(o[n]=!0,i(n))}}))}static eachUniqueFullRow(n,i){if(null==n||0===n.length||null==i)return;const o={};n.forEach((n=>{if(Regions.getRegionCardinality(n)===RegionCardinality.FULL_ROWS){const[e,t]=n.rows;for(let n=e;n<=t;n++)o[n]||(o[n]=!0,i(n))}}))}static enumerateUniqueCells(n,i,o){if(null==n||0===n.length)return[];const e={},t=[];for(const l of n)Regions.eachCellInRegion(l,i,o,((n,i)=>{const o=`${n}-${i}`;!0!==e[o]&&(e[o]=!0,t.push([n,i]))}));return t.sort(Regions.rowFirstComparator),t}static getCellRegionFromRegion(n,i,o){switch(Regions.getRegionCardinality(n)){case RegionCardinality.FULL_TABLE:return Regions.cell(0,0,i-1,o-1);case RegionCardinality.FULL_COLUMNS:return Regions.cell(0,n.cols[0],i-1,n.cols[1]);case RegionCardinality.FULL_ROWS:return Regions.cell(n.rows[0],0,n.rows[1],o-1);case RegionCardinality.CELLS:return Regions.cell(n.rows[0],n.cols[0],n.rows[1],n.cols[1]);default:return null}}static sparseMapCells(n,i){const o=Regions.getBoundingRegion(n);if(null==o)return null;const e=o.rows[1]+1-o.rows[0],t=o.cols[1]+1-o.cols[0],l=Utils.times(e,(()=>new Array(t)));return n.forEach((([n,e])=>{l[n-o.rows[0]][e-o.cols[0]]=i(n,e)})),l}static getBoundingRegion(n){let i,o,e,t;for(const[l,r]of n)i=null==i||l<i?l:i,o=null==o||l>o?l:o,e=null==e||r<e?r:e,t=null==t||r>t?r:t;return null==i?null:{cols:[e,t],rows:[i,o]}}static isValid(n){return!(null==n||null!=n.rows&&(n.rows[0]<0||n.rows[1]<0)||null!=n.cols&&(n.cols[0]<0||n.cols[1]<0))}static isRegionValidForTable(n,i,o){return!(0===i||0===o||null!=n.rows&&!intervalInRangeInclusive(n.rows,0,i-1)||null!=n.cols&&!intervalInRangeInclusive(n.cols,0,o-1))}static joinStyledRegionGroups(n,i,o){let e=[];return null!=i&&(e=e.concat(i)),null!=n&&n.length>0&&e.push({className:Classes.TABLE_SELECTION_REGION,regions:n}),null!=o&&e.push({className:Classes.TABLE_FOCUS_REGION,regions:[Regions.cell(o.row,o.col)]}),e}static regionsEqual(n,i){return Regions.intervalsEqual(n.rows,i.rows)&&Regions.intervalsEqual(n.cols,i.cols)}static expandRegion(n,i){const o=Regions.getRegionCardinality(n),e=Regions.getRegionCardinality(i);if(e!==o)return i;switch(e){case RegionCardinality.FULL_ROWS:{const o=Math.min(n.rows[0],i.rows[0]),e=Math.max(n.rows[1],i.rows[1]);return Regions.row(o,e)}case RegionCardinality.FULL_COLUMNS:{const o=Math.min(n.cols[0],i.cols[0]),e=Math.max(n.cols[1],i.cols[1]);return Regions.column(o,e)}case RegionCardinality.CELLS:{const o=Math.min(n.rows[0],i.rows[0]),e=Math.min(n.cols[0],i.cols[0]),t=Math.max(n.rows[1],i.rows[1]),l=Math.max(n.cols[1],i.cols[1]);return Regions.cell(o,e,t,l)}default:return Regions.table()}}static eachCellInRegion(n,i,o,e){switch(Regions.getRegionCardinality(n)){case RegionCardinality.FULL_TABLE:for(let n=0;n<i;n++)for(let i=0;i<o;i++)e(n,i);break;case RegionCardinality.FULL_COLUMNS:for(let o=0;o<i;o++)for(let i=n.cols[0];i<=n.cols[1];i++)e(o,i);break;case RegionCardinality.FULL_ROWS:for(let i=n.rows[0];i<=n.rows[1];i++)for(let n=0;n<o;n++)e(i,n);break;case RegionCardinality.CELLS:for(let i=n.rows[0];i<=n.rows[1];i++)for(let o=n.cols[0];o<=n.cols[1];o++)e(i,o)}}static regionContains(n,i){return Regions.overlapsRegion([n],i,!1)}static intervalsEqual(n,i){return null==n?null==i:null!=i&&n[0]===i[0]&&n[1]===i[1]}static intervalContainsIndex(n,i){return null!=n&&n[0]<=i&&n[1]>=i}static intervalContains(n,i){return null!=n&&null!=i&&n[0]<=i[0]&&i[1]<=n[1]}static intervalOverlaps(n,i){return null!=n&&null!=i&&!(n[1]<i[0]||n[0]>i[1])}static rowFirstComparator(n,i){const o=n[0]-i[0];return 0===o?n[1]-i[1]:o}static numericalComparator(n,i){return n-i}static normalizeInterval(n,i){null==i&&(i=n);const o=[n,i];return o.sort(Regions.numericalComparator),o}}function intervalInRangeInclusive(n,i,o){return inRangeInclusive(n[0],i,o)&&inRangeInclusive(n[1],i,o)}function inRangeInclusive(n,i,o){return n>=i&&n<=o}