var Resizable_1;import{__decorate}from"tslib";import*as React from"react";import{polyfill}from"react-lifecycles-compat";import{AbstractPureComponent2}from"@blueprintjs/core";import{Utils}from"../common/index";import{Orientation,ResizeHandle}from"./resizeHandle";let Resizable=Resizable_1=class extends AbstractPureComponent2{constructor(){super(...arguments),this.state=Resizable_1.getDerivedStateFromProps(this.props,null),this.onResizeMove=(e,t)=>{this.offsetSize(t),null!=this.props.onSizeChanged&&this.props.onSizeChanged(this.state.size)},this.onResizeEnd=e=>{this.setState({unclampedSize:this.state.size}),null!=this.props.onResizeEnd&&this.props.onResizeEnd(this.state.size)}}static getDerivedStateFromProps({size:e},t){return null==t?{size:e,unclampedSize:e}:null}componentDidUpdate(e){e.size!==this.props.size&&this.setState(Resizable_1.getDerivedStateFromProps(this.props,null))}render(){const e=React.Children.only(this.props.children),t={...e.props.style,...this.getStyle()};if(!1===this.props.isResizable)return React.cloneElement(e,{style:t});const s=this.renderResizeHandle();return React.cloneElement(e,{style:t,resizeHandle:s})}renderResizeHandle(){const{onLayoutLock:e,onDoubleClick:t,orientation:s}=this.props;return React.createElement(ResizeHandle,{key:"resize-handle",onDoubleClick:t,onLayoutLock:e,onResizeEnd:this.onResizeEnd,onResizeMove:this.onResizeMove,orientation:s})}getStyle(){return this.props.orientation===Orientation.VERTICAL?{flexBasis:`${this.state.size}px`,minWidth:"0px",width:`${this.state.size}px`}:{flexBasis:`${this.state.size}px`,height:`${this.state.size}px`,minHeight:"0px"}}offsetSize(e){const t=this.state.unclampedSize+e;this.setState({size:Utils.clamp(t,this.props.minSize,this.props.maxSize),unclampedSize:t})}};Resizable.defaultProps={isResizable:!0,minSize:0},Resizable=Resizable_1=__decorate([polyfill],Resizable);export{Resizable};