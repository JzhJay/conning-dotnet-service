import{__assign,__extends,__rest}from"tslib";import classNames from"classnames";import*as React from"react";import{DISPLAYNAME_PREFIX,EditableText,HotkeysTarget2,Utils as CoreUtils}from"@blueprintjs/core";import*as Classes from"../common/classes";import{Draggable}from"../interactions/draggable";import{Cell}from"./cell";var EditableCell2=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.refHandlers={cell:function(e){t.cellRef=e}},t.state={isEditing:!1,savedValue:t.props.value},t.renderCell=function(e){var a,l=e.handleKeyDown,n=e.handleKeyUp,s=t.props,o=s.editableTextProps,i=(s.onCancel,s.onChange,s.onConfirm,s.tabIndex),r=void 0===i?0:i,d=s.truncated,c=s.wrapText,p=__rest(s,["editableTextProps","onCancel","onChange","onConfirm","tabIndex","truncated","wrapText"]),u=t.state,h=u.isEditing,C=u.dirtyValue,m=u.savedValue,E=p.interactive||h,f=null;if(h){var y=o?o.className:null;f=React.createElement(EditableText,__assign({},o,{isEditing:!0,className:classNames(Classes.TABLE_EDITABLE_TEXT,Classes.TABLE_EDITABLE_NAME,y),intent:p.intent,minWidth:null,onCancel:t.handleCancel,onChange:t.handleChange,onConfirm:t.handleConfirm,onEdit:t.handleEdit,placeholder:"",selectAllOnFocus:!1,value:C}))}else{var v=classNames(Classes.TABLE_EDITABLE_TEXT,((a={})[Classes.TABLE_TRUNCATED_TEXT]=d,a[Classes.TABLE_NO_WRAP_TEXT]=!c,a));f=React.createElement("div",{className:v},m)}return React.createElement(Cell,__assign({},p,{wrapText:c,truncated:!1,interactive:E,cellRef:t.refHandlers.cell,onKeyDown:l,onKeyPress:t.handleKeyPress,onKeyUp:n,tabIndex:r}),React.createElement(Draggable,{onActivate:t.handleCellActivate,onDoubleClick:t.handleCellDoubleClick,preventDefault:!1,stopPropagation:E},f))},t.handleKeyPress=function(){!t.state.isEditing&&t.props.isFocused&&t.setState({isEditing:!0,dirtyValue:"",savedValue:t.state.savedValue})},t.handleEdit=function(){t.setState({isEditing:!0,dirtyValue:t.state.savedValue})},t.handleCancel=function(e){t.setState({isEditing:!1,dirtyValue:void 0}),t.invokeCallback(t.props.onCancel,e)},t.handleChange=function(e){t.setState({dirtyValue:e}),t.invokeCallback(t.props.onChange,e)},t.handleConfirm=function(e){t.setState({isEditing:!1,savedValue:e,dirtyValue:void 0}),t.invokeCallback(t.props.onConfirm,e)},t.handleCellActivate=function(e){return!0},t.handleCellDoubleClick=function(e){t.handleEdit()},t.hotkeys=[{combo:"f2",group:"Table",label:"Edit the currently focused cell",onKeyDown:t.handleEdit}],t}return __extends(t,e),t.prototype.componentDidMount=function(){this.checkShouldFocus()},t.prototype.componentDidUpdate=function(e){var t=!CoreUtils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!CoreUtils.deepCompareKeys(this.props,e,["style"]),a=this.props.value;t&&null!=a&&this.setState({savedValue:a,dirtyValue:a}),this.checkShouldFocus()},t.prototype.shouldComponentUpdate=function(e,t){return!CoreUtils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!CoreUtils.shallowCompareKeys(this.state,t)||!CoreUtils.deepCompareKeys(this.props,e,["style"])},t.prototype.render=function(){return React.createElement(HotkeysTarget2,{hotkeys:this.hotkeys},this.renderCell)},t.prototype.checkShouldFocus=function(){this.props.isFocused&&!this.state.isEditing&&this.cellRef.focus()},t.prototype.invokeCallback=function(e,t){var a=this.props,l=a.rowIndex,n=a.columnIndex;null==e||e(t,l,n)},t.displayName=DISPLAYNAME_PREFIX+".EditableCell2",t.defaultProps={truncated:!0,wrapText:!1},t}(React.Component);export{EditableCell2};