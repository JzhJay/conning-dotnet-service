import classNames from"classnames";import*as React from"react";import{Classes as CoreClasses,DISPLAYNAME_PREFIX,Utils as CoreUtils}from"@blueprintjs/core";import*as Classes from"../common/classes";import{LoadableContent}from"../common/loadableContent";import{JSONFormat}from"./formats/jsonFormat";import{TruncatedFormat}from"./formats/truncatedFormat";export const emptyCellRenderer=()=>React.createElement(Cell,null);export class Cell extends React.Component{shouldComponentUpdate(e){return!CoreUtils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!CoreUtils.deepCompareKeys(this.props.style,e.style)}render(){const{cellRef:e,tabIndex:t,onKeyDown:s,onKeyUp:a,onKeyPress:l,style:r,intent:o,interactive:n,loading:m,tooltip:i,truncated:C,className:c,wrapText:p}=this.props,d=classNames(Classes.TABLE_CELL,CoreClasses.intentClass(o),{[Classes.TABLE_CELL_INTERACTIVE]:n,[CoreClasses.LOADING]:m,[Classes.TABLE_TRUNCATED_CELL]:C},c),E=classNames({[Classes.TABLE_TRUNCATED_TEXT]:C,[Classes.TABLE_NO_WRAP_TEXT]:!p}),T=React.Children.map(this.props.children,(e=>{const t=CoreUtils.isElementOfType(e,TruncatedFormat)||CoreUtils.isElementOfType(e,JSONFormat);return null!=r&&React.isValidElement(e)&&t?React.cloneElement(e,{parentCellHeight:parseInt(r.height.toString(),10),parentCellWidth:parseInt(r.width.toString(),10)}):e})),y=React.createElement("div",{className:E},T);return React.createElement("div",Object.assign({className:d,title:i,ref:e},{style:r,tabIndex:t,onKeyDown:s,onKeyUp:a,onKeyPress:l}),React.createElement(LoadableContent,{loading:m,variableLength:!0},y))}}Cell.displayName=`${DISPLAYNAME_PREFIX}.Cell`,Cell.defaultProps={truncated:!0,wrapText:!1};