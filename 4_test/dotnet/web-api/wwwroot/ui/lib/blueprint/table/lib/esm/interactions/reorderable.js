import{__assign,__extends}from"tslib";import*as React from"react";import{Utils as CoreUtils}from"@blueprintjs/core";import{Utils}from"../common/utils";import{RegionCardinality,Regions}from"../regions";import{Draggable}from"./draggable";var DragReorderable=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.handleActivate=function(e){if(o.shouldIgnoreMouseDown(e))return!1;var n=o.props.locateClick(e);if(!Regions.isValid(n))return!1;var r=Regions.getRegionCardinality(n),t=r===RegionCardinality.FULL_COLUMNS,i=r===RegionCardinality.FULL_ROWS;if(!t&&!i)return!1;var s=o.props.selectedRegions,a=Regions.findContainingRegion(s,n);if(a>=0){var l=s[a];if(Regions.getRegionCardinality(l)!==r)return!1;var g=i?l.rows:l.cols;o.selectedRegionStartIndex=g[0],o.selectedRegionLength=g[1]-g[0]+1}else{o.maybeSelectRegion(n);var d=i?n.rows:n.cols;o.selectedRegionStartIndex=d[0],o.selectedRegionLength=d[1]-d[0]+1}return!0},o.handleDragMove=function(e,n){var r=o.selectedRegionStartIndex,t=o.props.locateDrag(e,n),i=o.selectedRegionLength,s=Utils.guideIndexToReorderedIndex(r,t,i);o.props.onReordering(r,s,i)},o.handleDragEnd=function(e,n){var r=o.selectedRegionStartIndex,t=o.props.locateDrag(e,n),i=o.selectedRegionLength,s=Utils.guideIndexToReorderedIndex(r,t,i);o.props.onReordered(r,s,i);var a=o.props.toRegion(s,s+i-1);o.maybeSelectRegion(a),o.selectedRegionStartIndex=void 0,o.selectedRegionLength=void 0},o}return __extends(o,e),o.prototype.render=function(){var e=this.getDraggableProps();return React.createElement(Draggable,__assign({},e,{preventDefault:!1}),this.props.children)},o.prototype.getDraggableProps=function(){return null==this.props.onReordered?{}:{onActivate:this.handleActivate,onDragEnd:this.handleDragEnd,onDragMove:this.handleDragMove}},o.prototype.shouldIgnoreMouseDown=function(e){var o=this.props.disabled,n=CoreUtils.isFunction(o)?null==o?void 0:o(e):o;return!Utils.isLeftClick(e)||n},o.prototype.maybeSelectRegion=function(e){var o=[e];CoreUtils.deepCompareKeys(o,this.props.selectedRegions)||(this.props.onSelection(o),this.props.onFocusedCell(__assign(__assign({},Regions.getFocusCellCoordinatesFromRegion(e)),{focusSelectionIndex:0})))},o.defaultProps={selectedRegions:[]},o}(React.PureComponent);export{DragReorderable};