import classNames from"classnames";import*as React from"react";import{AbstractComponent2,Utils as CoreUtils}from"@blueprintjs/core";import*as Classes from"./common/classes";import{ContextMenuTargetWrapper}from"./common/contextMenuTargetWrapper";import{RenderMode}from"./common/renderMode";import{MenuContext}from"./interactions/menus";import{DragSelectable}from"./interactions/selectable";import{Regions}from"./regions";import{cellClassNames,TableBodyCells}from"./tableBodyCells";const DEEP_COMPARE_KEYS=["selectedRegions"];export class TableBody extends AbstractComponent2{constructor(){super(...arguments),this.renderContextMenu=e=>{const{grid:t,onFocusedCell:o,onSelection:n,bodyContextMenuRenderer:s,selectedRegions:l}=this.props,{numRows:r,numCols:i}=t;if(null==s)return;const c=this.locateClick(e.nativeEvent);let a=l;Regions.findContainingRegion(l,c)<0&&(a=[c],n(a),o({...Regions.getFocusCellCoordinatesFromRegion(c),focusSelectionIndex:0}));const p=s(new MenuContext(c,a,r,i));return null==p?void 0:p},this.handleSelectionEnd=()=>{this.activationCell=null},this.locateClick=e=>(this.activationCell=this.props.locator.convertPointToCell(e.clientX,e.clientY),Regions.cell(this.activationCell.row,this.activationCell.col)),this.locateDrag=(e,t,o=!1)=>{const n=this.activationCell,s=this.props.locator.convertPointToCell(t.current[0],t.current[1]);return o?Regions.cell(s.row,s.col):Regions.cell(n.row,n.col,s.row,s.col)}}static cellClassNames(e,t){return cellClassNames(e,t)}shouldComponentUpdate(e){return!CoreUtils.shallowCompareKeys(this.props,e,{exclude:DEEP_COMPARE_KEYS})||!CoreUtils.deepCompareKeys(this.props,e,DEEP_COMPARE_KEYS)}render(){const{grid:e,numFrozenColumns:t,numFrozenRows:o}=this.props,n=e.getRect().sizeStyle(),s={height:null!=o?e.getCumulativeHeightAt(o-1):n.height,width:null!=t?e.getCumulativeWidthAt(t-1):n.width};return React.createElement(DragSelectable,{enableMultipleSelection:this.props.enableMultipleSelection,focusedCell:this.props.focusedCell,locateClick:this.locateClick,locateDrag:this.locateDrag,onFocusedCell:this.props.onFocusedCell,onSelection:this.props.onSelection,onSelectionEnd:this.handleSelectionEnd,selectedRegions:this.props.selectedRegions,selectedRegionTransform:this.props.selectedRegionTransform},React.createElement(ContextMenuTargetWrapper,{className:classNames(Classes.TABLE_BODY_VIRTUAL_CLIENT,Classes.TABLE_CELL_CLIENT),renderContextMenu:this.renderContextMenu,style:s},React.createElement(TableBodyCells,{cellRenderer:this.props.cellRenderer,focusedCell:this.props.focusedCell,grid:e,loading:this.props.loading,onCompleteRender:this.props.onCompleteRender,renderMode:this.props.renderMode,columnIndexStart:this.props.columnIndexStart,columnIndexEnd:this.props.columnIndexEnd,rowIndexStart:this.props.rowIndexStart,rowIndexEnd:this.props.rowIndexEnd,viewportRect:this.props.viewportRect})))}}TableBody.defaultProps={loading:!1,renderMode:RenderMode.BATCH};