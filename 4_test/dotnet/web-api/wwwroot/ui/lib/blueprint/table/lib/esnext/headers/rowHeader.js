import classNames from"classnames";import*as React from"react";import*as Classes from"../common/classes";import{Orientation}from"../interactions/resizeHandle";import{RegionCardinality,Regions}from"../regions";import{Header}from"./header";import{RowHeaderCell}from"./rowHeaderCell";export class RowHeader extends React.Component{constructor(){super(...arguments),this.wrapCells=e=>{const{rowIndexStart:t,grid:s}=this.props,r=s.getRect().height,o=this.props.grid.getCumulativeHeightBefore(t),i={height:r-o,transform:`translateY(${o||0}px)`};return React.createElement("div",{style:{height:r}},React.createElement("div",{className:Classes.TABLE_ROW_HEADERS_CELLS_CONTAINER,style:i},e))},this.convertPointToRow=(e,t)=>{const{locator:s}=this.props;return null!=s?s.convertPointToRow(e,t):null},this.getCellExtremaClasses=(e,t)=>this.props.grid.getExtremaClasses(e,0,t,1),this.getRowHeight=e=>this.props.grid.getRowRect(e).height,this.getDragCoordinate=e=>e[1],this.getMouseCoordinate=e=>e.clientY,this.handleResizeEnd=(e,t)=>{this.props.onResizeGuide(null),this.props.onRowHeightChanged(e,t)},this.handleSizeChanged=(e,t)=>{const s=this.props.grid.getRowRect(e);this.props.onResizeGuide([s.top+t])},this.isCellSelected=e=>Regions.hasFullRow(this.props.selectedRegions,e),this.isGhostIndex=e=>this.props.grid.isGhostIndex(e,-1),this.renderGhostCell=(e,t)=>{const s=this.props.grid.getGhostCellRect(e,0);return React.createElement(RowHeaderCell,{className:classNames(t),index:e,key:Classes.rowIndexClass(e),loading:this.props.loading,style:{height:`${s.height}px`}})},this.toRegion=(e,t)=>Regions.row(e,t)}render(){const{onRowHeightChanged:e,rowHeaderCellRenderer:t,minRowHeight:s,maxRowHeight:r,defaultRowHeight:o,rowIndexStart:i,rowIndexEnd:n,...a}=this.props;return React.createElement(Header,Object.assign({convertPointToIndex:this.convertPointToRow,fullRegionCardinality:RegionCardinality.FULL_ROWS,getCellExtremaClasses:this.getCellExtremaClasses,getCellIndexClass:Classes.rowCellIndexClass,getCellSize:this.getRowHeight,getDragCoordinate:this.getDragCoordinate,getIndexClass:Classes.rowIndexClass,getMouseCoordinate:this.getMouseCoordinate,ghostCellRenderer:this.renderGhostCell,handleResizeEnd:this.handleResizeEnd,handleSizeChanged:this.handleSizeChanged,headerCellIsReorderablePropName:"enableRowReordering",headerCellIsSelectedPropName:"isRowSelected",headerCellRenderer:t,indexEnd:n,indexStart:i,isCellSelected:this.isCellSelected,isGhostIndex:this.isGhostIndex,maxSize:r,minSize:s,resizeOrientation:Orientation.HORIZONTAL,selectedRegions:[],toRegion:this.toRegion,wrapCells:this.wrapCells},a))}}RowHeader.defaultProps={rowHeaderCellRenderer:renderDefaultRowHeader};export function renderDefaultRowHeader(e){return React.createElement(RowHeaderCell,{index:e,name:`${e+1}`})}