import{__decorate}from"tslib";import classNames from"classnames";import*as React from"react";import{polyfill}from"react-lifecycles-compat";import{AbstractPureComponent2,Classes,DISPLAYNAME_PREFIX}from"../../common";import{Icon}from"../icon/icon";import{normalizeKeyCombo}from"./hotkeyParser";const KeyIcons={alt:{icon:"key-option",iconTitle:"Alt/Option key"},cmd:{icon:"key-command",iconTitle:"Command key"},ctrl:{icon:"key-control",iconTitle:"Control key"},delete:{icon:"key-delete",iconTitle:"Delete key"},down:{icon:"arrow-down",iconTitle:"Down key"},enter:{icon:"key-enter",iconTitle:"Enter key"},left:{icon:"arrow-left",iconTitle:"Left key"},meta:{icon:"key-command",iconTitle:"Command key"},right:{icon:"arrow-right",iconTitle:"Right key"},shift:{icon:"key-shift",iconTitle:"Shift key"},up:{icon:"arrow-up",iconTitle:"Up key"}};let KeyCombo=class extends AbstractPureComponent2{constructor(){super(...arguments),this.renderKey=(e,o)=>{const t=KeyIcons[e],n=`key-${o}`;return React.createElement("kbd",{className:classNames(Classes.KEY,{[Classes.MODIFIER_KEY]:null!=t}),key:n},null!=t&&React.createElement(Icon,{icon:t.icon,title:t.iconTitle}),e)},this.renderMinimalKey=(e,o)=>{const t=KeyIcons[e];return null==t?e:React.createElement(Icon,{icon:t.icon,title:t.iconTitle,key:`key-${o}`})}}render(){const{className:e,combo:o,minimal:t}=this.props,n=normalizeKeyCombo(o).map((e=>1===e.length?e.toUpperCase():e)).map(t?this.renderMinimalKey:this.renderKey);return React.createElement("span",{className:classNames(Classes.KEY_COMBO,e)},n)}};KeyCombo.displayName=`${DISPLAYNAME_PREFIX}.KeyCombo`,KeyCombo=__decorate([polyfill],KeyCombo);export{KeyCombo};