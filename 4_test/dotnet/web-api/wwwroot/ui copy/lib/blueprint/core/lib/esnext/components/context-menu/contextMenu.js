import{__decorate}from"tslib";import classNames from"classnames";import*as React from"react";import*as ReactDOM from"react-dom";import{polyfill}from"react-lifecycles-compat";import{AbstractPureComponent2,Classes,Position}from"../../common";import{Popover}from"../popover/popover";const POPPER_MODIFIERS={preventOverflow:{boundariesElement:"viewport"}},TRANSITION_DURATION=100;let contextMenuElement,contextMenu,ContextMenu=class extends AbstractPureComponent2{constructor(){super(...arguments),this.state={isDarkTheme:!1,isOpen:!1},this.cancelContextMenu=e=>e.preventDefault(),this.handleBackdropContextMenu=e=>{e.persist(),e.preventDefault(),this.setTimeout((()=>{const t=document.elementFromPoint(e.clientX,e.clientY),{view:n,...o}=e;t?.dispatchEvent(new MouseEvent("contextmenu",o))}),100)},this.handlePopoverInteraction=e=>{e||this.requestAnimationFrame((()=>this.hide()))}}render(){const e=React.createElement("div",{onContextMenu:this.cancelContextMenu},this.state.menu),t=classNames({[Classes.DARK]:this.state.isDarkTheme}),n=void 0===this.state.offset?"":`${this.state.offset.left}x${this.state.offset.top}`;return React.createElement("div",{className:Classes.CONTEXT_MENU_POPOVER_TARGET,style:this.state.offset},React.createElement(Popover,Object.assign({},this.props,{backdropProps:{onContextMenu:this.handleBackdropContextMenu},content:e,enforceFocus:!1,key:n,hasBackdrop:!0,isOpen:this.state.isOpen,minimal:!0,modifiers:POPPER_MODIFIERS,onInteraction:this.handlePopoverInteraction,position:Position.RIGHT_TOP,popoverClassName:t,target:React.createElement("div",null),transitionDuration:100})))}show(e,t,n,o=!1){this.setState({isOpen:!0,menu:e,offset:t,onClose:n,isDarkTheme:o})}hide(){this.state.onClose?.(),this.setState({isOpen:!1,onClose:void 0})}};ContextMenu=__decorate([polyfill],ContextMenu);export function show(e,t,n,o){void 0===contextMenuElement&&(contextMenuElement=document.createElement("div"),contextMenuElement.classList.add(Classes.CONTEXT_MENU),document.body.appendChild(contextMenuElement),contextMenu=ReactDOM.render(React.createElement(ContextMenu,{onClosed:remove}),contextMenuElement)),contextMenu.show(e,t,n,o)}export function hide(){contextMenu?.hide()}export function isOpen(){return null!=contextMenu&&contextMenu.state.isOpen}function remove(){null!=contextMenuElement&&(ReactDOM.unmountComponentAtNode(contextMenuElement),contextMenuElement.remove(),contextMenuElement=void 0,contextMenu=void 0)}