var NumericInput_1,IncrementDirection;import{__decorate}from"tslib";import classNames from"classnames";import*as React from"react";import{polyfill}from"react-lifecycles-compat";import{AbstractPureComponent2,Classes,DISPLAYNAME_PREFIX,Intent,Keys,Position,refHandler,removeNonHTMLProps,setRef,Utils}from"../../common";import*as Errors from"../../common/errors";import{ButtonGroup}from"../button/buttonGroup";import{Button}from"../button/buttons";import{ControlGroup}from"./controlGroup";import{InputGroup}from"./inputGroup";import{clampValue,getValueOrEmptyValue,isValidNumericKeyboardEvent,isValueNumeric,parseStringToStringNumber,sanitizeNumericInput,toLocaleString,toMaxPrecision}from"./numericInputUtils";!function(t){t[t.DOWN=-1]="DOWN",t[t.UP=1]="UP"}(IncrementDirection||(IncrementDirection={}));const NON_HTML_PROPS=["allowNumericCharactersOnly","buttonPosition","clampValueOnBlur","className","defaultValue","majorStepSize","minorStepSize","onButtonClick","onValueChange","selectAllOnFocus","selectAllOnIncrement","stepSize"];let NumericInput=NumericInput_1=class extends AbstractPureComponent2{constructor(){super(...arguments),this.state={currentImeInputInvalid:!1,shouldSelectAfterUpdate:!1,stepMaxPrecision:NumericInput_1.getStepMaxPrecision(this.props),value:getValueOrEmptyValue(this.props.value??this.props.defaultValue)},this.didPasteEventJustOccur=!1,this.delta=0,this.inputElement=null,this.inputRef=refHandler(this,"inputElement",this.props.inputRef),this.incrementButtonHandlers=this.getButtonEventHandlers(IncrementDirection.UP),this.decrementButtonHandlers=this.getButtonEventHandlers(IncrementDirection.DOWN),this.handleButtonClick=(t,e)=>{const n=this.updateDelta(e,t),s=this.incrementValue(n);this.props.onButtonClick?.(Number(parseStringToStringNumber(s,this.props.locale)),s)},this.stopContinuousChange=()=>{this.delta=0,this.clearTimeouts(),clearInterval(this.intervalId),document.removeEventListener("mouseup",this.stopContinuousChange)},this.handleContinuousChange=()=>{if(void 0!==this.props.min||void 0!==this.props.max){const t=this.props.min??-1/0,e=this.props.max??1/0,n=Number(parseStringToStringNumber(this.state.value,this.props.locale));if(n<=t||n>=e)return void this.stopContinuousChange()}const t=this.incrementValue(this.delta);this.props.onButtonClick?.(Number(parseStringToStringNumber(t,this.props.locale)),t)},this.handleInputFocus=t=>{this.setState({shouldSelectAfterUpdate:this.props.selectAllOnFocus}),this.props.onFocus?.(t)},this.handleInputBlur=t=>{if(this.setState({shouldSelectAfterUpdate:!1}),this.props.clampValueOnBlur){const{value:e}=t.target;this.handleNextValue(this.roundAndClampValue(e))}this.props.onBlur?.(t)},this.handleInputKeyDown=t=>{if(this.props.disabled||this.props.readOnly)return;const{keyCode:e}=t;let n;if(e===Keys.ARROW_UP?n=IncrementDirection.UP:e===Keys.ARROW_DOWN&&(n=IncrementDirection.DOWN),void 0!==n){t.preventDefault();const e=this.updateDelta(n,t);this.incrementValue(e)}this.props.onKeyDown?.(t)},this.handleCompositionEnd=t=>{this.props.allowNumericCharactersOnly&&(this.handleNextValue(sanitizeNumericInput(t.data,this.props.locale)),this.setState({currentImeInputInvalid:!1}))},this.handleCompositionUpdate=t=>{if(this.props.allowNumericCharactersOnly){const{data:e}=t;0===sanitizeNumericInput(e,this.props.locale).length&&e.length>0?this.setState({currentImeInputInvalid:!0}):this.setState({currentImeInputInvalid:!1})}},this.handleInputKeyPress=t=>{this.props.allowNumericCharactersOnly&&!isValidNumericKeyboardEvent(t,this.props.locale)&&t.preventDefault(),this.props.onKeyPress?.(t)},this.handleInputPaste=t=>{this.didPasteEventJustOccur=!0,this.props.onPaste?.(t)},this.handleInputChange=t=>{const{value:e}=t.target;let n=e;this.props.allowNumericCharactersOnly&&this.didPasteEventJustOccur&&(this.didPasteEventJustOccur=!1,n=sanitizeNumericInput(e,this.props.locale)),this.handleNextValue(n),this.setState({shouldSelectAfterUpdate:!1})}}static getDerivedStateFromProps(t,e){const n={prevMaxProp:t.max,prevMinProp:t.min},s=t.min!==e.prevMinProp,r=t.max!==e.prevMaxProp,i=s||r,o=t.value?.toString()??e.value,a=NumericInput_1.getStepMaxPrecision(t),l=o!==NumericInput_1.VALUE_EMPTY?NumericInput_1.roundAndClampValue(o,a,t.min,t.max,0,t.locale):NumericInput_1.VALUE_EMPTY;return i&&l!==e.value?{...n,stepMaxPrecision:a,value:l}:{...n,stepMaxPrecision:a,value:o}}static getStepMaxPrecision(t){return null!=t.minorStepSize?Utils.countDecimalPlaces(t.minorStepSize):Utils.countDecimalPlaces(t.stepSize)}static roundAndClampValue(t,e,n,s,r=0,i){if(!isValueNumeric(t,i))return NumericInput_1.VALUE_EMPTY;const o=parseStringToStringNumber(t,i),a=toMaxPrecision(Number(o)+r,e),l=clampValue(a,n,s);return toLocaleString(l,i)}render(){const{buttonPosition:t,className:e,fill:n,large:s}=this.props,r=classNames(Classes.NUMERIC_INPUT,{[Classes.LARGE]:s},e),i=this.renderButtons();return React.createElement(ControlGroup,{className:r,fill:n},t===Position.LEFT&&i,this.renderInput(),t===Position.RIGHT&&i)}componentDidUpdate(t,e){super.componentDidUpdate(t,e),t.inputRef!==this.props.inputRef&&(setRef(t.inputRef,null),this.inputRef=refHandler(this,"inputElement",this.props.inputRef),setRef(this.props.inputRef,this.inputElement)),this.state.shouldSelectAfterUpdate&&this.inputElement?.setSelectionRange(0,this.state.value.length);const n=this.props.min!==t.min,s=this.props.max!==t.max,r=n||s,i=this.props.locale!==t.locale,o=this.state.value!==e.value;if(r&&o||i&&e.value!==NumericInput_1.VALUE_EMPTY){const n=i?e.value:this.state.value,s=parseStringToStringNumber(n,t.locale),r=toLocaleString(+s,this.props.locale);this.props.onValueChange?.(+s,r,this.inputElement)}}validateProps(t){const{majorStepSize:e,max:n,min:s,minorStepSize:r,stepSize:i,value:o}=t;if(null!=s&&null!=n&&s>n&&console.error(Errors.NUMERIC_INPUT_MIN_MAX),i<=0&&console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE),r&&r<=0&&console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE),e&&e<=0&&console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE),r&&r>i&&console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND),e&&e<i&&console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND),null!=o){const e=NumericInput_1.getStepMaxPrecision(t),r=NumericInput_1.roundAndClampValue(o.toString(),e,s,n,0,this.props.locale),i=r!==o.toString(),a=r!==toLocaleString(Number(parseStringToStringNumber(o,this.props.locale)),this.props.locale);i&&a&&console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID)}}renderButtons(){const{intent:t,max:e,min:n,locale:s}=this.props,r=parseStringToStringNumber(this.state.value,s),i=this.props.disabled||this.props.readOnly,o=void 0!==e&&""!==r&&+r>=e,a=void 0!==n&&""!==r&&+r<=n;return React.createElement(ButtonGroup,{className:Classes.FIXED,key:"button-group",vertical:!0},React.createElement(Button,Object.assign({"aria-label":"increment",disabled:i||o,icon:"chevron-up",intent:t},this.incrementButtonHandlers)),React.createElement(Button,Object.assign({"aria-label":"decrement",disabled:i||a,icon:"chevron-down",intent:t},this.decrementButtonHandlers)))}renderInput(){const t=removeNonHTMLProps(this.props,NON_HTML_PROPS,!0);return React.createElement(InputGroup,Object.assign({asyncControl:this.props.asyncControl,autoComplete:"off"},t,{intent:this.state.currentImeInputInvalid?Intent.DANGER:this.props.intent,inputRef:this.inputRef,large:this.props.large,leftIcon:this.props.leftIcon,onFocus:this.handleInputFocus,onBlur:this.handleInputBlur,onChange:this.handleInputChange,onCompositionEnd:this.handleCompositionEnd,onCompositionUpdate:this.handleCompositionUpdate,onKeyDown:this.handleInputKeyDown,onKeyPress:this.handleInputKeyPress,onPaste:this.handleInputPaste,rightElement:this.props.rightElement,value:this.state.value}))}getButtonEventHandlers(t){return{onKeyDown:e=>{!this.props.disabled&&Keys.isKeyboardClick(e.keyCode)&&this.handleButtonClick(e,t)},onMouseDown:e=>{this.props.disabled||(this.handleButtonClick(e,t),this.startContinuousChange())}}}startContinuousChange(){document.addEventListener("mouseup",this.stopContinuousChange),this.setTimeout((()=>{this.intervalId=window.setInterval(this.handleContinuousChange,NumericInput_1.CONTINUOUS_CHANGE_INTERVAL)}),NumericInput_1.CONTINUOUS_CHANGE_DELAY)}handleNextValue(t){null==this.props.value&&this.setState({value:t}),this.props.onValueChange?.(Number(parseStringToStringNumber(t,this.props.locale)),t,this.inputElement)}incrementValue(t){const e=this.state.value===NumericInput_1.VALUE_EMPTY?NumericInput_1.VALUE_ZERO:this.state.value,n=this.roundAndClampValue(e,t);return n!==this.state.value&&(this.handleNextValue(n),this.setState({shouldSelectAfterUpdate:this.props.selectAllOnIncrement})),n}getIncrementDelta(t,e,n){const{majorStepSize:s,minorStepSize:r,stepSize:i}=this.props;return e&&null!=s?t*s:n&&null!=r?t*r:t*i}roundAndClampValue(t,e=0){return NumericInput_1.roundAndClampValue(t,this.state.stepMaxPrecision,this.props.min,this.props.max,e,this.props.locale)}updateDelta(t,e){return this.delta=this.getIncrementDelta(t,e.shiftKey,e.altKey),this.delta}};NumericInput.displayName=`${DISPLAYNAME_PREFIX}.NumericInput`,NumericInput.VALUE_EMPTY="",NumericInput.VALUE_ZERO="0",NumericInput.defaultProps={allowNumericCharactersOnly:!0,buttonPosition:Position.RIGHT,clampValueOnBlur:!1,defaultValue:NumericInput_1.VALUE_EMPTY,large:!1,majorStepSize:10,minorStepSize:.1,selectAllOnFocus:!1,selectAllOnIncrement:!1,stepSize:1},NumericInput.CONTINUOUS_CHANGE_DELAY=300,NumericInput.CONTINUOUS_CHANGE_INTERVAL=100,NumericInput=NumericInput_1=__decorate([polyfill],NumericInput);export{NumericInput};