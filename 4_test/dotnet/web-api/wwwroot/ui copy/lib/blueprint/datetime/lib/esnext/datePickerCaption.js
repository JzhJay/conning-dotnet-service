import{__decorate}from"tslib";import*as React from"react";import{polyfill}from"react-lifecycles-compat";import{AbstractPureComponent2,Divider,HTMLSelect,IconSize}from"@blueprintjs/core";import*as Classes from"./common/classes";import{clone}from"./common/dateUtils";import{measureTextWidth}from"./common/utils";let DatePickerCaption=class extends AbstractPureComponent2{constructor(){super(...arguments),this.state={monthRightOffset:0},this.handleMonthSelectChange=this.dateChangeHandler(((e,t)=>e.setMonth(t)),this.props.onMonthChange),this.handleYearSelectChange=this.dateChangeHandler(((e,t)=>e.setFullYear(t)),this.props.onYearChange)}render(){const{date:e,locale:t,localeUtils:a,minDate:s,maxDate:n,months:o=a.getMonths(t)}=this.props,i=s.getFullYear(),r=n.getFullYear(),l=e.getMonth(),h=e.getFullYear(),c=h===i?s.getMonth():0,m=h===r?n.getMonth()+1:void 0,p=o.map(((e,t)=>({label:e,value:t}))).slice(c,m),d=[i];for(let e=i+1;e<=r;++e)d.push(e);h>r&&d.push({value:h,disabled:!0}),this.displayedMonthText=o[l];const C=React.createElement(HTMLSelect,{iconProps:{style:{right:this.state.monthRightOffset}},className:Classes.DATEPICKER_MONTH_SELECT,key:"month",minimal:!0,onChange:this.handleMonthSelectChange,value:l,options:p}),u=React.createElement(HTMLSelect,{className:Classes.DATEPICKER_YEAR_SELECT,key:"year",minimal:!0,onChange:this.handleYearSelectChange,value:h,options:d}),E=this.props.reverseMonthAndYearMenus?[u,C]:[C,u];return React.createElement("div",{className:this.props.classNames.caption},React.createElement("div",{className:Classes.DATEPICKER_CAPTION,ref:e=>this.containerElement=e},E),React.createElement(Divider,null))}componentDidMount(){this.requestAnimationFrame((()=>this.positionArrows()))}componentDidUpdate(){this.positionArrows()}positionArrows(){const e=measureTextWidth(this.displayedMonthText,Classes.DATEPICKER_CAPTION_MEASURE,this.containerElement),t=null==this.containerElement?0:this.containerElement.firstElementChild.clientWidth,a=Math.max(2,t-e-IconSize.STANDARD-2);this.setState({monthRightOffset:a})}dateChangeHandler(e,t){return a=>{const s=parseInt(a.target.value,10);if(isNaN(s))return;const n=clone(this.props.date);e(n,s),this.props.onDateChange?.(n),t?.(s)}}};DatePickerCaption=__decorate([polyfill],DatePickerCaption);export{DatePickerCaption};