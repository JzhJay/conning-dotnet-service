import{__decorate}from"tslib";import classNames from"classnames";import*as React from"react";import{DISPLAYNAME_PREFIX,EditableText,Hotkey,Hotkeys,HotkeysTarget,Utils as CoreUtils}from"@blueprintjs/core";import*as Classes from"../common/classes";import{Draggable}from"../interactions/draggable";import{Cell}from"./cell";let EditableCell=class extends React.Component{constructor(e,t){super(e,t),this.refHandlers={cell:e=>{this.cellRef=e}},this.handleKeyPress=()=>{!this.state.isEditing&&this.props.isFocused&&this.setState({isEditing:!0,dirtyValue:"",savedValue:this.state.savedValue})},this.handleEdit=()=>{this.setState({isEditing:!0,dirtyValue:this.state.savedValue})},this.handleCancel=e=>{this.setState({isEditing:!1,dirtyValue:void 0}),this.invokeCallback(this.props.onCancel,e)},this.handleChange=e=>{this.setState({dirtyValue:e}),this.invokeCallback(this.props.onChange,e)},this.handleConfirm=e=>{this.setState({isEditing:!1,savedValue:e,dirtyValue:void 0}),this.invokeCallback(this.props.onConfirm,e)},this.handleCellActivate=e=>!0,this.handleCellDoubleClick=e=>{this.handleEdit()},this.state={isEditing:!1,savedValue:e.value}}componentDidMount(){this.checkShouldFocus()}componentDidUpdate(e){const t=!CoreUtils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!CoreUtils.deepCompareKeys(this.props,e,["style"]),{value:s}=this.props;t&&null!=s&&this.setState({savedValue:s,dirtyValue:s}),this.checkShouldFocus()}shouldComponentUpdate(e,t){return!CoreUtils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!CoreUtils.shallowCompareKeys(this.state,t)||!CoreUtils.deepCompareKeys(this.props,e,["style"])}render(){const{onCancel:e,onChange:t,onConfirm:s,truncated:l,wrapText:a,editableTextProps:i,...o}=this.props,{isEditing:n,dirtyValue:r,savedValue:d}=this.state,c=o.interactive||n;let h=null;if(n){const e=i?i.className:null;h=React.createElement(EditableText,Object.assign({},i,{isEditing:!0,className:classNames(Classes.TABLE_EDITABLE_TEXT,Classes.TABLE_EDITABLE_NAME,e),intent:o.intent,minWidth:null,onCancel:this.handleCancel,onChange:this.handleChange,onConfirm:this.handleConfirm,onEdit:this.handleEdit,placeholder:"",selectAllOnFocus:!1,value:r}))}else{const e=classNames(Classes.TABLE_EDITABLE_TEXT,{[Classes.TABLE_TRUNCATED_TEXT]:l,[Classes.TABLE_NO_WRAP_TEXT]:!a});h=React.createElement("div",{className:e},d)}return React.createElement(Cell,Object.assign({},o,{wrapText:a,truncated:!1,interactive:c,cellRef:this.refHandlers.cell,onKeyPress:this.handleKeyPress}),React.createElement(Draggable,{onActivate:this.handleCellActivate,onDoubleClick:this.handleCellDoubleClick,preventDefault:!1,stopPropagation:c},h))}renderHotkeys(){const{tabIndex:e}=this.props;return React.createElement(Hotkeys,{tabIndex:e},React.createElement(Hotkey,{key:"edit-cell",label:"Edit the currently focused cell",group:"Table",combo:"f2",onKeyDown:this.handleEdit}))}checkShouldFocus(){this.props.isFocused&&!this.state.isEditing&&this.cellRef.focus()}invokeCallback(e,t){const{rowIndex:s,columnIndex:l}=this.props;e?.(t,s,l)}};EditableCell.displayName=`${DISPLAYNAME_PREFIX}.EditableCell`,EditableCell.defaultProps={truncated:!0,wrapText:!1},EditableCell=__decorate([HotkeysTarget],EditableCell);export{EditableCell};