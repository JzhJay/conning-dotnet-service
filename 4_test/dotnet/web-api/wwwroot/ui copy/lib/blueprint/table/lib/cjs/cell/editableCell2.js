"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EditableCell2=void 0;var tslib_1=require("tslib"),classnames_1=tslib_1.__importDefault(require("classnames")),React=tslib_1.__importStar(require("react")),core_1=require("@blueprintjs/core"),Classes=tslib_1.__importStar(require("../common/classes")),draggable_1=require("../interactions/draggable"),cell_1=require("./cell"),EditableCell2=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.refHandlers={cell:function(e){t.cellRef=e}},t.state={isEditing:!1,savedValue:t.props.value},t.renderCell=function(e){var l,a=e.handleKeyDown,n=e.handleKeyUp,s=t.props,i=s.editableTextProps,o=(s.onCancel,s.onChange,s.onConfirm,s.tabIndex),r=void 0===o?0:o,c=s.truncated,d=s.wrapText,u=tslib_1.__rest(s,["editableTextProps","onCancel","onChange","onConfirm","tabIndex","truncated","wrapText"]),p=t.state,h=p.isEditing,_=p.dirtyValue,C=p.savedValue,E=u.interactive||h,f=null;if(h){var y=i?i.className:null;f=React.createElement(core_1.EditableText,tslib_1.__assign({},i,{isEditing:!0,className:classnames_1.default(Classes.TABLE_EDITABLE_TEXT,Classes.TABLE_EDITABLE_NAME,y),intent:u.intent,minWidth:null,onCancel:t.handleCancel,onChange:t.handleChange,onConfirm:t.handleConfirm,onEdit:t.handleEdit,placeholder:"",selectAllOnFocus:!1,value:_}))}else{var b=classnames_1.default(Classes.TABLE_EDITABLE_TEXT,((l={})[Classes.TABLE_TRUNCATED_TEXT]=c,l[Classes.TABLE_NO_WRAP_TEXT]=!d,l));f=React.createElement("div",{className:b},C)}return React.createElement(cell_1.Cell,tslib_1.__assign({},u,{wrapText:d,truncated:!1,interactive:E,cellRef:t.refHandlers.cell,onKeyDown:a,onKeyPress:t.handleKeyPress,onKeyUp:n,tabIndex:r}),React.createElement(draggable_1.Draggable,{onActivate:t.handleCellActivate,onDoubleClick:t.handleCellDoubleClick,preventDefault:!1,stopPropagation:E},f))},t.handleKeyPress=function(){!t.state.isEditing&&t.props.isFocused&&t.setState({isEditing:!0,dirtyValue:"",savedValue:t.state.savedValue})},t.handleEdit=function(){t.setState({isEditing:!0,dirtyValue:t.state.savedValue})},t.handleCancel=function(e){t.setState({isEditing:!1,dirtyValue:void 0}),t.invokeCallback(t.props.onCancel,e)},t.handleChange=function(e){t.setState({dirtyValue:e}),t.invokeCallback(t.props.onChange,e)},t.handleConfirm=function(e){t.setState({isEditing:!1,savedValue:e,dirtyValue:void 0}),t.invokeCallback(t.props.onConfirm,e)},t.handleCellActivate=function(e){return!0},t.handleCellDoubleClick=function(e){t.handleEdit()},t.hotkeys=[{combo:"f2",group:"Table",label:"Edit the currently focused cell",onKeyDown:t.handleEdit}],t}return tslib_1.__extends(t,e),t.prototype.componentDidMount=function(){this.checkShouldFocus()},t.prototype.componentDidUpdate=function(e){var t=!core_1.Utils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!core_1.Utils.deepCompareKeys(this.props,e,["style"]),l=this.props.value;t&&null!=l&&this.setState({savedValue:l,dirtyValue:l}),this.checkShouldFocus()},t.prototype.shouldComponentUpdate=function(e,t){return!core_1.Utils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!core_1.Utils.shallowCompareKeys(this.state,t)||!core_1.Utils.deepCompareKeys(this.props,e,["style"])},t.prototype.render=function(){return React.createElement(core_1.HotkeysTarget2,{hotkeys:this.hotkeys},this.renderCell)},t.prototype.checkShouldFocus=function(){this.props.isFocused&&!this.state.isEditing&&this.cellRef.focus()},t.prototype.invokeCallback=function(e,t){var l=this.props,a=l.rowIndex,n=l.columnIndex;null==e||e(t,a,n)},t.displayName=core_1.DISPLAYNAME_PREFIX+".EditableCell2",t.defaultProps={truncated:!0,wrapText:!1},t}(React.Component);exports.EditableCell2=EditableCell2;