import classNames from"classnames";import*as React from"react";import{AbstractComponent2,Utils as CoreUtils}from"@blueprintjs/core";import{emptyCellRenderer}from"./cell/cell";import{Batcher}from"./common/batcher";import*as Classes from"./common/classes";import{Rect}from"./common/rect";import{RenderMode}from"./common/renderMode";const SHALLOW_COMPARE_DENYLIST=["viewportRect"],BATCHER_RESET_PROP_KEYS_DENYLIST=["columnIndexEnd","columnIndexStart","rowIndexEnd","rowIndexStart"];export class TableBodyCells extends AbstractComponent2{constructor(){super(...arguments),this.batcher=new Batcher,this.renderNewCell=(e,t)=>{const{columnIndexEnd:s,grid:r,rowIndexEnd:l}=this.props,o=r.getExtremaClasses(e,t,l,s),n=r.isGhostIndex(e,t);return this.renderCell(e,t,o,n)},this.renderCell=(e,t,s,r)=>{const{cellRenderer:l,focusedCell:o,loading:n,grid:d}=this.props;let a=r?emptyCellRenderer():l(e,t);a=null==a?emptyCellRenderer():a;const c=classNames(cellClassNames(e,t),s,{[Classes.TABLE_CELL_GHOST]:r,[Classes.TABLE_CELL_LEDGER_ODD]:e%2==1,[Classes.TABLE_CELL_LEDGER_EVEN]:e%2==0},a.props.className),i=TableBodyCells.cellReactKey(e,t),p=r?d.getGhostCellRect(e,t):d.getCellRect(e,t),m=null!=a.props.loading?a.props.loading:n,h={...a.props.style,...Rect.style(p)},C=null!=o&&o.row===e&&o.col===t;return React.cloneElement(a,{className:c,isFocused:C,key:i,loading:m,style:h})},this.didViewportRectChange=(e,t)=>!(null==e&&null==t||null!=e&&null!=t&&e.equals(t))}static cellReactKey(e,t){return`cell-${e}-${t}`}componentDidMount(){this.maybeInvokeOnCompleteRender()}shouldComponentUpdate(e){return!CoreUtils.shallowCompareKeys(e,this.props,{exclude:SHALLOW_COMPARE_DENYLIST})||this.didViewportRectChange(e.viewportRect,this.props.viewportRect)}componentDidUpdate(e){!CoreUtils.shallowCompareKeys(e,this.props,{exclude:BATCHER_RESET_PROP_KEYS_DENYLIST})&&this.batcher.reset(),this.maybeInvokeOnCompleteRender()}componentWillUnmount(){this.batcher.cancelOutstandingCallback()}render(){const{renderMode:e}=this.props,t=e===RenderMode.BATCH?this.renderBatchedCells():this.renderAllCells();return React.createElement("div",{className:Classes.TABLE_BODY_CELLS},t)}renderBatchedCells(){const{columnIndexEnd:e,columnIndexStart:t,rowIndexEnd:s,rowIndexStart:r}=this.props;this.batcher.startNewBatch();for(let l=r;l<=s;l++)for(let s=t;s<=e;s++)this.batcher.addArgsToBatch(l,s);return this.batcher.removeOldAddNew(this.renderNewCell),this.batcher.isDone()||this.batcher.idleCallback((()=>this.forceUpdate())),this.batcher.getList()}renderAllCells(){const{columnIndexEnd:e,columnIndexStart:t,rowIndexEnd:s,rowIndexStart:r}=this.props,l=[],o=[];for(let n=r;n<=s;n++)for(let s=t;s<=e;s++)l.push(this.renderNewCell(n,s)),o.push([n,s]);return this.batcher.setList(o,l),l}maybeInvokeOnCompleteRender(){const{onCompleteRender:e,renderMode:t}=this.props;(t===RenderMode.NONE||t===RenderMode.BATCH&&this.batcher.isDone())&&e?.()}}TableBodyCells.defaultProps={renderMode:RenderMode.BATCH};export function cellClassNames(e,t){return[Classes.rowCellIndexClass(e),Classes.columnCellIndexClass(t)]}