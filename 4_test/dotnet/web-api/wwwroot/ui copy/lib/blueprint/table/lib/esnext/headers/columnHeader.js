import classNames from"classnames";import*as React from"react";import*as Classes from"../common/classes";import{Utils}from"../common/index";import{Orientation}from"../interactions/resizeHandle";import{RegionCardinality,Regions}from"../regions";import{ColumnHeaderCell}from"./columnHeaderCell";import{Header}from"./header";export class ColumnHeader extends React.Component{constructor(){super(...arguments),this.wrapCells=e=>{const{columnIndexStart:s,grid:t}=this.props,i=t.getRect().width,l=this.props.grid.getCumulativeWidthBefore(s),o={transform:`translateX(${l||0}px)`,width:i-l},n=classNames(Classes.TABLE_THEAD,Classes.TABLE_COLUMN_HEADER_TR);return React.createElement("div",{style:{width:i}},React.createElement("div",{style:o,className:n,ref:this.props.measurableElementRef},e))},this.convertPointToColumn=(e,s)=>{const{locator:t}=this.props;return null!=t?t.convertPointToColumn(e,s):null},this.getCellExtremaClasses=(e,s)=>this.props.grid.getExtremaClasses(0,e,1,s),this.getColumnWidth=e=>this.props.grid.getColumnRect(e).width,this.getDragCoordinate=e=>e[0],this.getMouseCoordinate=e=>e.clientX,this.handleResizeEnd=(e,s)=>{this.props.onResizeGuide(null),this.props.onColumnWidthChanged(e,s)},this.handleResizeDoubleClick=e=>{const{minColumnWidth:s,maxColumnWidth:t}=this.props,i=this.props.locator.getWidestVisibleCellInColumn(e),l=Utils.clamp(i,s,t);this.props.onResizeGuide(null),this.props.onColumnWidthChanged(e,l)},this.handleSizeChanged=(e,s)=>{const t=this.props.grid.getColumnRect(e);this.props.onResizeGuide([t.left+s])},this.isCellSelected=e=>Regions.hasFullColumn(this.props.selectedRegions,e),this.isGhostIndex=e=>this.props.grid.isGhostIndex(-1,e),this.renderGhostCell=(e,s)=>{const{grid:t,loading:i}=this.props,l=t.getGhostCellRect(0,e),o={flexBasis:`${l.width}px`,width:`${l.width}px`};return React.createElement(ColumnHeaderCell,{className:classNames(s),index:e,key:Classes.columnIndexClass(e),loading:i,style:o})},this.toRegion=(e,s)=>Regions.column(e,s)}render(){const{cellRenderer:e,onColumnWidthChanged:s,minColumnWidth:t,maxColumnWidth:i,defaultColumnWidth:l,columnIndexStart:o,columnIndexEnd:n,...r}=this.props;return React.createElement(Header,Object.assign({convertPointToIndex:this.convertPointToColumn,fullRegionCardinality:RegionCardinality.FULL_COLUMNS,getCellExtremaClasses:this.getCellExtremaClasses,getCellIndexClass:Classes.columnCellIndexClass,getCellSize:this.getColumnWidth,getDragCoordinate:this.getDragCoordinate,getIndexClass:Classes.columnIndexClass,getMouseCoordinate:this.getMouseCoordinate,ghostCellRenderer:this.renderGhostCell,handleResizeDoubleClick:this.handleResizeDoubleClick,handleResizeEnd:this.handleResizeEnd,handleSizeChanged:this.handleSizeChanged,headerCellIsReorderablePropName:"enableColumnReordering",headerCellIsSelectedPropName:"isColumnSelected",headerCellRenderer:e,indexEnd:n,indexStart:o,isCellSelected:this.isCellSelected,isGhostIndex:this.isGhostIndex,maxSize:i,minSize:t,resizeOrientation:Orientation.VERTICAL,selectedRegions:[],toRegion:this.toRegion,wrapCells:this.wrapCells},r))}}ColumnHeader.defaultProps={isReorderable:!1,isResizable:!0,loading:!1};