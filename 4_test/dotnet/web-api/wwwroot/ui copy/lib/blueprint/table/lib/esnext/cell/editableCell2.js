import classNames from"classnames";import*as React from"react";import{DISPLAYNAME_PREFIX,EditableText,HotkeysTarget2,Utils as CoreUtils}from"@blueprintjs/core";import*as Classes from"../common/classes";import{Draggable}from"../interactions/draggable";import{Cell}from"./cell";export class EditableCell2 extends React.Component{constructor(){super(...arguments),this.refHandlers={cell:e=>{this.cellRef=e}},this.state={isEditing:!1,savedValue:this.props.value},this.renderCell=({handleKeyDown:e,handleKeyUp:t})=>{const{editableTextProps:s,onCancel:l,onChange:a,onConfirm:i,tabIndex:n=0,truncated:o,wrapText:r,...h}=this.props,{isEditing:d,dirtyValue:c,savedValue:p}=this.state,C=h.interactive||d;let u=null;if(d){const e=s?s.className:null;u=React.createElement(EditableText,Object.assign({},s,{isEditing:!0,className:classNames(Classes.TABLE_EDITABLE_TEXT,Classes.TABLE_EDITABLE_NAME,e),intent:h.intent,minWidth:null,onCancel:this.handleCancel,onChange:this.handleChange,onConfirm:this.handleConfirm,onEdit:this.handleEdit,placeholder:"",selectAllOnFocus:!1,value:c}))}else{const e=classNames(Classes.TABLE_EDITABLE_TEXT,{[Classes.TABLE_TRUNCATED_TEXT]:o,[Classes.TABLE_NO_WRAP_TEXT]:!r});u=React.createElement("div",{className:e},p)}return React.createElement(Cell,Object.assign({},h,{wrapText:r,truncated:!1,interactive:C,cellRef:this.refHandlers.cell,onKeyDown:e,onKeyPress:this.handleKeyPress,onKeyUp:t,tabIndex:n}),React.createElement(Draggable,{onActivate:this.handleCellActivate,onDoubleClick:this.handleCellDoubleClick,preventDefault:!1,stopPropagation:C},u))},this.handleKeyPress=()=>{!this.state.isEditing&&this.props.isFocused&&this.setState({isEditing:!0,dirtyValue:"",savedValue:this.state.savedValue})},this.handleEdit=()=>{this.setState({isEditing:!0,dirtyValue:this.state.savedValue})},this.handleCancel=e=>{this.setState({isEditing:!1,dirtyValue:void 0}),this.invokeCallback(this.props.onCancel,e)},this.handleChange=e=>{this.setState({dirtyValue:e}),this.invokeCallback(this.props.onChange,e)},this.handleConfirm=e=>{this.setState({isEditing:!1,savedValue:e,dirtyValue:void 0}),this.invokeCallback(this.props.onConfirm,e)},this.handleCellActivate=e=>!0,this.handleCellDoubleClick=e=>{this.handleEdit()},this.hotkeys=[{combo:"f2",group:"Table",label:"Edit the currently focused cell",onKeyDown:this.handleEdit}]}componentDidMount(){this.checkShouldFocus()}componentDidUpdate(e){const t=!CoreUtils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!CoreUtils.deepCompareKeys(this.props,e,["style"]),{value:s}=this.props;t&&null!=s&&this.setState({savedValue:s,dirtyValue:s}),this.checkShouldFocus()}shouldComponentUpdate(e,t){return!CoreUtils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!CoreUtils.shallowCompareKeys(this.state,t)||!CoreUtils.deepCompareKeys(this.props,e,["style"])}render(){return React.createElement(HotkeysTarget2,{hotkeys:this.hotkeys},this.renderCell)}checkShouldFocus(){this.props.isFocused&&!this.state.isEditing&&this.cellRef.focus()}invokeCallback(e,t){const{rowIndex:s,columnIndex:l}=this.props;e?.(t,s,l)}}EditableCell2.displayName=`${DISPLAYNAME_PREFIX}.EditableCell2`,EditableCell2.defaultProps={truncated:!0,wrapText:!1};