"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.EditableCell=void 0;var tslib_1=require("tslib"),classnames_1=tslib_1.__importDefault(require("classnames")),React=tslib_1.__importStar(require("react")),core_1=require("@blueprintjs/core"),Classes=tslib_1.__importStar(require("../common/classes")),draggable_1=require("../interactions/draggable"),cell_1=require("./cell"),EditableCell=function(e){function t(t,l){var a=e.call(this,t,l)||this;return a.refHandlers={cell:function(e){a.cellRef=e}},a.handleKeyPress=function(){!a.state.isEditing&&a.props.isFocused&&a.setState({isEditing:!0,dirtyValue:"",savedValue:a.state.savedValue})},a.handleEdit=function(){a.setState({isEditing:!0,dirtyValue:a.state.savedValue})},a.handleCancel=function(e){a.setState({isEditing:!1,dirtyValue:void 0}),a.invokeCallback(a.props.onCancel,e)},a.handleChange=function(e){a.setState({dirtyValue:e}),a.invokeCallback(a.props.onChange,e)},a.handleConfirm=function(e){a.setState({isEditing:!1,savedValue:e,dirtyValue:void 0}),a.invokeCallback(a.props.onConfirm,e)},a.handleCellActivate=function(e){return!0},a.handleCellDoubleClick=function(e){a.handleEdit()},a.state={isEditing:!1,savedValue:t.value},a}return tslib_1.__extends(t,e),t.prototype.componentDidMount=function(){this.checkShouldFocus()},t.prototype.componentDidUpdate=function(e){var t=!core_1.Utils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!core_1.Utils.deepCompareKeys(this.props,e,["style"]),l=this.props.value;t&&null!=l&&this.setState({savedValue:l,dirtyValue:l}),this.checkShouldFocus()},t.prototype.shouldComponentUpdate=function(e,t){return!core_1.Utils.shallowCompareKeys(this.props,e,{exclude:["style"]})||!core_1.Utils.shallowCompareKeys(this.state,t)||!core_1.Utils.deepCompareKeys(this.props,e,["style"])},t.prototype.render=function(){var e,t=this.props,l=(t.onCancel,t.onChange,t.onConfirm,t.truncated),a=t.wrapText,s=t.editableTextProps,n=tslib_1.__rest(t,["onCancel","onChange","onConfirm","truncated","wrapText","editableTextProps"]),i=this.state,o=i.isEditing,r=i.dirtyValue,c=i.savedValue,d=n.interactive||o,u=null;if(o){var p=s?s.className:null;u=React.createElement(core_1.EditableText,tslib_1.__assign({},s,{isEditing:!0,className:classnames_1.default(Classes.TABLE_EDITABLE_TEXT,Classes.TABLE_EDITABLE_NAME,p),intent:n.intent,minWidth:null,onCancel:this.handleCancel,onChange:this.handleChange,onConfirm:this.handleConfirm,onEdit:this.handleEdit,placeholder:"",selectAllOnFocus:!1,value:r}))}else{var h=classnames_1.default(Classes.TABLE_EDITABLE_TEXT,((e={})[Classes.TABLE_TRUNCATED_TEXT]=l,e[Classes.TABLE_NO_WRAP_TEXT]=!a,e));u=React.createElement("div",{className:h},c)}return React.createElement(cell_1.Cell,tslib_1.__assign({},n,{wrapText:a,truncated:!1,interactive:d,cellRef:this.refHandlers.cell,onKeyPress:this.handleKeyPress}),React.createElement(draggable_1.Draggable,{onActivate:this.handleCellActivate,onDoubleClick:this.handleCellDoubleClick,preventDefault:!1,stopPropagation:d},u))},t.prototype.renderHotkeys=function(){var e=this.props.tabIndex;return React.createElement(core_1.Hotkeys,{tabIndex:e},React.createElement(core_1.Hotkey,{key:"edit-cell",label:"Edit the currently focused cell",group:"Table",combo:"f2",onKeyDown:this.handleEdit}))},t.prototype.checkShouldFocus=function(){this.props.isFocused&&!this.state.isEditing&&this.cellRef.focus()},t.prototype.invokeCallback=function(e,t){var l=this.props,a=l.rowIndex,s=l.columnIndex;null==e||e(t,a,s)},t.displayName=core_1.DISPLAYNAME_PREFIX+".EditableCell",t.defaultProps={truncated:!0,wrapText:!1},tslib_1.__decorate([core_1.HotkeysTarget],t)}(React.Component);exports.EditableCell=EditableCell;