import*as React from"react";import{Utils as CoreUtils}from"@blueprintjs/core";import*as FocusedCellUtils from"../common/internal/focusedCellUtils";import*as PlatformUtils from"../common/internal/platformUtils";import{Utils}from"../common/utils";import{Regions}from"../regions";import{DragEvents}from"./dragEvents";import{Draggable}from"./draggable";export class DragSelectable extends React.PureComponent{constructor(){super(...arguments),this.didExpandSelectionOnActivate=!1,this.handleActivate=e=>{const{locateClick:t,selectedRegions:i,selectedRegionTransform:n}=this.props;if(this.shouldIgnoreMouseDown(e))return!1;let o=t(e);if(!Regions.isValid(o))return!1;null!=n&&(o=n(o,e));const s=Regions.findMatchingRegion(i,o),l=-1!==s;return l&&DragEvents.isAdditive(e)?(this.handleClearSelectionAtIndex(s),!1):(l?this.handleClearAllSelectionsNotAtIndex(s):this.shouldExpandSelection(e)?this.handleExpandSelection(o):this.shouldAddDisjointSelection(e)?this.handleAddDisjointSelection(o):this.handleReplaceSelection(o),!0)},this.handleDragMove=(e,t)=>{const{enableMultipleSelection:i,focusedCell:n,locateClick:o,locateDrag:s,selectedRegions:l,selectedRegionTransform:a}=this.props;let c=i?s(e,t,this.didExpandSelectionOnActivate):o(e);if(!Regions.isValid(c))return;null!=a&&(c=a(c,e,t));const r=this.didExpandSelectionOnActivate?this.expandSelectedRegions(l,c,n):Regions.update(l,c);if(this.maybeInvokeSelectionCallback(r),!i){const e=r.length-1,t=r[e];this.invokeOnFocusCallbackForRegion(t,e)}},this.handleDragEnd=()=>{this.finishInteraction()},this.handleClick=()=>{this.finishInteraction()},this.shouldExpandSelection=e=>{const{enableMultipleSelection:t}=this.props;return t&&e.shiftKey},this.shouldAddDisjointSelection=e=>{const{enableMultipleSelection:t}=this.props;return t&&DragEvents.isAdditive(e)},this.handleClearSelectionAtIndex=e=>{const{selectedRegions:t}=this.props,i=t.slice();if(i.splice(e,1),this.maybeInvokeSelectionCallback(i),i.length>0){const e=i.length-1;this.invokeOnFocusCallbackForRegion(i[e],e)}},this.handleClearAllSelectionsNotAtIndex=e=>{const{selectedRegions:t}=this.props,i=t[e];this.maybeInvokeSelectionCallback([i]),this.invokeOnFocusCallbackForRegion(i,0)},this.handleExpandSelection=e=>{const{focusedCell:t,selectedRegions:i}=this.props;this.didExpandSelectionOnActivate=!0;const n=this.expandSelectedRegions(i,e,t);this.maybeInvokeSelectionCallback(n),null!=i&&0!==i.length||this.invokeOnFocusCallbackForRegion(e)},this.handleAddDisjointSelection=e=>{const{selectedRegions:t}=this.props,i=Regions.add(t,e);this.maybeInvokeSelectionCallback(i),this.invokeOnFocusCallbackForRegion(e,i.length-1)},this.handleReplaceSelection=e=>{const t=[e];this.maybeInvokeSelectionCallback(t),this.invokeOnFocusCallbackForRegion(e)},this.invokeOnFocusCallbackForRegion=(e,t=0)=>{const{onFocusedCell:i}=this.props,n=Regions.getFocusCellCoordinatesFromRegion(e);i(FocusedCellUtils.toFullCoordinates(n,t))},this.finishInteraction=()=>{this.props.onSelectionEnd?.(this.props.selectedRegions),this.didExpandSelectionOnActivate=!1,this.lastEmittedSelectedRegions=null}}render(){const e=this.getDraggableProps();return React.createElement(Draggable,Object.assign({},e,{preventDefault:!1}),this.props.children)}getDraggableProps(){return null==this.props.onSelection?{}:{onActivate:this.handleActivate,onClick:this.handleClick,onDragEnd:this.handleDragEnd,onDragMove:this.handleDragMove}}shouldIgnoreMouseDown(e){const{disabled:t,ignoredSelectors:i=[]}=this.props,n=e.target,o=Utils.isLeftClick(e),s=o&&e.ctrlKey&&PlatformUtils.isMac(),l="function"==typeof t?t(e):t;return!o||s||l||i.some((e=>null!=n.closest(e)))}maybeInvokeSelectionCallback(e){const{onSelection:t}=this.props;null!=this.lastEmittedSelectedRegions&&CoreUtils.deepCompareKeys(this.lastEmittedSelectedRegions,e)||(t(e),this.lastEmittedSelectedRegions=e)}expandSelectedRegions(e,t,i){if(0===e.length)return[t];if(null!=i){const n=FocusedCellUtils.expandFocusedRegion(i,t);return Regions.update(e,n)}{const i=Regions.expandRegion(e[e.length-1],t);return Regions.update(e,i)}}}DragSelectable.defaultProps={disabled:!1,enableMultipleSelection:!1,selectedRegions:[]};