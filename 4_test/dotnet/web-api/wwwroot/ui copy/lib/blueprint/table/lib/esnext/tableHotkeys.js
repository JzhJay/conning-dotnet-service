import*as React from"react";import{Clipboard}from"./common/clipboard";import{Direction}from"./common/direction";import*as FocusedCellUtils from"./common/internal/focusedCellUtils";import*as SelectionUtils from"./common/internal/selectionUtils";import{RegionCardinality,Regions}from"./regions";export class TableHotkeys{constructor(e,t,o,s){this.props=e,this.state=t,this.grid=o,this.tableHandlers=s,this.selectAll=e=>{if(this.tableHandlers.getEnabledSelectionHandler(RegionCardinality.FULL_TABLE)([Regions.table()]),e){const e=Regions.getFocusCellCoordinatesFromRegion(Regions.table());this.tableHandlers.handleFocus(FocusedCellUtils.toFullCoordinates(e))}},this.handleSelectAllHotkey=e=>{e.preventDefault(),e.stopPropagation(),this.selectAll(!1)},this.handleSelectionResizeUp=e=>this.handleSelectionResize(e,Direction.UP),this.handleSelectionResizeDown=e=>this.handleSelectionResize(e,Direction.DOWN),this.handleSelectionResizeLeft=e=>this.handleSelectionResize(e,Direction.LEFT),this.handleSelectionResizeRight=e=>this.handleSelectionResize(e,Direction.RIGHT),this.handleSelectionResize=(e,t)=>{e.preventDefault(),e.stopPropagation();const{focusedCell:o,selectedRegions:s}=this.state;if(0===s.length)return;const l=FocusedCellUtils.getFocusedOrLastSelectedIndex(s,o),i=s[l],n=SelectionUtils.resizeRegion(i,t,o);this.updateSelectedRegionAtIndex(n,l)},this.handleFocusMoveLeft=e=>this.handleFocusMove(e,"left"),this.handleFocusMoveLeftInternal=e=>this.handleFocusMoveInternal(e,"left"),this.handleFocusMoveRight=e=>this.handleFocusMove(e,"right"),this.handleFocusMoveRightInternal=e=>this.handleFocusMoveInternal(e,"right"),this.handleFocusMoveUp=e=>this.handleFocusMove(e,"up"),this.handleFocusMoveUpInternal=e=>this.handleFocusMoveInternal(e,"up"),this.handleFocusMoveDown=e=>this.handleFocusMove(e,"down"),this.handleFocusMoveDownInternal=e=>this.handleFocusMoveInternal(e,"down"),this.handleFocusMove=(e,t)=>{e.preventDefault(),e.stopPropagation();const{focusedCell:o}=this.state;if(null==o)return;const s={col:o.col,focusSelectionIndex:0,row:o.row};switch(t){case"up":s.row-=1;break;case"down":s.row+=1;break;case"left":s.col-=1;break;case"right":s.col+=1}if(s.row<0||s.row>=this.grid.numRows||s.col<0||s.col>=this.grid.numCols)return;const l=[Regions.cell(s.row,s.col)],{selectedRegionTransform:i}=this.props,n=null!=i?l.map((t=>i(t,e))):l;this.tableHandlers.handleSelection(n),this.tableHandlers.handleFocus(s),this.scrollBodyToFocusedCell(s)},this.handleFocusMoveInternal=(e,t)=>{e.preventDefault(),e.stopPropagation();const{focusedCell:o,selectedRegions:s}=this.state;if(null==o)return;let l={col:o.col,focusSelectionIndex:o.focusSelectionIndex,row:o.row};if(null==o.focusSelectionIndex&&s.length>0){const e=Regions.getCellRegionFromRegion(s[0],this.grid.numRows,this.grid.numCols);l={col:e.cols[0],focusSelectionIndex:0,row:e.rows[0]}}else{if(0===s.length)return void this.handleFocusMove(e,t);const i=Regions.getCellRegionFromRegion(s[o.focusSelectionIndex],this.grid.numRows,this.grid.numCols);if(i.cols[0]===i.cols[1]&&i.rows[0]===i.rows[1]&&1===s.length)return void this.handleFocusMove(e,t);switch(t){case"up":l=this.moveFocusCell("row","col",!0,l,i);break;case"left":l=this.moveFocusCell("col","row",!0,l,i);break;case"down":l=this.moveFocusCell("row","col",!1,l,i);break;case"right":l=this.moveFocusCell("col","row",!1,l,i)}}l.row<0||l.row>=this.grid.numRows||l.col<0||l.col>=this.grid.numCols||(this.tableHandlers.handleFocus(l),this.scrollBodyToFocusedCell(l))},this.scrollBodyToFocusedCell=e=>{const{row:t,col:o}=e,{viewportRect:s}=this.state,l=s.top,i=s.left+s.width,n=s.top+s.height,c=s.left,r=this.grid.getCumulativeHeightBefore(t),a=this.grid.getCumulativeWidthAt(o),h=this.grid.getCumulativeHeightAt(t),d=this.grid.getCumulativeWidthBefore(o),u=h-r,g=a-d>s.width,p=u>s.height,m={};if(r<l||p)m.nextScrollTop=Math.max(0,r-1);else if(h>n){const e=h-n;m.nextScrollTop=l+e}if(d<c||g)m.nextScrollLeft=Math.max(0,d-1);else if(a>i){const e=a-i;m.nextScrollLeft=c+e}this.tableHandlers.syncViewportPosition(m)},this.handleCopy=e=>{const{getCellClipboardData:t,onCopy:o}=this.props,{selectedRegions:s}=this.state;if(null==t)return;e.preventDefault(),e.stopPropagation();const l=Regions.enumerateUniqueCells(s,this.grid.numRows,this.grid.numCols),i=Regions.sparseMapCells(l,t);null!=i&&o?.(Clipboard.copyCells(i))}}setGrid(e){this.grid=e}setProps(e){this.props=e}setState(e){this.state=e}updateSelectedRegionAtIndex(e,t){const{children:o,numRows:s}=this.props,{selectedRegions:l}=this.state,i=React.Children.count(o),n=Math.max(0,s-1),c=Math.max(0,i-1),r=Regions.clampRegion(e,n,c),a=Regions.update(l,r,t);this.tableHandlers.handleSelection(a)}moveFocusCell(e,t,o,s,l){const{selectedRegions:i}=this.state,n="row"===e?"rows":"cols",c="row"===t?"rows":"cols",r=o?-1:1,a=o?1:0;if(s[e]+=r,(o?s[e]<l[n][0]:s[e]>l[n][1])&&(s[e]=l[n][a],s[t]+=r,o?s[t]<l[c][0]:s[t]>l[c][1])){let e=s.focusSelectionIndex+r;(o?e<0:e>=i.length)&&(e=o?i.length-1:0);const t=Regions.getCellRegionFromRegion(i[e],this.grid.numRows,this.grid.numCols);s={col:t.cols[a],focusSelectionIndex:e,row:t.rows[a]}}return s}}