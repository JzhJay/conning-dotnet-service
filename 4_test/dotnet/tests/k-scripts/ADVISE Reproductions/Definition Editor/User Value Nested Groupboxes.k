/.w.raise_console[0]

paramByPath:(.,(`x
    .((`Path_Number

       .,(`X;`UserValues_Arguments_Source_PathNumber.html;))
      (`Fixed
       .((`Period
          ,`"2011 +"
          .,(`T;;))
         (`Value
          ,0.0
          .,(`T;;)))
       .((`j
          .((`l;`"User Time Series";)
            (`c;`table;)
            (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
            (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
            (`p
             .((`Value;0.0;)
               (`Period;`;))
             )
            (`f;18.6;)
            (`e
             .,(`Period;0;)
             )
            (`bg
             .,(`Period;`e;)
             )
            (`b
             .,(`Period;`n;)
             )
            (`fixed;1;)
            (`popup
             .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
               (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
               (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
               (`Append_Years
                .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                  (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                  (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                  (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                )
               (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
               (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
               (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
               (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
             .()))
          )
         (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
         (`C;`Future;)
         (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
         (`X;`UserValues_Arguments_Source_UserTimeSeries.html;)))
      (`by_Path
       .((`Mechanics
          .((`Type;`Rate;.())
            (`Repeats;`Last;.()))
          .,(`j
             .((`c;`Slot;)
               (`cell
                .((`Type
                   .((`c;`combo;)
                     (`o
                      `Stock `Flow `Rate
                      ))
                   )
                  (`Repeats
                   .((`c;`combo;)
                     (`o
                      `Last `All `None
                      )
                     (`ol
                      (`Last `All `None
                       `"Repeat Last Path" `"Repeat All Paths" `"Unspecified Paths are Zero")
                      ))
                   ))
                )
               (`popup
                .((`Cut;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`cut;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy_All;{[f;junk]c:name.c v:f .j.v;of[c;`copy_all;(v;)]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`s99;" ";)
                  (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                .,(`j
                   .,(`ne
                      ((,`Cut
                        ,`Copy
                        ,`Copy_All
                        ,`Paste
                        ,`s99
                        ,`Copy_Location)
                       0 0 1 0 0 0)
                      )
                   ))
               (`krd;{
 c:cl v:.j.v;p:!att[v;`popup]
 if[(~1~the[c;`alwaysSel])&empty s:att[v;`s]
  k:(+,p;-1_@[&q,(1+#p)-q:p?`s99;p?`Append;:;1])
  if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
  .[`;jd[v],`popup.`j`ne;:;]
  :_n]
 k:++(+,p;:[(~name.rank v)|#s   ;:[#b:&(o:`Paste`Paste_Transpose)_lin p
                                   @[&0,#p;p?/:o b;:;|/((),the[cl v;`cbformats])_lin .w.cbformats[]]
                                   &0,#p]
                                 0])
 if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
 if[`Append _in,/*k;k[1;(,/*k)?`Append]:1]
 k:.[k;(1;((,/*k)?`s99)_!#*k);:;1]
 .[`;jd[v],`popup.`j`ne;:;k]
};)
               (`s
                ,`Type
                .()))
             ))
         (`Data
          .((`m
             `Internal
             .((`C;`model;)
               (`j
                .((`o
                   `Internal `External
                   )
                  (`l;`"Data Source";)
                  (`ol
                   (`Internal `External
                    `"Internal Data" `"Batch Import File")
                   )
                  (`fill;`h;)
                  (`c;`combo;)
                  (`popup
                   .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                   .()))
                )
               (`M;();)
               (`P;;)))
            (`Internal
             .((`Path;!0;.())
               (`Date
                !0
                .,(`V;{[p;x]:[#a:&(x~\:0I)|~1=4::'x;(1;"Not a valid date";,a)]};))
               (`Value;0#0.0;.()))
             .((`V;{[p;x]:[#a:,/a@&0<#:'a:1_'=+x`Path`Date;(0;"Duplicate path/date pairs are ignored";,(`Path`Date;a))]};)
               (`j
                .((`c;`Table;)
                  (`f
                   .((`Value;9.6;)
                     (`Path;{9$_ x};)
                     (`Date;{ / .r.date.f
 if[(~1=4:x)|(x<0)|x~0I; :"Invalid date"]
 d:0 100 100 _vs x                                / separate date into components
 s:date.format_string[]                           / separate format string into components
 i:&s _lin !date.fparts                           / which format components represent parts of the date
 s[i]:{date.fparts[y]x}[d]'s i                    / replace format components with date components
 ,/$s};))
                   )
                  (`g
                   .((`Value;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`Path;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`Date;{:[*r:.[date.g_;,x;:];0I;r 1]};))
                   )
                  (`u
                   .((`Value;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`Path;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`Date;{:[~y=0I;		("";y);	(("Input should be of the form &0";.r.sshortdateexample[]);x)]};))
                   )
                  (`p
                   .((`Path;0;)
                     (`Date;20121231;)
                     (`Value;0.0;))
                   )
                  (`popup
                   .((`Insert;{if[#s:of[c:name.c v;`Rows;,v:ad -2_.j.v];of[c;`ins`row;(v;*s;#s)];fire_f[`Insert;`t;v;()]]};)
                     (`Append;{of[c;`app`row;(v;1|#of[c:name.c v;`Rows;,v:ad -2_.j.v])];fire_f[`Append;`t;v;()];};)
                     (`Delete;{if[#s:of[c:name.c v;`Rows;,v:ad -2_.j.v];of[c;`del`row;(v;s)];fire_f[`Delete;`t;v;()]]};)
                     (`s;" ";)
                     (`Cut;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`cut;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Copy_All;{[f;junk]c:name.c v:f .j.v;of[c;`copy_all;(v;)]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste_Transpose;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste_transpose;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`s99;" ";)
                     (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                   .,(`j
                      .,(`ne
                         ((,`Insert
                           ,`Append
                           ,`Delete
                           ,`s
                           ,`Cut
                           ,`Copy
                           ,`Copy_All
                           ,`Paste
                           ,`Paste_Transpose
                           ,`s99
                           ,`Copy_Location)
                          0 1 0 0 0 0 1 0 0 0 0)
                         )
                      ))
                  (`krd;{
 c:cl v:.j.v;p:!att[v;`popup]
 if[(~1~the[c;`alwaysSel])&empty s:att[v;`s]
  k:(+,p;-1_@[&q,(1+#p)-q:p?`s99;p?`Append;:;1])
  if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
  .[`;jd[v],`popup.`j`ne;:;]
  :_n]
 k:++(+,p;:[(~name.rank v)|#s   ;:[#b:&(o:`Paste`Paste_Transpose)_lin p
                                   @[&0,#p;p?/:o b;:;|/((),the[cl v;`cbformats])_lin .w.cbformats[]]
                                   &0,#p]
                                 0])
 if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
 if[`Append _in,/*k;k[1;(,/*k)?`Append]:1]
 k:.[k;(1;((,/*k)?`s99)_!#*k);:;1]
 .[`;jd[v],`popup.`j`ne;:;k]
};))
                )
               (`M
                ,`Internal
                )))
            (`External
             .((`File
                ""
                .((`j
                   .((`c;`string;)
                     (`l;`"Batch Import File Location";)
                     (`fill;`h;)
                     (`popup
                      .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                      ))
                   )
                  (`V;{[p;x]:[~.f.exists x; (1;"File does not exist")]};)))
               (`Browse
                {[x]
  vpath:(-1_ .j.v),`File
  spath:(`. `k`Main`split`right.`II),(-1_ 5_ .j.v),`File
  if[~(f:.f.getNetPath .j.Open`.k.CSV)_in (_n;"")
    .k.set_s[spath;f]
    .[`;vpath;:;f];
    .k.activate .k.add .k.ACTIVE
    ]
  }
                .((`j
                   .((`c;`button;)
                     (`async;2;)
                     (`wx;0.2;)
                     (`l;`"<html>Browse<br>for File</html>";)
                     (`fill;`h;)
                     (`hpos;`r;)
                     (`vpos;`c;)
                     (`anchor;`c;)
                     (`image;"Open_32.png";))
                   )
                  (`Y;`null;))))
             .((`j
                .((`c;`panel;)
                  (`a
                   ,`File `Browse
                   )
                  (`wy;1e-010;))
                )
               (`M
                ,`External
                ))))
          .,(`j
             .((`c;`panel;)
               (`a
                `m `Internal
                ))
             )))
       .((`j
          .((`c;`panel;)
            (`l;`"User Time Series by Path";))
          )
         (`V;{[p;x]if[`External~x`m; if[.f.exists f:x[`External;`File]; :.L.V.external_data[`Path`Date`Value;f] ]]};)
         (`X;`UserValues_Arguments_Source_UserTimeSeriesbyPath.html;)))
      (`Random_Draw
       .((`m
          `Normal
          .((`C;`model;)
            (`j
             .((`l;`Distribution;)
               (`fill;`h;)
               (`c;`combo;)
               (`o
                `Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                )
               (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
               (`ol
                (`Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                 `Beta `Binomial `Chi_Squared `"Discrete Distribution" `Gamma `"Linear Distribution Function" `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M;();)
            (`P;;)))
         (`Hash
          -1
          .((`M
             `Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
             )
            (`j
             .((`c;`scalar;)
               (`f;{:[0>4:x;_f'x;x<0;"Default";9$_ x]};)
               (`g;{:[~&/x _lin"0123456789,.";-1;.C[`G;`integer] x]};)
               (`u;{:[y~0n;		("Input should be numeric";x)
                   y~0N;		("Input should be integer-valued";x)
                   y>max:65536;		(("Input must be at most &0";$max);max)
					("";y)]};)
               (`fill;`h;)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )))
         (`Beta
          .((`alpha
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`beta
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`alpha;`"Shape Parameter (alpha)";)
                  (`beta;`"Shape Parameter (beta)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Beta
             )))
         (`Binomial
          .((`n
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`p
             `"0.5"
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`n;`"n parameter (number of trials)";)
                  (`p;`"p parameter (prob. of success)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Binomial
             )))
         (`Chi_Squared
          .,(`df
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .,(`df;`"Degrees of freedom";)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Chi_Squared
             )))
         (`Discrete_Distribution
          .((`probability
             ,1.0
             .())
            (`value
             ,0.0
             .()))
          .((`j
             .((`l;`"Discrete Distribution";)
               (`c;`Table;)
               (`cl
                .((`probability;`"Cumulative\nProbabilities";)
                  (`value;`"Sorted\nDiscrete\nValues";))
                )
               (`cltip
                .((`probability;`"Cumulative probabilities for discrete distribution";)
                  (`value;`"Discrete values must be sorted from smallest to largest";))
                )
               (`p
                .((`probability;0.0;)
                  (`value;0.0;))
                )
               (`f
                .((`probability;9.6;)
                  (`value;18.6;))
                )
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`P;1;)
            (`T;;)
            (`F
             .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`probability `value;0#`;0 0.0;();0;0];)
             )
            (`V;{[p;x]
  r:()
  if[{(~x~x@<x)|(0.>*x)|~1.=*|x}@x.probability
   r,:,(1;"Probabilities must be a sorted vector of cumulative probabilities ending with 1")]
  if[{(~x~x@<x)}@x.value
   r,:,(1;"Values must be sorted in acsending order")]
  :[0=#r;_n;r]};)
            (`M
             ,`Discrete_Distribution
             )))
         (`Gamma
          .((`a
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`b
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`a;`"Shape Parameter (a)";)
                  (`b;`"Rate Parameter (b)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Gamma
             )))
         (`Linear_Function
          .((`probability
             0 1.0
             .())
            (`value
             0 0.0
             .()))
          .((`j
             .((`l;`"Linear Distribution Function";)
               (`c;`Table;)
               (`cl
                .((`probability;`"Cumulative\nProbabilities";)
                  (`value;`"Sorted\nCutpoints";))
                )
               (`cltip
                .((`probability;`"Cumulative probabilities at cutpoints of piece-wise linear distribution (uniform distribution between cutpoints)";)
                  (`value;`"Values (at cutpoints) must be sorted from smallest to largest";))
                )
               (`p
                .((`probability;0.0;)
                  (`value;0.0;))
                )
               (`f
                .((`probability;9.6;)
                  (`value;18.6;))
                )
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`P;1;)
            (`T;;)
            (`F
             .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`probability `value;0#`;0 0.0;();0;0];)
             )
            (`V;{[p;x]
  r:()
  if[{(~x~x@<x)|(~0.=*x)|~1.=*|x}@x.probability
   r,:,(1;"Probabilities must be a sorted vector of cumulative probabilities starting with 0 and ending with 1")]
  if[{(~x~x@<x)}@x.value
   r,:,(1;"Values must be sorted in acsending order")]
  :[0=#r;_n;r]};)
            (`M
             ,`Linear_Function
             )))
         (`Loggamma
          .((`a
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`b
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`a;`"Shape Parameter (a) of underlying Gamma";)
                  (`b;`"Rate Parameter (b) of underlying Gamma";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Loggamma
             )))
         (`Lognormal
          .((`mean
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`stdev
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`mean;`Mean;)
                  (`stdev;`"Standard Deviation";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Lognormal
             )))
         (`Negative_Binomial
          .((`r
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`p
             `"0.5"
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`r;`"r parameter";)
                  (`p;`"p parameter (prob. of success)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Negative_Binomial
             )))
         (`Negative_Binomial_from_Moments
          .((`mean
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`stdev
             `"2."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`mean;`Mean;)
                  (`stdev;`"Standard Deviation";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Negative_Binomial_from_Moments
             )))
         (`Normal
          .((`mean
             `"0."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`stdev
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`mean;`Mean;)
                  (`stdev;`"Standard Deviation";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Normal
             )))
         (`Pareto
          .((`alpha
             `"2."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`min
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`alpha;`"Shape Parameter (alpha)";)
                  (`min;`"Location Parameter (minimum value)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Pareto
             )))
         (`Poisson
          .,(`lambda
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .,(`lambda;`Lambda;)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Poisson
             )))
         (`Resampling
          .,(`value
             ,0.0
             .())
          .((`j
             .((`l;`Resampling;)
               (`c;`Table;)
               (`cl
                .,(`value;`"Equally\nProbable\nValues";)
                )
               (`p
                .,(`value;0.0;)
                )
               (`f
                .,(`value;18.6;)
                )
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`P;1;)
            (`T;;)
            (`F
             .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[,`value;0#`;,0.0;();0;0];)
             )
            (`M
             ,`Resampling
             )))
         (`T_Distribution
          .,(`df
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .,(`df;`"Degrees of freedom";)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`T_Distribution
             )))
         (`Uniform
          .((`min
             `"0."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`max
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`min;`Minimum;)
                  (`max;`Maximum;))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Uniform
             )))
         (`Weibull
          .((`alpha
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`beta
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`alpha;`"Shape Parameter (alpha)";)
                  (`beta;`"Scale Parameter (beta)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Weibull
             ))))
       .((`j
          .((`c;`panel;)
            (`a
             `m `Hash `Normal
             ))
          )
         (`X;`UserValues_Arguments_Source_RandomDraw.html;)))
      (`External_Rate
       .((`m
          `Bond_Yield
          .((`C;`model;)
            (`j
             .((`l;`"Model Choice";)
               (`fill;`h;)
               (`c;`combo;)
               (`o
                `Bond_Yield `FX `Inflation
                )
               (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
               (`ol
                (`Bond_Yield `FX `Inflation
                 `"Factor of Bond Yields" `"Factor of Foreign Exchange Rate" `"Factor of Inflation")
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M;();)
            (`P;;)))
         (`Bond_Yield
          .((`Period
             ,`"2011 +"
             .,(`T;{[nn;x;y]x,nn}[`future_period];))
            (`mrkt
             ,`Treasury
             .())
            (`econ
             ,`US
             .,(`V;{[p;x]
  :[1=#e:?x a:&~x _lin `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
         (1;("Economy &0 is not in the list of economies to run for this simulation";$e);,,a)
    1<#e;(1;("Economies &0 are not in the list of economies to run for this simulation";,/" ",/:$:'e);,,a)]};))
            (`year
             ,`"10."
             .,(`V;{[p;x]r:();r,:(,/function_validation[!.k.get_s (6#p),`Arguments`Source;p]'x)_dv _n;:[#r;r;_n]};))
            (`lags
             ,0
             .,(`V;{[p;x]:[#a:&~(x>-1)&1=4::'x;(1;"Must be non-negative integers";,,a)]};))
            (`avgp
             ,1
             .,(`V;{[p;x]:[#a:&~(x>0)&1=4::'x;(1;"Must be positive integers";,,a)]};))
            (`mult
             ,1.0
             .())
            (`sprd
             ,0.0
             .()))
          .((`j
             .((`l;`"Factor of Bond Yields";)
               (`c;`table;)
               (`p
                .((`Period;`;)
                  (`mrkt;`Treasury;)
                  (`econ;`US;)
                  (`year;`"10.";)
                  (`lags;0;)
                  (`avgp;1;)
                  (`mult;1.0;)
                  (`sprd;0.0;)
                  (`round;`Nearest;))
                )
               (`f
                .((`lags;{9$_ x};)
                  (`avgp;{9$_ x};)
                  (`mult;9.6;)
                  (`sprd;9.6;))
                )
               (`e
                .,(`Period;0;)
                )
               (`bg
                .,(`Period;`e;)
                )
               (`b
                .,(`Period;`n;)
                )
               (`fixed;1;)
               (`popup
                .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                  (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                  (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                  (`Append_Years
                   .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                     (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                     (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                     (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                   )
                  (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                )
               (`cl
                .((`mrkt;`Rating;)
                  (`econ;`Economy;)
                  (`year;`"Maturity\n(in Years)";)
                  (`lags;`"Lag\n(in periods)";)
                  (`avgp;`"Number of\nPeriods to\nAverage";)
                  (`mult;`"Multiplicative\nFactor\non Yield";)
                  (`sprd;`"Additive Factor\nto Yield\n(Spread)";))
                )
               (`cltip
                .((`econ;`"<html>US:  United States&nbsp;<br>&nbsp;DE:  Germany&nbsp;<br>&nbsp;GB:  Great Britain&nbsp;<br>&nbsp;CH:  Switzerland&nbsp;<br>&nbsp;AU:  Australia&nbsp;<br>&nbsp;CA:  Canada&nbsp;<br>&nbsp;JP:  Japan&nbsp;<br>&nbsp;DK:  Denmark&nbsp;<br>&nbsp;NO:  Norway&nbsp;<br>&nbsp;SE:  Sweden&nbsp;<br>&nbsp;BR:  Brazil&nbsp;<br>&nbsp;PL:  Poland&nbsp;<br>&nbsp;KR:  South Korea&nbsp;<br>&nbsp;TW:  Taiwan&nbsp;<br>&nbsp;HK:  Hong Kong&nbsp;<br>&nbsp;CN:  China&nbsp;<br>&nbsp;</html>";)
                  (`year;`"<html>Maturity expressed in years.&nbsp;<br>&nbsp;May be a function of other arguments&nbsp;<br>&nbsp;</html>";)
                  (`lags;`"<html>&nbsp;The lag in periods (e.g. 0 for no lag,&nbsp;<br>&nbsp;1 to use bond yield from one period ago, etc.)&nbsp;</html>";)
                  (`avgp;`"<html>&nbsp;Use values greater than 1 to smooth bond yields&nbsp;<br>&nbsp;by averaging a number of historical periods&nbsp;</html>";)
                  (`mult;`"<html>&nbsp;The bond yield (after lagging and smoothing)&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;</html>";)
                  (`sprd;`"<html>&nbsp;This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the bond yield (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;</html>";)
                  (`round;`"<html>Rounding method for Maturity&nbsp;<br>&nbsp;Up, Down, and Nearest move to the relative simulation-frerquency point on the yield curve.&nbsp;<br>&nbsp;Interpolate does a linear interpolation based on the two nearest points.&nbsp;<br>&nbsp;</html>";))
                )
               (`cell
                .((`mrkt
                   .((`c;`combo;)
                     (`o
                      `Treasury `Pfandbriefe `AAA `AA `A `BBB `High_Yield
                      ))
                   )
                  (`econ
                   .((`c;`combo;)
                     (`o
                      `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                      ))
                   )
                  (`round
                   .((`c;`combo;)
                     (`o
                      `Up `Down `Nearest `Interpolate
                      ))
                   ))
                )
               (`editor
                .((`mrkt;1;)
                  (`econ;1;)
                  (`round;1;))
                )
               (`g
                .((`lags;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`avgp;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`year;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};))
                )
               (`u
                .((`lags;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`avgp;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`year;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};))
                ))
             )
            (`T;;)
            (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
            (`C;`External_Rate_Bond_Yield;)
            (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
            (`X;`UserValues_Arguments_Source_ExternalRate_FactorofBondYields.html;)
            (`V;{[p;x] r:()
            hist_ylds:.k.get_s (0;`A;`System;`Historical_Yields)
            if[#a:&{[h;p;e;y]p>-2+#h[e;y;`Period]}[hist_ylds]'[(-1+x.lags+x.avgp)*12%.G`pdy;x.econ;x.mrkt]
              r,:,(0;("There is inadequate historical yield data for economy &0 and market &1.  The necessary additional history is assumed to be the earliest available data.";$x.econ a;$x.mrkt a))]
            :[#r;r;_n]};)
            (`M
             ,`Bond_Yield
             )))
         (`FX
          .((`Period
             ,`"2011 +"
             .,(`T;{[nn;x;y]x,nn}[`future_period];))
            (`econ
             ,`USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[1=#e:?x a:&~x _lin c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$e);,,a)
    1<#e;(1;("Currencies &0 are not in the list of currencies to run for this simulation";,/" ",/:$:'e);,,a)]};))
            (`curr
             ,`USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[1=#e:?x a:&~x _lin c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$e);,,a)
    1<#e;(1;("Currencies &0 are not in the list of currencies to run for this simulation";,/" ",/:$:'e);,,a)]};))
            (`lags
             ,0
             .,(`V;{[p;x]:[#a:&~(x>-1)&1=4::'x;(1;"Must be non-negative integers";,,a)]};))
            (`avgp
             ,1
             .,(`V;{[p;x]:[#a:&~(x>0)&1=4::'x;(1;"Must be positive integers";,,a)]};))
            (`mult
             ,1.0
             .())
            (`sprd
             ,0.0
             .()))
          .((`j
             .((`l;`"Factor of Foreign Exchange Rate";)
               (`c;`table;)
               (`p
                .((`Period;`;)
                  (`lags;0;)
                  (`avgp;1;)
                  (`mult;1.0;)
                  (`sprd;0.0;)
                  (`econ;`USD;)
                  (`curr;`USD;))
                )
               (`f
                .((`lags;{9$_ x};)
                  (`avgp;{9$_ x};)
                  (`mult;9.6;)
                  (`sprd;9.6;))
                )
               (`e
                .,(`Period;0;)
                )
               (`bg
                .,(`Period;`e;)
                )
               (`b
                .,(`Period;`n;)
                )
               (`fixed;1;)
               (`popup
                .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                  (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                  (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                  (`Append_Years
                   .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                     (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                     (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                     (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                   )
                  (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                )
               (`cl
                .((`econ;`"Numerator\nCurrency";)
                  (`curr;`"Denominator\nCurrency";)
                  (`lags;`"Lag\n(in periods)";)
                  (`avgp;`"Number of\nPeriods to\nAverage";)
                  (`mult;`"Multiplicative\nFactor\non Rate";)
                  (`sprd;`"Additive Factor\nto Rate\n(Spread)";))
                )
               (`cltip
                .((`econ;`"<html>Home currency whose rate is used as the basis&nbsp;<br>&nbsp;for the external rate calculation&nbsp;<br>&nbsp;USD:  US Dollar&nbsp;<br>&nbsp;EUR:  Euro&nbsp;<br>&nbsp;GBP:  British Pound&nbsp;<br>&nbsp;CHF:  Swiss Franc&nbsp;<br>&nbsp;AUD:  Australian Dollar&nbsp;<br>&nbsp;CAD:  Canadian Dollar&nbsp;<br>&nbsp;JPY:  Japanese Yen&nbsp;<br>&nbsp;DKK:  Danish Krone&nbsp;<br>&nbsp;NOK:  Norwaegian Krone&nbsp;<br>&nbsp;SEK:  Swedish Krona&nbsp;<br>&nbsp;BRL:  Brazilian Real&nbsp;<br>&nbsp;PLN:  Polish Zloty&nbsp;<br>&nbsp;KRW:  South Korean Won&nbsp;<br>&nbsp;TWD:  Taiwan Dollar&nbsp;<br>&nbsp;HKD:  Hong Kong Dollar&nbsp;<br>&nbsp;CNY:  Chinese Yuan&nbsp;<br>&nbsp;</html>";)
                  (`curr;`"<html>Foreign currency whose exchange rate is used as the starting point&nbsp;<br>&nbsp;for the external rate calculation&nbsp;<br>&nbsp;USD:  US Dollar&nbsp;<br>&nbsp;EUR:  Euro&nbsp;<br>&nbsp;GBP:  British Pound&nbsp;<br>&nbsp;CHF:  Swiss Franc&nbsp;<br>&nbsp;AUD:  Australian Dollar&nbsp;<br>&nbsp;CAD:  Canadian Dollar&nbsp;<br>&nbsp;JPY:  Japanese Yen&nbsp;<br>&nbsp;DKK:  Danish Krone&nbsp;<br>&nbsp;NOK:  Norwaegian Krone&nbsp;<br>&nbsp;SEK:  Swedish Krona&nbsp;<br>&nbsp;BRL:  Brazilian Real&nbsp;<br>&nbsp;PLN:  Polish Zloty&nbsp;<br>&nbsp;KRW:  South Korean Won&nbsp;<br>&nbsp;TWD:  Taiwan Dollar&nbsp;<br>&nbsp;HKD:  Hong Kong Dollar&nbsp;<br>&nbsp;CNY:  Chinese Yuan&nbsp;<br>&nbsp;</html>";)
                  (`lags;`"<html>The lag in periods (e.g. 0 for no lag,&nbsp;<br>&nbsp;1 to use rate from one period ago, etc.)&nbsp;<br>&nbsp;</html>";)
                  (`avgp;`"<html>Use values greater than 1 to smooth rates&nbsp;<br>&nbsp;by averaging a number of historical periods&nbsp;<br>&nbsp;</html>";)
                  (`mult;`"<html>The rate (after lagging and smoothing)&nbsp&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;<br>&nbsp;</html>";)
                  (`sprd;`"<html>This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the rate (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;<br>&nbsp;</html>";))
                )
               (`cell
                .((`econ
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   )
                  (`curr
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   ))
                )
               (`editor
                .((`econ;1;)
                  (`curr;1;))
                )
               (`g
                .((`lags;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`avgp;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};))
                )
               (`u
                .((`lags;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`avgp;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                ))
             )
            (`T;;)
            (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
            (`C;`External_Rate_FX;)
            (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
            (`X;`UserValues_Arguments_Source_ExternalRate_FactorofForeignExchangeRate.html;)
            (`M
             ,`FX
             )))
         (`Inflation
          .((`Period
             ,`"2011 +"
             .,(`T;{[nn;x;y]x,nn}[`future_period];))
            (`econ
             ,`US
             .,(`V;{[p;x]
  :[1=#e:?x a:&~x _lin `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
         (1;("Economy &0 is not in the list of economies to run for this simulation";$e);,,a)
    1<#e;(1;("Economies &0 are not in the list of economies to run for this simulation";,/" ",/:$:'e);,,a)]};))
            (`mult
             ,1.0
             .())
            (`sprd
             ,0.0
             .()))
          .((`j
             .((`l;`"Factor of Inflation";)
               (`c;`table;)
               (`p
                .((`Period;`;)
                  (`mult;1.0;)
                  (`sprd;0.0;)
                  (`econ;`US;))
                )
               (`f
                .((`mult;9.6;)
                  (`sprd;9.6;))
                )
               (`e
                .,(`Period;0;)
                )
               (`bg
                .,(`Period;`e;)
                )
               (`b
                .,(`Period;`n;)
                )
               (`fixed;1;)
               (`popup
                .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                  (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                  (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                  (`Append_Years
                   .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                     (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                     (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                     (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                   )
                  (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                )
               (`cl
                .((`econ;`Economy;)
                  (`mult;`"Multiplicative\nFactor\non Rate";)
                  (`sprd;`"Additive Factor\nto Rate\n(Spread)";))
                )
               (`cltip
                .((`econ;`"<html>&nbsp;Home economy whose inflation is used as the basis&nbsp;<br>&nbsp;for the external rate calculation&nbsp;</html>";)
                  (`mult;`"<html>&nbsp;The rate (after lagging and averaging)&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;</html>";)
                  (`sprd;`"<html>&nbsp;This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the rate (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;</html>";))
                )
               (`cell
                .,(`econ
                   .((`c;`combo;)
                     (`o
                      `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                      ))
                   )
                )
               (`editor
                .,(`econ;1;)
                )
               (`g
                .((`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};))
                )
               (`u
                .((`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                ))
             )
            (`T;;)
            (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
            (`C;`External_Rate_Inflation;)
            (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
            (`X;`UserValues_Arguments_Source_ExternalRate_FactorofInflation.html;)
            (`M
             ,`Inflation
             ))))
       .((`j
          .((`c;`panel;)
            (`a
             `m `Bond_Yield
             ))
          )
         (`X;`UserValues_Arguments_Source_ExternalRate.html;)))
      (`Treasury_Curve
       .((`Economy
          `US
          .,(`V;{[p;x]
  :[~x _in `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
    (1;("Economy &0 is not in the list of economies to run for this simulation";$x))]};))
         (`Maturity
          1.0
          .,(`V;{[p;x]:[x<0;(1;"Must be a non-negative number")]};))
         (`Item;`Continuous_Nominal_Yield;.())
         (`Period;`Current;.()))
       .,(`j
          .((`c;`Slot;)
            (`l;`"Treasury Curve";)
            (`cell
             .((`Economy
                .((`c;`combo;)
                  (`o
                   `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Continuous_Nominal_Yield `Annual_Nominal_Yield `Continuous_Real_Yield `Annual_Real_Yield `Nominal_Price `Real_Price
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          ))
      (`Market_Index
       .((`Index
          `Market_Index_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Market_Index;0#`];))
         (`Item;`Dividend_Yield;.())
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`l;`"Market Index";)
            (`cell
             .((`Index
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Market_Index_ `Market_Index_1
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Dividend_Yield `"Price/Level" `Modeled_Level `Modeled_Dividend_Yield `Variance `Volatility
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`p
             .((`Index;`Market_Index_1;)
               (`Item;`Dividend_Yield;)
               (`Period;`Current;)
               (`Economy;`US;))
             )
            (`u
             .,(`Index;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`V;{[p;x]
            r:()
            t:.k.get_s@0,`A`User`Investments`Existing_and_New_Issues`Market_Indices`Definitions,x.Index,`m
            if[`Unspecified_=x.Index
              r,:,(1;"A valid input must be specified:";,,`Index)
              t:`
              ] / if #bad:&`Unspecified_=x.Index
            if[(~t=`Modeled_Market_Index)&x.Item _lin`Modeled_Level`Modeled_Dividend_Yield
              r,:,(1;"\"Modeled Level\" and \"Modeled Dividend Yield\" are available only in Modeled Market Indices";,`Item`Index)
              ] / if #bad:&(~t=`Modeled_Market_Index)&x.Item _lin`Modeled_Level`Modeled_Dividend_Yield
            if[(~t=`Copy_of_Common_Stock_Index)&x.Item _lin`Variance`Volatility
              r,:,(1;"\"Variance\" and\"Volatility\" are available only in Copies of Common Stock Indices";,`Item`Index)
              ] / if #bad:&(~t=`Copy_of_Common_Stock_Index)&x.Item _lin`Variance`Volatility
            :[#r;r;_n]};)
         (`J
          .,(`Market_Index
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Index;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Index];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Index];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Index;,0#`];)
               (`F
                ,`Index
                ))
             )
          )
         (`U
          ,`Market_Index
          )))
      (`Common_Stock_Index
       .((`Economy
          `US
          .,(`V;{[p;x]
  :[~x _in `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
    (1;("Economy &0 is not in the list of economies to run for this simulation";$x))]};))
         (`Index;`Large_Cap;.())
         (`Item;`Price;.())
         (`Period;`Current;.()))
       .,(`j
          .((`c;`Slot;)
            (`l;`"Common Stock Index";)
            (`cell
             .((`Economy
                .((`c;`combo;)
                  (`o
                   `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                   ))
                )
               (`Index
                .((`c;`combo;)
                  (`o
                   `Large_Cap `Mid_Cap `Broad_Cap `Small_Cap `Other_Sector
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Price `Volatility `Dividend_Yield
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          ))
      (`Return_Class_Return
       .((`Class
          `Return_Class_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Return_Class;0#`];))
         (`Component;`Total;.())
         (`Frequency;`Simulation;.())
         (`Currency
          `USD
          .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cl
             .,(`Currency;`"Return\nCurrency";)
             )
            (`cell
             .((`Class
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Return_Class_ `Return_Class_1
                   ))
                )
               (`Component
                .((`c;`combo;)
                  (`o
                   `Total `Income `Price
                   ))
                )
               (`Frequency
                .((`c;`combo;)
                  (`o
                   `Simulation `Annualized `YY_Annual `Cumulative
                   ))
                )
               (`Currency
                .((`c;`combo;)
                  (`o
                   `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_ReturnClassReturn.html;)
         (`J
          .,(`Return_Class
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
               (`F
                ,`Class
                ))
             )
          )
         (`U
          ,`Return_Class
          )))
      (`Asset_Class_Return
       .((`Class
          `Asset_Class_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;0#`];))
         (`Component;`Total;.())
         (`Frequency;`Simulation;.())
         (`Currency
          `USD
          .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cl
             .((`Currency;`"Return\nCurrency";)
               (`Class;`"Asset Class";))
             )
            (`cell
             .((`Class
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                   ))
                )
               (`Component
                .((`c;`combo;)
                  (`o
                   `Total `Income `Price
                   ))
                )
               (`Frequency
                .((`c;`combo;)
                  (`o
                   `Simulation `Annualized `YY_Annual `Cumulative `Index
                   ))
                )
               (`Currency
                .((`c;`combo;)
                  (`o
                   `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_AssetClassReturn.html;)
         (`J
          .,(`Asset_Class
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
               (`F
                ,`Class
                ))
             )
          )
         (`U
          ,`Asset_Class
          )
         (`V;{[p;x]r:()
          if[(`Index~x`Frequency)&~(x`Component) _in`Price`Total
            r,:,(1;"Component must be Price or Total for Frequency=Index") ]
          if[(`Index~x`Frequency)&~(x`Currency)~acb:.k.get_s (0;`A;`User;`Investments;`Asset_Classes;x`Class;`Basis)
            r,:,(1;("Currency must be the Index basis of &0";$acb)) ]
          :[#r;r;_n]};)))
      (`Portfolio_Return
       .((`Class
          `Asset_Class_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;0#`];))
         (`Component;`Total;.())
         (`Frequency;`Simulation;.())
         (`Currency
          `USD
          .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
         (`Period;`Current;.())
         (`Return_Portfolio
          `All
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Portfolio;,`All];)))
       .((`j
          .((`c;`Slot;)
            (`cl
             .((`Currency;`"Return\nCurrency";)
               (`Return_Portfolio;`Portfolio;)
               (`Class;`"Asset Class";))
             )
            (`cell
             .((`Class
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                   ))
                )
               (`Component
                .((`c;`combo;)
                  (`o
                   `Total `Income `Price
                   ))
                )
               (`Frequency
                .((`c;`combo;)
                  (`o
                   `Simulation `Annualized `YY_Annual `Cumulative
                   ))
                )
               (`Currency
                .((`c;`combo;)
                  (`o
                   `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                )
               (`Return_Portfolio
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Portfolio_ `All `Portfolio_1
                   ))
                ))
             )
            (`editor;1;)
            (`a
             `Return_Portfolio `Class `Component `Frequency `Currency `Period
             )
            (`u
             .((`Return_Portfolio;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
               (`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_PortfolioReturn.html;)
         (`J
          .((`Asset_Class
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
               (`F
                ,`Class
                ))
             )
            (`Portfolio
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Return_Portfolio;,,`All];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Return_Portfolio];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Return_Portfolio];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Return_Portfolio;,,`All];)
               (`F
                ,`Return_Portfolio
                ))
             ))
          )
         (`U
          `Asset_Class `Portfolio
          )))
      (`Life_Insurance
       .((`Product_Group
          `Product_Group_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Product_Group;0#`];))
         (`Category;`Income_Statement;.())
         (`Type;`Benefits;.())
         (`Item;`Total;.())
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`l;`"Life Insurance";)
            (`cl
             .,(`Product_Group;`"Product\nGroup";)
             )
            (`cell
             .((`Product_Group
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Product_Group_ `Product_Group_1
                   ))
                )
               (`Category
                .((`c;`combo;)
                  (`o
                   `BaFin `Basis_Post `Basis_Pre `Benefit `Bonus_Post `Bonus_Pre `Cashflow `Change `Dividend `Expense `Income_Post `Income_Pre `Income_Statement `Participation `Reserve_Post `Reserve_Pre `Reserves `Reserves_Post `Scaled `Surplus_Post `Surplus_Pre `Tax `Volume
                   ))
                )
               (`Type
                .((`c;`combo;)
                  (`o
                   `Acquisition `Adjustment `Amount `Base `Basis `Benefits `Convexity_Fisher_Weil `Convexity_Modified `Declared `Direct `Dividend `Duration_Fisher_Weil `Duration_Modified `Dynamic_Interest `Economic `Expenses `Face_Amount `Final `Free `Gain `HGB `HGB_Life `IFRS `Income `Interest `Investment `Maintenance `Negative `Net_Present_Value `On_Deposit `Other `Other_Exp `Paid `Policyholder `Pre_Dividend `Pre_Trade `Premium `Premium_from_Equity `Required `Reversionary `Separate `Shareholder `Solvency_II `Tax `Terminal `Terminal_Prev_Decl `Total `US `US_GAAP `US_Statutory_Life `Underwriting `VTRUE
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Acquisition `Adjusted_Premium `Adjustments `Advanced_Premium `Allocated `Allocated_Dynamic `Allocated_Fixed `Amount `Annuity `Annuity_Allocated `Annuity_Allocated_Fixed `Annuity_Declaration `Annuity_Declaration_Difference `Annuity_Earned `Annuity_Extra_Fixed `Annuity_Maturing `Annuity_Non_Interest `Annuity_Premium `Annuity_Projected `Annuity_Required `Annuity_Total_Dynamic `Annuity_Total_Fixed `Annuity_Unallocated `Base `Basis `Benefit `Cash_Value `Commission `Committed `Credit `DAC_Asset `DAC_Balance `Death `Death_Benefits `Declaration `Declaration_Difference `Deposit `Dir_or_Ind_Dist `Direct `Disability_AH `Div_Accum `Dividend `Divs_on_Def_Annuities `Dynamic_Interest `Earned `Earned_Reduction `Excess_Interest `Expense `Experience_Rated_Refunds `Extra_Fixed `Factor `Fees_Charged `Free `Future `General_Deductions `Gross `Group_Life_Premium `Income `Increase `Inforce `Interest `Interest_Credited `Interest_Extra `Interest_NonExtra `Interest_on_Deposit `Investment `Lapse `Life `Maintenance `Maturing `Maturity `Miscellaneous `NAR `Negative `Net `Net_Amount_at_Risk `Non_Annuity_Allocated `Non_Annuity_Allocated_Fixed `Non_Annuity_Declaration `Non_Annuity_Declaration_Difference `Non_Annuity_Earned `Non_Annuity_Extra_Fixed `Non_Annuity_Maturing `Non_Annuity_Non_Interest `Non_Annuity_Projected `Non_Annuity_Required `Non_Annuity_Total_Dynamic `Non_Annuity_Total_Fixed `Non_Annuity_Unallocated `Non_Exit `Non_Interest `Non_Interest_Dynamic `Non_Premium `Non_Terminal `On_Deposit `Operations_Loss_Deduction `Other `Overhead `PH_Surplus `Payable `Payout `Policy `Policyholder_Divs_Paid `Positive `Premium `Premium_Adjustments `Premium_Mortality `Premium_Reserve `Projected `Rebates `Received `Req_Add_Reserve `Required `Required_Interest `Reserve `Reserve_Payout `Reserve_Str_Account `Reserve_Str_Bonus `Risk `SGA_Base `SGA_Benefit `Separate `Special_Reserve `Supplementary_Contracts `Surrender `Terminal `Tied `Total `Total_Dynamic `Total_Fixed `Transfer `Unallocated `Unallocated_Dynamic `Unallocated_Fixed `User_Data_1 `User_Data_2
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Product_Group;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_LifeInsurance.html;)
         (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Basis_Pre `Terminal `Annuity_Declaration
           `Basis_Pre `Terminal `Non_Annuity_Declaration
           `Basis_Pre `Terminal `Declaration
           `Basis_Pre `Terminal `SGA_Base
           `Basis_Pre `Terminal_Prev_Decl `SGA_Benefit
           `Basis_Pre `Terminal_Prev_Decl `Earned
           `Benefit `Total `Death
           `Benefit `Total `Surrender
           `Benefit `Total `Maturity
           `Benefit `Total `Annuity
           `Benefit `Total `Total
           `Benefit `Base `Death
           `Benefit `Base `Surrender
           `Benefit `Base `Maturity
           `Benefit `Base `Annuity
           `Benefit `Base `Total
           `Benefit `Dynamic_Interest `Death
           `Benefit `Dynamic_Interest `Surrender
           `Benefit `Dynamic_Interest `Maturity
           `Benefit `Dynamic_Interest `Annuity
           `Benefit `Dynamic_Interest `Total
           `Benefit `Terminal `Death
           `Benefit `Terminal `Surrender
           `Benefit `Terminal `Maturity
           `Benefit `Terminal `Annuity
           `Benefit `Terminal `Total
           `Benefit `Terminal `Transfer
           `Benefit `Interest `Total
           `Benefit `Declared `Total
           `Benefit `Adjustment `Reserve
           `Benefit `Adjustment `Terminal
           `Benefit `Adjustment `Non_Interest
           `Benefit `Adjustment `Total
           `Benefit `Declared `Direct
           `Benefit `Paid `Direct
           `Benefit `Declared `Dividend
           `Benefit `Declared `Terminal
           `Bonus_Pre `Total `Non_Interest
           `Bonus_Pre `Total `Non_Interest_Dynamic
           `Bonus_Pre `Total `Extra_Fixed
           `Bonus_Pre `Terminal `Non_Interest
           `Bonus_Pre `Terminal `Non_Interest_Dynamic
           `Bonus_Pre `Terminal `Extra_Fixed
           `Bonus_Pre `Dividend `Non_Interest
           `Bonus_Pre `Dividend `Non_Interest_Dynamic
           `Bonus_Pre `Dividend `Extra_Fixed
           `Bonus_Pre `Direct `Non_Interest
           `Bonus_Pre `Direct `Non_Interest_Dynamic
           `Bonus_Pre `Direct `Extra_Fixed
           `Bonus_Pre `Reversionary `Non_Interest
           `Bonus_Pre `Reversionary `Non_Interest_Dynamic
           `Bonus_Pre `Reversionary `Extra_Fixed
           `Bonus_Pre `Base `Non_Interest
           `Bonus_Pre `Base `Non_Interest_Dynamic
           `Bonus_Pre `Base `Extra_Fixed
           `Bonus_Pre `Terminal `Annuity_Non_Interest
           `Bonus_Pre `Terminal `Non_Annuity_Non_Interest
           `Bonus_Pre `Terminal `Annuity_Extra_Fixed
           `Bonus_Pre `Terminal `Non_Annuity_Extra_Fixed
           `Bonus_Pre `Total `Factor
           `Bonus_Pre `Total `Req_Add_Reserve
           `Bonus_Pre `Terminal `Annuity_Earned
           `Bonus_Pre `Terminal `Non_Annuity_Earned
           `Bonus_Pre `Terminal `Annuity_Maturing
           `Bonus_Pre `Terminal `Non_Annuity_Maturing
           `Bonus_Pre `Terminal `Annuity_Total_Dynamic
           `Bonus_Pre `Terminal `Non_Annuity_Total_Dynamic
           `Bonus_Pre `Terminal `Declaration
           `Bonus_Pre `Terminal `Earned
           `Bonus_Pre `Terminal `Total
           `Bonus_Pre `Terminal `Total_Fixed
           `Bonus_Pre `Terminal `Total_Dynamic
           `Bonus_Pre `Terminal `Gross
           `Bonus_Pre `Terminal `Maturing
           `Change `Base `Total
           `Change `Dynamic_Interest `Total
           `Change `On_Deposit `Total
           `Change `Other `Total
           `Change `Separate `Total
           `Change `Terminal `Total
           `Change `Premium `Total
           `Change `Income `Total
           `Change `Negative `Total
           `Expense `Acquisition `Total
           `Expense `Maintenance `Total
           `Expense `Other_Exp `Total
           `Expense `Total `Total
           `Income_Pre `Premium `Total
           `Income_Pre `Premium_from_Equity `Total
           `Income_Pre `Other `Total
           `Income_Pre `Underwriting `Total
           `Income_Pre `Premium `Rebates
           `Income_Pre `Premium `Received
           `Reserve_Pre `Base `Total
           `Reserve_Pre `Dynamic_Interest `Total
           `Reserve_Pre `Premium `Total
           `Reserve_Pre `Other `Total
           `Reserve_Pre `Separate `Total
           `Reserve_Pre `Dividend `Total
           `Reserve_Pre `Interest `Total
           `Reserve_Pre `Investment `Total
           `Reserve_Pre `Total `Total
           `Reserve_Pre `On_Deposit `Total
           `Reserve_Pre `Negative `Total
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Maturing
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Maturing
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Earned
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Earned
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Declaration
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Declaration
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Unallocated
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Unallocated
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Allocated
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Allocated
           `Reserve_Pre `Terminal_Prev_Decl `Allocated
           `Reserve_Pre `Terminal_Prev_Decl `Gross
           `Reserve_Pre `Terminal_Prev_Decl `Maturing
           `Reserve_Pre `Terminal_Prev_Decl `Unallocated
           `Reserve_Pre `Terminal_Prev_Decl `Declaration
           `Reserve_Pre `Terminal_Prev_Decl `Earned
           `Reserve_Pre `Terminal_Prev_Decl `Total
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Allocated_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Allocated_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Total_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Total_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Total_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Total_Dynamic
           `Reserve_Pre `Terminal_Prev_Decl `Allocated_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Allocated_Dynamic
           `Reserve_Pre `Terminal_Prev_Decl `Unallocated_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Unallocated_Dynamic
           `Reserve_Pre `Terminal `Annuity_Declaration
           `Reserve_Pre `Terminal `Non_Annuity_Declaration
           `Reserve_Pre `Terminal `Annuity_Earned
           `Reserve_Pre `Terminal `Non_Annuity_Earned
           `Reserve_Pre `Terminal `Annuity_Required
           `Reserve_Pre `Terminal `Non_Annuity_Required
           `Reserve_Pre `Terminal `Annuity_Projected
           `Reserve_Pre `Terminal `Non_Annuity_Projected
           `Reserve_Pre `Terminal `Projected
           `Reserve_Pre `Terminal `Required
           `Reserve_Pre `Terminal `Gross
           `Reserve_Pre `Terminal `Declaration
           `Reserve_Pre `Terminal `Earned
           `Reserve_Pre `Terminal `Total
           `Reserve_Pre `Terminal `Maturing
           `Reserve_Pre `Terminal `Allocated
           `Reserve_Pre `Terminal `Unallocated
           `Reserve_Pre `Terminal `Annuity_Total_Fixed
           `Reserve_Pre `Terminal `Non_Annuity_Total_Fixed
           `Reserve_Pre `Terminal `Allocated_Fixed
           `Reserve_Pre `Terminal `Allocated_Dynamic
           `Reserve_Pre `Terminal `Unallocated_Fixed
           `Reserve_Pre `Terminal `Unallocated_Dynamic
           `Reserve_Pre `Terminal `Total_Fixed
           `Reserve_Pre `Terminal `Total_Dynamic
           `Reserve_Pre `Dividend `Future
           `Reserve_Pre `Interest `Terminal
           `Basis_Pre `Total `Reserve_Payout
           `Scaled `Base `User_Data_1
           `Scaled `Base `User_Data_2
           `Surplus_Pre `Basis `Benefit
           `Surplus_Pre `Basis `NAR
           `Surplus_Pre `Basis `Premium
           `Surplus_Pre `Basis `Reserve
           `Surplus_Pre `Required `Benefit
           `Surplus_Pre `Required `NAR
           `Surplus_Pre `Required `Premium
           `Surplus_Pre `Required `Reserve
           `Surplus_Pre `Required `Total
           `Volume `Face_Amount `Inforce
           `Income_Statement `Income `Premium
           `Income_Statement `Income `Other
           `Income_Statement `Benefits `Death
           `Income_Statement `Benefits `Surrender
           `Income_Statement `Benefits `Lapse
           `Income_Statement `Benefits `Maturity
           `Income_Statement `Benefits `Annuity
           `Income_Statement `Benefits `Disability_AH
           `Income_Statement `Benefits `Non_Exit
           `Income_Statement `Benefits `Adjustments
           `Income_Statement `Benefits `Total
           `Income_Statement `Expenses `Acquisition
           `Income_Statement `Expenses `Commission
           `Income_Statement `Expenses `Maintenance
           `Income_Statement `Expenses `Overhead
           `Income_Statement `Expenses `Other
           `Income_Statement `Expenses `Total
           `Reserves `HGB_Life `Base
           `Reserves `HGB_Life `Dynamic_Interest
           `Reserves `HGB_Life `Policy
           `Reserves `HGB_Life `Separate
           `Reserves `HGB_Life `Premium
           `Reserves `HGB_Life `Negative
           `Reserves `HGB_Life `On_Deposit
           `Reserves `HGB_Life `Other
           `Reserves `HGB_Life `Total
           `Reserves `HGB_Life `Terminal
           `Reserves `HGB_Life `Interest
           `Reserves `HGB_Life `Investment
           `Reserves `HGB_Life `Dividend
           `Reserves `HGB_Life `Non_Terminal
           `Reserves `HGB_Life `Non_Premium
           `Reserves `HGB_Life `Income
           `Reserves `US_GAAP `Premium
           `Reserves `US_GAAP `Benefit
           `Reserves `US_GAAP `Expense
           `Reserves `US_GAAP `Fees_Charged
           `Reserves `US_GAAP `Interest_Credited
           `Reserves `US_GAAP `DAC_Asset
           `Reserves `US_GAAP `Total
           `Reserves `IFRS `Premium
           `Reserves `IFRS `Benefit
           `Reserves `IFRS `Expense
           `Reserves `IFRS `Fees_Charged
           `Reserves `IFRS `Interest_Credited
           `Reserves `IFRS `DAC_Asset
           `Reserves `IFRS `Total
           `Reserves `Economic `Premium
           `Reserves `Economic `Benefit
           `Reserves `Economic `Expense
           `Reserves `Economic `Fees_Charged
           `Reserves `Economic `Interest_Credited
           `Reserves `Economic `Total
           `Reserves `Solvency_II `Premium
           `Reserves `Solvency_II `Benefit
           `Reserves `Solvency_II `Expense
           `Reserves `Solvency_II `Fees_Charged
           `Reserves `Solvency_II `Interest_Credited
           `Reserves `Solvency_II `Total
           `Reserves `US_Statutory_Life `Premium
           `Reserves `US_Statutory_Life `Life
           `Reserves `US_Statutory_Life `Disability_AH
           `Reserves `US_Statutory_Life `Deposit
           `Reserves `US_Statutory_Life `Expense
           `Reserves `US_Statutory_Life `Total
           `BaFin `Amount `Reserve
           `BaFin `Amount `Net_Amount_at_Risk
           `BaFin `Amount `Premium
           `BaFin `Amount `Benefit
           `BaFin `Amount `Total
           `BaFin `Basis `Reserve
           `BaFin `Basis `Net_Amount_at_Risk
           `BaFin `Basis `Premium
           `BaFin `Basis `Benefit
           `Cashflow `Net_Present_Value `Premium
           `Cashflow `Net_Present_Value `Expense
           `Cashflow `Net_Present_Value `Benefit
           `Cashflow `Net_Present_Value `Other
           `Cashflow `Net_Present_Value `Positive
           `Cashflow `Net_Present_Value `Negative
           `Cashflow `Net_Present_Value `Net
           `Cashflow `Total `Premium
           `Cashflow `Total `Expense
           `Cashflow `Total `Benefit
           `Cashflow `Total `Other
           `Cashflow `Total `Positive
           `Cashflow `Total `Negative
           `Cashflow `Total `Net
           `Participation `Gain `Basis
           `Participation `Gain `Expense
           `Participation `Gain `Interest
           `Participation `Gain `Miscellaneous
           `Participation `Gain `Risk
           `Participation `Dividend `Premium
           `Participation `Pre_Trade `Committed
           `Participation `Pre_Trade `Payable
           `Tax `US `Reserve
           `Tax `US `Premium_Reserve
           `Tax `US `Supplementary_Contracts
           `Tax `US `Div_Accum
           `Tax `US `Special_Reserve
           `Tax `US `Advanced_Premium
           `Tax `US `Required_Interest
           `Tax `US `Excess_Interest
           `Tax `US `Divs_on_Def_Annuities
           `Tax `US `Interest_on_Deposit
           `Tax `US `Policyholder_Divs_Paid
           `Tax `US `Premium_Adjustments
           `Tax `US `Experience_Rated_Refunds
           `Tax `US `Premium_Mortality
           `Tax `US `Annuity_Premium
           `Tax `US `Group_Life_Premium
           `Tax `US `General_Deductions
           `Tax `US `Operations_Loss_Deduction
           `Tax `US `Death_Benefits
           `Tax `US `Dir_or_Ind_Dist
           `Tax `US `DAC_Balance
           `Tax `US `Cash_Value
           `Tax `US `PH_Surplus
           `Tax `HGB `Reserve
           `Tax `HGB `Premium_Reserve
           `Tax `HGB `Supplementary_Contracts
           `Tax `HGB `Div_Accum
           `Tax `HGB `Special_Reserve
           `Tax `HGB `Advanced_Premium
           `Tax `HGB `Required_Interest
           `Tax `HGB `Excess_Interest
           `Tax `HGB `Divs_on_Def_Annuities
           `Tax `HGB `Interest_on_Deposit
           `Tax `HGB `Policyholder_Divs_Paid
           `Tax `HGB `Premium_Adjustments
           `Tax `HGB `Experience_Rated_Refunds
           `Tax `HGB `Premium_Mortality
           `Tax `HGB `Annuity_Premium
           `Tax `HGB `Group_Life_Premium
           `Tax `HGB `General_Deductions
           `Tax `HGB `Operations_Loss_Deduction
           `Tax `HGB `Death_Benefits
           `Tax `HGB `Dir_or_Ind_Dist
           `Tax `HGB `DAC_Balance
           `Tax `HGB `Cash_Value
           `Tax `HGB `PH_Surplus
           `Cashflow `Duration_Modified `Premium
           `Cashflow `Duration_Modified `Expense
           `Cashflow `Duration_Modified `Benefit
           `Cashflow `Duration_Modified `Other
           `Cashflow `Duration_Modified `Positive
           `Cashflow `Duration_Modified `Negative
           `Cashflow `Duration_Modified `Net
           `Cashflow `Convexity_Modified `Premium
           `Cashflow `Convexity_Modified `Expense
           `Cashflow `Convexity_Modified `Benefit
           `Cashflow `Convexity_Modified `Other
           `Cashflow `Convexity_Modified `Positive
           `Cashflow `Convexity_Modified `Negative
           `Cashflow `Convexity_Modified `Net
           `Cashflow `Duration_Fisher_Weil `Premium
           `Cashflow `Duration_Fisher_Weil `Expense
           `Cashflow `Duration_Fisher_Weil `Benefit
           `Cashflow `Duration_Fisher_Weil `Other
           `Cashflow `Duration_Fisher_Weil `Positive
           `Cashflow `Duration_Fisher_Weil `Negative
           `Cashflow `Duration_Fisher_Weil `Net
           `Cashflow `Convexity_Fisher_Weil `Premium
           `Cashflow `Convexity_Fisher_Weil `Expense
           `Cashflow `Convexity_Fisher_Weil `Benefit
           `Cashflow `Convexity_Fisher_Weil `Other
           `Cashflow `Convexity_Fisher_Weil `Positive
           `Cashflow `Convexity_Fisher_Weil `Negative
           `Cashflow `Convexity_Fisher_Weil `Net
           `Basis_Post `Terminal `Earned
           `Basis_Post `Terminal `SGA_Benefit
           `Basis_Post `Terminal `Increase
           `Bonus_Post `Total `Non_Interest
           `Bonus_Post `Total `Interest
           `Bonus_Post `Total `Total
           `Bonus_Post `Total `Payout
           `Bonus_Post `Terminal `Non_Interest
           `Bonus_Post `Terminal `Interest
           `Bonus_Post `Terminal `Total
           `Bonus_Post `Terminal `Payout
           `Bonus_Post `Dividend `Non_Interest
           `Bonus_Post `Dividend `Interest
           `Bonus_Post `Dividend `Total
           `Bonus_Post `Dividend `Payout
           `Bonus_Post `Direct `Non_Interest
           `Bonus_Post `Direct `Interest
           `Bonus_Post `Direct `Total
           `Bonus_Post `Direct `Payout
           `Bonus_Post `Reversionary `Non_Interest
           `Bonus_Post `Reversionary `Interest
           `Bonus_Post `Reversionary `Total
           `Bonus_Post `Reversionary `Payout
           `Bonus_Post `Base `Non_Interest
           `Bonus_Post `Base `Interest
           `Bonus_Post `Base `Total
           `Bonus_Post `Base `Payout
           `Bonus_Post `Dividend `Interest_Extra
           `Bonus_Post `Dividend `Interest_NonExtra
           `Bonus_Post `Dividend `Reserve_Str_Bonus
           `Bonus_Post `Direct `Interest_Extra
           `Bonus_Post `Direct `Interest_NonExtra
           `Bonus_Post `Direct `Reserve_Str_Bonus
           `Bonus_Post `Total `Amount
           `Bonus_Post `Dividend `Amount
           `Bonus_Post `Reversionary `Amount
           `Bonus_Post `Direct `Amount
           `Bonus_Post `Free `Amount
           `Bonus_Post `Total `Reserve_Str_Account
           `Bonus_Post `Total `Reserve_Str_Bonus
           `Bonus_Post `Terminal `Annuity_Declaration
           `Bonus_Post `Terminal `Non_Annuity_Declaration
           `Bonus_Post `Terminal `Annuity_Earned
           `Bonus_Post `Terminal `Non_Annuity_Earned
           `Bonus_Post `Terminal `Annuity_Declaration_Difference
           `Bonus_Post `Terminal `Non_Annuity_Declaration_Difference
           `Bonus_Post `Terminal `Earned
           `Bonus_Post `Terminal `Declaration
           `Bonus_Post `Terminal `Declaration_Difference
           `Bonus_Post `Terminal `Earned_Reduction
           `Bonus_Post `Terminal `Total_Fixed
           `Bonus_Post `Terminal `Total_Dynamic
           `Dividend `Policyholder `Required
           `Dividend `Policyholder `Total
           `Income_Post `VTRUE `Total
           `Income_Post `Investment `Total
           `Income_Post `Pre_Dividend `Total
           `Income_Post `Shareholder `Total
           `Income_Post `Tax `Total
           `Income_Post `Premium_from_Equity `Total
           `Income_Post `VTRUE `Basis
           `Reserve_Post `Terminal `Earned
           `Reserve_Post `Terminal `Declaration
           `Reserve_Post `Terminal `Total
           `Reserve_Post `Terminal `Allocated
           `Reserve_Post `Terminal `Gross
           `Reserve_Post `Terminal `Maturing
           `Reserve_Post `Terminal `Unallocated
           `Reserve_Post `Terminal `Total_Fixed
           `Reserve_Post `Terminal `Total_Dynamic
           `Reserve_Post `Terminal `Allocated_Fixed
           `Reserve_Post `Terminal `Allocated_Dynamic
           `Reserve_Post `Terminal `Unallocated_Fixed
           `Reserve_Post `Terminal `Unallocated_Dynamic
           `Surplus_Post `Shareholder `Total
           `Surplus_Post `Policyholder `Tied
           `Surplus_Post `Policyholder `Free
           `Surplus_Post `Policyholder `Total
           `Surplus_Post `Policyholder `Terminal
           `Reserves_Post `Economic `Total
           `Reserves_Post `Economic `Benefit
           `Reserves_Post `Economic `Expense
           `Reserves_Post `Economic `Premium
           `Reserves_Post `Economic `Other
           `Reserves_Post `US_GAAP `Total
           `Reserves_Post `US_GAAP `Benefit
           `Reserves_Post `US_GAAP `Expense
           `Reserves_Post `US_GAAP `Premium
           `Reserves_Post `US_GAAP `Other
           `Reserves_Post `IFRS `Total
           `Reserves_Post `IFRS `Benefit
           `Reserves_Post `IFRS `Expense
           `Reserves_Post `IFRS `Premium
           `Reserves_Post `IFRS `Other
           `Reserves_Post `Solvency_II `Total
           `Reserves_Post `Solvency_II `Benefit
           `Reserves_Post `Solvency_II `Expense
           `Reserves_Post `Solvency_II `Premium
           `Reserves_Post `Solvency_II `Other
           `Participation `Dividend `Credit
           `Participation `Dividend `Adjusted_Premium
           `Participation `Final `Committed
           `Participation `Final `Payable);`Category `Type `Item];)
         (`J
          .,(`Product_Group
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Product_Group;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Product_Group];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Product_Group];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Product_Group;,0#`];)
               (`F
                ,`Product_Group
                ))
             )
          )
         (`U
          ,`Product_Group
          )
         (`XX
          `Annuity_Declaration `Non_Annuity_Declaration `Declaration `SGA_Base `SGA_Benefit `Earned `Death `Surrender `Maturity `Annuity `Total `Transfer `Reserve `Terminal `Non_Interest `Direct `Dividend `Non_Interest_Dynamic `Extra_Fixed `Annuity_Non_Interest `Non_Annuity_Non_Interest `Annuity_Extra_Fixed `Non_Annuity_Extra_Fixed `Factor `Req_Add_Reserve `Annuity_Earned `Non_Annuity_Earned `Annuity_Maturing `Non_Annuity_Maturing `Annuity_Total_Dynamic `Non_Annuity_Total_Dynamic `Total_Fixed `Total_Dynamic `Gross `Maturing `Rebates `Received `Annuity_Unallocated `Non_Annuity_Unallocated `Annuity_Allocated `Non_Annuity_Allocated `Allocated `Unallocated `Annuity_Allocated_Fixed `Non_Annuity_Allocated_Fixed `Annuity_Total_Fixed `Non_Annuity_Total_Fixed `Allocated_Fixed `Allocated_Dynamic `Unallocated_Fixed `Unallocated_Dynamic `Annuity_Required `Non_Annuity_Required `Annuity_Projected `Non_Annuity_Projected `Projected `Required `Future `Reserve_Payout `User_Data_1 `User_Data_2 `Benefit `NAR `Premium `Inforce `Other `Lapse `Disability_AH `Non_Exit `Adjustments `Acquisition `Commission `Maintenance `Overhead `Base `Dynamic_Interest `Policy `Separate `Negative `On_Deposit `Interest `Investment `Non_Terminal `Non_Premium `Income `Expense `Fees_Charged `Interest_Credited `DAC_Asset `Life `Deposit `Net_Amount_at_Risk `Positive `Net `Basis `Miscellaneous `Risk `Committed `Payable `Premium_Reserve `Supplementary_Contracts `Div_Accum `Special_Reserve `Advanced_Premium `Required_Interest `Excess_Interest `Divs_on_Def_Annuities `Interest_on_Deposit `Policyholder_Divs_Paid `Premium_Adjustments `Experience_Rated_Refunds `Premium_Mortality `Annuity_Premium `Group_Life_Premium `General_Deductions `Operations_Loss_Deduction `Death_Benefits `Dir_or_Ind_Dist `DAC_Balance `Cash_Value `PH_Surplus `Increase `Payout `Interest_Extra `Interest_NonExtra `Reserve_Str_Bonus `Amount `Reserve_Str_Account `Annuity_Declaration_Difference `Non_Annuity_Declaration_Difference `Declaration_Difference `Earned_Reduction `Tied `Free `Credit `Adjusted_Premium
          )))
      (`Property_Casualty
       .((`Product
          `Product_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Product;,`Any_Product_];))
         (`Basis
          `Net
          .,(`V;{[p;x]:[(x _in`Ceded`Net)&~`Reinsurance _in .G.submodules; :,(1;"Cannot choose Ceded or Net basis without running Reinsurance module")]};))
         (`Item
          `Underwriting_Result
          .,(`V;{[modon;p;x] :[x _in modon@{x@&~x _lin y}[!modon;.G.submodules]; (1;"Item is disabled in module selection button")]}[.((`Underwriting_Expenses;`UWE;)
               (`Commissions_and_Brokerage;`CBE;)
               (`Taxes_Licenses_and_Fees;`TLF;)
               (`Contingent_Commissions;`Contingent_Commission;)
               (`Management_Fees;`MGT;)
               (`Policyholder_Dividends;`PHD;)
               (`Allocated;`ALAE;)
               (`Unallocated;`ULAE;)
               (`Salvage_and_Subrogation;`SS;))];))
         (`Transaction
          `Cashflow
          .,(`V;{[p;x]:[(`Unpaid~x)&~`Reserves _in .G.submodules; (1;"Reserves disabled in module selection button")]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cl
             .,(`Product;`Product;)
             )
            (`cell
             .((`Product
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Product_ `Any_Product_ `Product_1
                   ))
                )
               (`Basis
                .((`c;`combo;)
                  (`o
                   `Ceded `Gross `Net
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `ALAE `Acquisition_Costs `CBE `Contingent_Commission `Exposure `Float `Loss `Loss_ALAE_Net_SS `Loss_Catastrophe `Loss_LAE_Net_SS `Loss_Non_Catastrophe `MGT `PHD `Premium `SS `TLF `ULAE `UWE `Underwriting_Result
                   ))
                )
               (`Transaction
                .((`c;`combo;)
                  (`o
                   `Accrued `Balance `Cashflow `Drafts_Outstanding `Earned `Incurred `Paid `Payable `Receivable `Received `True_Ultimate `Unearned `Unpaid `Written
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Product;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_PCInsurance.html;)
         (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Gross `Premium `Written
           `Gross `Premium `Earned
           `Gross `Premium `True_Ultimate
           `Gross `Premium `Received
           `Gross `Premium `Cashflow
           `Gross `Premium `Unearned
           `Gross `Premium `Receivable
           `Ceded `Premium `Written
           `Ceded `Premium `Earned
           `Ceded `Premium `True_Ultimate
           `Ceded `Premium `Received
           `Ceded `Premium `Cashflow
           `Ceded `Premium `Unearned
           `Ceded `Premium `Receivable
           `Net `Premium `Written
           `Net `Premium `Earned
           `Net `Premium `True_Ultimate
           `Net `Premium `Received
           `Net `Premium `Cashflow
           `Net `Premium `Unearned
           `Net `Premium `Receivable
           `Gross `Exposure `Written
           `Gross `Exposure `Earned
           `Gross `Loss `True_Ultimate
           `Gross `Loss `Paid
           `Gross `Loss `Unpaid
           `Gross `ALAE `True_Ultimate
           `Gross `ALAE `Paid
           `Gross `ALAE `Unpaid
           `Gross `Loss_LAE_Net_SS `True_Ultimate
           `Gross `Loss_LAE_Net_SS `Paid
           `Gross `Loss_LAE_Net_SS `Unpaid
           `Ceded `Loss `True_Ultimate
           `Ceded `Loss `Paid
           `Ceded `Loss `Unpaid
           `Ceded `ALAE `True_Ultimate
           `Ceded `ALAE `Paid
           `Ceded `ALAE `Unpaid
           `Ceded `Loss_LAE_Net_SS `True_Ultimate
           `Ceded `Loss_LAE_Net_SS `Paid
           `Ceded `Loss_LAE_Net_SS `Unpaid
           `Net `Loss `True_Ultimate
           `Net `Loss `Paid
           `Net `Loss `Unpaid
           `Net `ALAE `True_Ultimate
           `Net `ALAE `Paid
           `Net `ALAE `Unpaid
           `Net `Loss_LAE_Net_SS `True_Ultimate
           `Net `Loss_LAE_Net_SS `Paid
           `Net `Loss_LAE_Net_SS `Unpaid
           `Gross `ULAE `True_Ultimate
           `Gross `ULAE `Paid
           `Gross `ULAE `Unpaid
           `Gross `UWE `Written
           `Gross `UWE `Earned
           `Gross `UWE `True_Ultimate
           `Gross `UWE `Payable
           `Gross `TLF `Written
           `Gross `TLF `Earned
           `Gross `TLF `True_Ultimate
           `Gross `TLF `Payable
           `Gross `MGT `Written
           `Gross `MGT `Earned
           `Gross `MGT `True_Ultimate
           `Gross `MGT `Payable
           `Gross `CBE `Written
           `Gross `CBE `Earned
           `Gross `CBE `True_Ultimate
           `Gross `CBE `Payable
           `Gross `PHD `Written
           `Gross `PHD `Earned
           `Gross `PHD `True_Ultimate
           `Gross `PHD `Payable
           `Ceded `UWE `Written
           `Ceded `UWE `Earned
           `Ceded `UWE `True_Ultimate
           `Ceded `UWE `Payable
           `Ceded `TLF `Written
           `Ceded `TLF `Earned
           `Ceded `TLF `True_Ultimate
           `Ceded `TLF `Payable
           `Ceded `MGT `Written
           `Ceded `MGT `Earned
           `Ceded `MGT `True_Ultimate
           `Ceded `MGT `Payable
           `Ceded `CBE `Written
           `Ceded `CBE `Earned
           `Ceded `CBE `True_Ultimate
           `Ceded `CBE `Payable
           `Ceded `PHD `Written
           `Ceded `PHD `Earned
           `Ceded `PHD `True_Ultimate
           `Ceded `PHD `Payable
           `Net `UWE `Written
           `Net `UWE `Earned
           `Net `UWE `True_Ultimate
           `Net `UWE `Payable
           `Net `TLF `Written
           `Net `TLF `Earned
           `Net `TLF `True_Ultimate
           `Net `TLF `Payable
           `Net `MGT `Written
           `Net `MGT `Earned
           `Net `MGT `True_Ultimate
           `Net `MGT `Payable
           `Net `CBE `Written
           `Net `CBE `Earned
           `Net `CBE `True_Ultimate
           `Net `CBE `Payable
           `Net `PHD `Written
           `Net `PHD `Earned
           `Net `PHD `True_Ultimate
           `Net `PHD `Payable
           `Gross `UWE `Paid
           `Gross `TLF `Paid
           `Gross `MGT `Paid
           `Gross `CBE `Paid
           `Gross `PHD `Paid
           `Gross `Acquisition_Costs `Paid
           `Gross `Float `Balance
           `Ceded `Float `Balance
           `Net `Float `Balance
           `Gross `Underwriting_Result `True_Ultimate
           `Gross `Loss `True_Ultimate
           `Gross `ALAE `True_Ultimate
           `Gross `SS `True_Ultimate
           `Gross `Loss_Catastrophe `True_Ultimate
           `Gross `Loss_ALAE_Net_SS `True_Ultimate
           `Gross `Loss_Non_Catastrophe `True_Ultimate
           `Ceded `Underwriting_Result `True_Ultimate
           `Ceded `Loss `True_Ultimate
           `Ceded `ALAE `True_Ultimate
           `Ceded `SS `True_Ultimate
           `Ceded `Loss_Catastrophe `True_Ultimate
           `Ceded `Loss_ALAE_Net_SS `True_Ultimate
           `Ceded `Loss_Non_Catastrophe `True_Ultimate
           `Net `Underwriting_Result `True_Ultimate
           `Net `Loss `True_Ultimate
           `Net `ALAE `True_Ultimate
           `Net `SS `True_Ultimate
           `Net `Loss_Catastrophe `True_Ultimate
           `Net `Loss_ALAE_Net_SS `True_Ultimate
           `Net `Loss_Non_Catastrophe `True_Ultimate
           `Gross `Acquisition_Costs `True_Ultimate
           `Ceded `Acquisition_Costs `True_Ultimate
           `Gross `Loss `Drafts_Outstanding
           `Gross `ALAE `Drafts_Outstanding
           `Gross `Contingent_Commission `True_Ultimate
           `Gross `Contingent_Commission `Cashflow
           `Gross `Contingent_Commission `Payable
           `Gross `Contingent_Commission `Accrued
           `Gross `Contingent_Commission `Incurred
           `Gross `Underwriting_Result `True_Ultimate
           `Ceded `Underwriting_Result `True_Ultimate
           `Net `Underwriting_Result `True_Ultimate);`Basis `Item `Transaction];)
         (`J
          .,(`Product
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Product;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Product];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Product];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Product;,0#`];)
               (`F
                ,`Product
                ))
             )
          )
         (`U
          ,`Product
          )
         (`XX
          `Written `Earned `True_Ultimate `Received `Cashflow `Unearned `Receivable `Paid `Unpaid `Payable `Balance `Drafts_Outstanding `Accrued `Incurred
          )))
      (`PC_Reinsurance
       .((`Treaty
          `Treaty_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Treaty;,`Any_Treaty_];))
         (`Item
          `Loss
          .,(`V;{[modon;p;x] :[x _in modon@{x@&~x _lin y}[!modon;.G.submodules]; (1;"Item is disabled in module selection button")]}[.((`Commissions_and_Brokerage;`CBE;)
               (`Allocated;`ALAE;))];))
         (`Transaction
          `True_Ultimate
          .,(`V;{[p;x]:[(`Unpaid~x)&~`Reserves _in .G.submodules; (1;"Reserves disabled in module selection button")]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`l;`"P&C Reinsurance";)
            (`cell
             .((`Treaty
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Treaty_ `Any_Treaty_ `Treaty_1
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `ALAE `Acquisition_Costs `Loss `Loss_ALAE_Net_SS `Premium
                   ))
                )
               (`Transaction
                .((`c;`combo;)
                  (`o
                   `Cashflow `Earned `Paid `Payable `Receivable `Received `True_Ultimate `Unearned `Unpaid `Written
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Treaty;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_PCReinsurance.html;)
         (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Premium `Written
           `Premium `Earned
           `Premium `True_Ultimate
           `Premium `Received
           `Premium `Cashflow
           `Premium `Unearned
           `Premium `Receivable
           `Acquisition_Costs `Written
           `Acquisition_Costs `Earned
           `Acquisition_Costs `True_Ultimate
           `Acquisition_Costs `Paid
           `Acquisition_Costs `Cashflow
           `Acquisition_Costs `Unearned
           `Acquisition_Costs `Payable
           `Loss `True_Ultimate
           `Loss `Paid
           `Loss `Unpaid
           `ALAE `True_Ultimate
           `ALAE `Paid
           `ALAE `Unpaid
           `Loss_ALAE_Net_SS `True_Ultimate
           `Loss_ALAE_Net_SS `Paid
           `Loss_ALAE_Net_SS `Unpaid);`Item `Transaction];)
         (`J
          .,(`Treaty
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Treaty;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Treaty];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Treaty];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Treaty;,0#`];)
               (`F
                ,`Treaty
                ))
             )
          )
         (`U
          ,`Treaty
          )
         (`XX
          `Written `Earned `True_Ultimate `Received `Cashflow `Unearned `Receivable `Paid `Payable `Unpaid
          )))
      (`Financing
       .((`Instrument
          `Financing_Instrument_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Financing_Instrument;0#`];))
         (`Category;`Share_Balances;.())
         (`Timing;`Final;.())
         (`Item;`Outstanding;.())
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`rl
             .,(`Instrument;`"Financing Instrument";)
             )
            (`cell
             .((`Instrument
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Financing_Instrument_ `Financing_Instrument_1
                   ))
                )
               (`Category
                .((`c;`combo;)
                  (`o
                   `Money_Balances `Share_Balances `Transactions
                   ))
                )
               (`Timing
                .((`c;`combo;)
                  (`o
                   `Pre_Trade `Final
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Additional_Paid_In `Committed `Credit `Credit_Adjustment `Dividend `Dividend_Adjustment `Dividend_Adjustment_Paid `Dividends_Declared `Dividends_Deferred `Dividends_Paid `Dividends_Unpaid `Extra_Decrease `Extra_Increase `Interest_Backlog `Interest_Deferred `Interest_Due `Interest_Paid `Interest_Unpaid `Issued `Market_Value `Outstanding `Par_Value `Payable `Principal `Principal_Paid `Repurchased `Retired `Uncommitted
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Instrument;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_Financing.html;)
         (`V;{[p;x] f:.k.get_s (0;`A;`User;`Financing)
             if[`Unspecified_~x`Instrument; :_n]
             r:.L.V.user_value_list[.C`Financing_List;`Instrument`Category`Timing`Item;p;@[x;`Instrument;:;f[x`Instrument;`m]]]
             :[#r;r;_n]};)
         (`J
          .,(`Financing_Instrument
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Instrument;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Instrument];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Instrument];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Instrument;,0#`];)
               (`F
                ,`Instrument
                ))
             )
          )
         (`U
          ,`Financing_Instrument
          )
         (`XX
          `Dividend `Credit `Outstanding `Committed `Uncommitted `Payable `Dividends_Declared `Dividends_Paid `Interest_Due `Interest_Backlog `Interest_Paid `Principal_Paid `Par_Value `Market_Value `Principal `Additional_Paid_In `Dividends_Unpaid `Dividend_Adjustment `Credit_Adjustment `Extra_Increase `Extra_Decrease `Dividend_Adjustment_Paid `Dividends_Deferred `Retired `Issued `Repurchased `Interest_Deferred `Interest_Unpaid
          )))
      (`Investments
       .((`Module
          `Investments
          .,(`V;{[label;p;x]
  g:`None,.G`submodules
  if[label~"Module"
    if[`HGB_Life _in g; g,:`HGB]
    if[`US_Statutory_Life _in g; g,:`US_Statutory]
    ]
 :[~x _in g;(1;("&0 is not an active &1";$x;label))]}["Module"];))
         (`Portfolio
          `All
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Portfolio;,`All];))
         (`Asset_Class
          `Asset_Class_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;,`HGB_Funds];))
         (`Timing;`Final;.())
         (`Item;`Quantity;.())
         (`Currency
          `Reporting
          .,(`V;{[p;x]:[x~`Original;(0;"Currency of Original may not be available in future releases of the software.");_n]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cell
             .((`Portfolio
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Portfolio_ `All `Portfolio_1
                   ))
                )
               (`Module
                .((`c;`combo;)
                  (`o
                   `Investments `Economic `Solvency_II `US_GAAP `IFRS `US_Statutory `HGB
                   ))
                )
               (`Asset_Class
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Accrued_Expenses `Accrued_Expenses_Paid `Accrued_Expenses_Received `Accrued_Income `Accrued_Income_FX_Effect `Accrued_Income_Paid `Accrued_Income_Received `Accrued_Interest `Accrued_Interest_Paid `Accrued_Interest_Received `Amount_Invested `Appreciation `Balance_Sheet_Value `Balance_Sheet_Value_AFS `Balance_Sheet_Value_AV `Balance_Sheet_Value_HTM `Balance_Sheet_Value_LAR `Balance_Sheet_Value_Trading `BzW `Change_in_Accrued_Expenses `Change_in_Accrued_Income `Change_in_Income_Basis `Change_in_Unrealized_Gain `Consideration_Paid `Consideration_Received `Constant_Yield_Adjustment `Constant_Yield_Amortized_Cost `Cost_Value `Depreciation `Derivatives_Cash_Flow `Dividends_Declared `Dividends_Receivable `Dividends_Received `Expenses_Paid `Fluctuation_Reserve `HGB_Cost_AV `HGB_Cost_UV `Hidden_Reserves `Hidden_Reserves_AV `Hidden_Reserves_Negative `Hidden_Reserves_Positive `IRR `Income_Basis `Income_Basis_FX_Effect `Income_Basis_of_Purchases `Income_Basis_of_Trades `Income_FX_Effect `Income_Received `Interest_Received `Market_Value `Market_Value_QIS5_Shock_Down `Market_Value_QIS5_Shock_Up `Market_Value_Times_Convexity_Fisher_Weil `Market_Value_Times_Convexity_Modified `Market_Value_Times_Duration_Fisher_Weil `Market_Value_Times_Duration_Modified `Market_Value_Times_Maturity `Market_Value_for_Fisher_Weil `Market_Value_of_Maturing `Net_Income_Earned `Net_Ordinary_Income_Gain `Notional_Amount `Price_Paid `Price_Received `Principal_Received `Property_Expenses_Paid `Quantity `Quantity_AV `Quantity_UV `Realized_Gain `Realized_Gain_AVR `Realized_Gain_IMR `Realized_Gain_Negative `Realized_Gain_Positive `Reclassification_Gain `Rent_Received `Return_of_Market_Value `Risk_Adjusted_IRR `Sell_Realized_Gain `Total_Gain `Unrealized_Gain `Unrealized_Gain_FX `Unrealized_Gain_FX_Effect `Unrealized_Gain_Negative `Unrealized_Gain_Positive `Unrealized_Gain_nonFX
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                )
               (`Timing
                .((`c;`combo;)
                  (`o
                   `Pre_Trade `Final
                   ))
                )
               (`Currency
                .((`c;`combo;)
                  (`o
                   `Original `Reporting
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .((`Portfolio;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
               (`Asset_Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_Investments.html;)
         (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Investments `Pre_Trade `Quantity
           `Investments `Pre_Trade `Notional_Amount
           `Investments `Pre_Trade `Cost_Value
           `Investments `Pre_Trade `Constant_Yield_Amortized_Cost
           `Investments `Pre_Trade `Market_Value
           `Investments `Pre_Trade `Market_Value_QIS5_Shock_Up
           `Investments `Pre_Trade `Market_Value_QIS5_Shock_Down
           `Investments `Pre_Trade `Constant_Yield_Adjustment
           `Investments `Pre_Trade `Accrued_Interest
           `Investments `Pre_Trade `Interest_Received
           `Investments `Pre_Trade `Return_of_Market_Value
           `Investments `Pre_Trade `Market_Value_for_Fisher_Weil
           `Investments `Pre_Trade `Market_Value_Times_Duration_Fisher_Weil
           `Investments `Pre_Trade `Market_Value_Times_Convexity_Fisher_Weil
           `Investments `Pre_Trade `Market_Value_Times_Duration_Modified
           `Investments `Pre_Trade `Market_Value_Times_Convexity_Modified
           `Investments `Pre_Trade `Market_Value_Times_Maturity
           `Investments `Pre_Trade `Market_Value_of_Maturing
           `Investments `Pre_Trade `Dividends_Declared
           `Investments `Pre_Trade `Dividends_Received
           `Investments `Pre_Trade `Dividends_Receivable
           `Investments `Pre_Trade `Consideration_Paid
           `Investments `Pre_Trade `Price_Paid
           `Investments `Pre_Trade `Consideration_Received
           `Investments `Pre_Trade `Price_Received
           `Investments `Pre_Trade `Principal_Received
           `Investments `Pre_Trade `Rent_Received
           `Investments `Pre_Trade `Property_Expenses_Paid
           `Investments `Pre_Trade `Derivatives_Cash_Flow
           `Economic `Pre_Trade `Income_Basis
           `Economic `Pre_Trade `Balance_Sheet_Value
           `Economic `Pre_Trade `Balance_Sheet_Value_HTM
           `Economic `Pre_Trade `Balance_Sheet_Value_LAR
           `Economic `Pre_Trade `Balance_Sheet_Value_AFS
           `Economic `Pre_Trade `Balance_Sheet_Value_Trading
           `Economic `Pre_Trade `Realized_Gain
           `Economic `Pre_Trade `Unrealized_Gain
           `Economic `Pre_Trade `Change_in_Unrealized_Gain
           `Economic `Pre_Trade `Accrued_Income
           `Economic `Pre_Trade `Income_Basis_of_Trades
           `Economic `Pre_Trade `Change_in_Income_Basis
           `Economic `Pre_Trade `Income_Received
           `Economic `Pre_Trade `Expenses_Paid
           `Economic `Pre_Trade `Net_Income_Earned
           `Economic `Pre_Trade `Income_Basis_FX_Effect
           `Economic `Pre_Trade `Accrued_Income_FX_Effect
           `Economic `Pre_Trade `Income_FX_Effect
           `Economic `Pre_Trade `Unrealized_Gain_FX_Effect
           `Economic `Pre_Trade `Appreciation
           `Economic `Pre_Trade `Depreciation
           `Economic `Pre_Trade `Realized_Gain_Positive
           `Economic `Pre_Trade `Realized_Gain_Negative
           `Economic `Pre_Trade `Unrealized_Gain_Positive
           `Economic `Pre_Trade `Unrealized_Gain_Negative
           `Economic `Pre_Trade `BzW
           `Economic `Pre_Trade `Fluctuation_Reserve
           `Economic `Pre_Trade `Amount_Invested
           `Economic `Pre_Trade `Hidden_Reserves
           `Economic `Pre_Trade `Hidden_Reserves_Positive
           `Economic `Pre_Trade `Hidden_Reserves_Negative
           `Economic `Pre_Trade `Balance_Sheet_Value_AV
           `Economic `Pre_Trade `Quantity_AV
           `Economic `Pre_Trade `Quantity_UV
           `Economic `Pre_Trade `HGB_Cost_AV
           `Economic `Pre_Trade `HGB_Cost_UV
           `Economic `Pre_Trade `Hidden_Reserves_AV
           `Solvency_II `Pre_Trade `Income_Basis
           `Solvency_II `Pre_Trade `Balance_Sheet_Value
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_HTM
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_LAR
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_AFS
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_Trading
           `Solvency_II `Pre_Trade `Realized_Gain
           `Solvency_II `Pre_Trade `Unrealized_Gain
           `Solvency_II `Pre_Trade `Change_in_Unrealized_Gain
           `Solvency_II `Pre_Trade `Accrued_Income
           `Solvency_II `Pre_Trade `Income_Basis_of_Trades
           `Solvency_II `Pre_Trade `Change_in_Income_Basis
           `Solvency_II `Pre_Trade `Income_Received
           `Solvency_II `Pre_Trade `Expenses_Paid
           `Solvency_II `Pre_Trade `Net_Income_Earned
           `Solvency_II `Pre_Trade `Income_Basis_FX_Effect
           `Solvency_II `Pre_Trade `Accrued_Income_FX_Effect
           `Solvency_II `Pre_Trade `Income_FX_Effect
           `Solvency_II `Pre_Trade `Unrealized_Gain_FX_Effect
           `Solvency_II `Pre_Trade `Appreciation
           `Solvency_II `Pre_Trade `Depreciation
           `Solvency_II `Pre_Trade `Realized_Gain_Positive
           `Solvency_II `Pre_Trade `Realized_Gain_Negative
           `Solvency_II `Pre_Trade `Unrealized_Gain_Positive
           `Solvency_II `Pre_Trade `Unrealized_Gain_Negative
           `Solvency_II `Pre_Trade `BzW
           `Solvency_II `Pre_Trade `Fluctuation_Reserve
           `Solvency_II `Pre_Trade `Amount_Invested
           `Solvency_II `Pre_Trade `Hidden_Reserves
           `Solvency_II `Pre_Trade `Hidden_Reserves_Positive
           `Solvency_II `Pre_Trade `Hidden_Reserves_Negative
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_AV
           `Solvency_II `Pre_Trade `Quantity_AV
           `Solvency_II `Pre_Trade `Quantity_UV
           `Solvency_II `Pre_Trade `HGB_Cost_AV
           `Solvency_II `Pre_Trade `HGB_Cost_UV
           `Solvency_II `Pre_Trade `Hidden_Reserves_AV
           `US_GAAP `Pre_Trade `Income_Basis
           `US_GAAP `Pre_Trade `Balance_Sheet_Value
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_HTM
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_LAR
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_AFS
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_Trading
           `US_GAAP `Pre_Trade `Realized_Gain
           `US_GAAP `Pre_Trade `Unrealized_Gain
           `US_GAAP `Pre_Trade `Change_in_Unrealized_Gain
           `US_GAAP `Pre_Trade `Accrued_Income
           `US_GAAP `Pre_Trade `Income_Basis_of_Trades
           `US_GAAP `Pre_Trade `Change_in_Income_Basis
           `US_GAAP `Pre_Trade `Income_Received
           `US_GAAP `Pre_Trade `Expenses_Paid
           `US_GAAP `Pre_Trade `Net_Income_Earned
           `US_GAAP `Pre_Trade `Income_Basis_FX_Effect
           `US_GAAP `Pre_Trade `Accrued_Income_FX_Effect
           `US_GAAP `Pre_Trade `Income_FX_Effect
           `US_GAAP `Pre_Trade `Unrealized_Gain_FX_Effect
           `US_GAAP `Pre_Trade `Appreciation
           `US_GAAP `Pre_Trade `Depreciation
           `US_GAAP `Pre_Trade `Realized_Gain_Positive
           `US_GAAP `Pre_Trade `Realized_Gain_Negative
           `US_GAAP `Pre_Trade `Unrealized_Gain_Positive
           `US_GAAP `Pre_Trade `Unrealized_Gain_Negative
           `US_GAAP `Pre_Trade `BzW
           `US_GAAP `Pre_Trade `Fluctuation_Reserve
           `US_GAAP `Pre_Trade `Amount_Invested
           `US_GAAP `Pre_Trade `Hidden_Reserves
           `US_GAAP `Pre_Trade `Hidden_Reserves_Positive
           `US_GAAP `Pre_Trade `Hidden_Reserves_Negative
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_AV
           `US_GAAP `Pre_Trade `Quantity_AV
           `US_GAAP `Pre_Trade `Quantity_UV
           `US_GAAP `Pre_Trade `HGB_Cost_AV
           `US_GAAP `Pre_Trade `HGB_Cost_UV
           `US_GAAP `Pre_Trade `Hidden_Reserves_AV
           `IFRS `Pre_Trade `Income_Basis
           `IFRS `Pre_Trade `Balance_Sheet_Value
           `IFRS `Pre_Trade `Balance_Sheet_Value_HTM
           `IFRS `Pre_Trade `Balance_Sheet_Value_LAR
           `IFRS `Pre_Trade `Balance_Sheet_Value_AFS
           `IFRS `Pre_Trade `Balance_Sheet_Value_Trading
           `IFRS `Pre_Trade `Realized_Gain
           `IFRS `Pre_Trade `Unrealized_Gain
           `IFRS `Pre_Trade `Change_in_Unrealized_Gain
           `IFRS `Pre_Trade `Accrued_Income
           `IFRS `Pre_Trade `Income_Basis_of_Trades
           `IFRS `Pre_Trade `Change_in_Income_Basis
           `IFRS `Pre_Trade `Income_Received
           `IFRS `Pre_Trade `Expenses_Paid
           `IFRS `Pre_Trade `Net_Income_Earned
           `IFRS `Pre_Trade `Income_Basis_FX_Effect
           `IFRS `Pre_Trade `Accrued_Income_FX_Effect
           `IFRS `Pre_Trade `Income_FX_Effect
           `IFRS `Pre_Trade `Unrealized_Gain_FX_Effect
           `IFRS `Pre_Trade `Appreciation
           `IFRS `Pre_Trade `Depreciation
           `IFRS `Pre_Trade `Realized_Gain_Positive
           `IFRS `Pre_Trade `Realized_Gain_Negative
           `IFRS `Pre_Trade `Unrealized_Gain_Positive
           `IFRS `Pre_Trade `Unrealized_Gain_Negative
           `IFRS `Pre_Trade `BzW
           `IFRS `Pre_Trade `Fluctuation_Reserve
           `IFRS `Pre_Trade `Amount_Invested
           `IFRS `Pre_Trade `Hidden_Reserves
           `IFRS `Pre_Trade `Hidden_Reserves_Positive
           `IFRS `Pre_Trade `Hidden_Reserves_Negative
           `IFRS `Pre_Trade `Balance_Sheet_Value_AV
           `IFRS `Pre_Trade `Quantity_AV
           `IFRS `Pre_Trade `Quantity_UV
           `IFRS `Pre_Trade `HGB_Cost_AV
           `IFRS `Pre_Trade `HGB_Cost_UV
           `IFRS `Pre_Trade `Hidden_Reserves_AV
           `US_Statutory `Pre_Trade `Income_Basis
           `US_Statutory `Pre_Trade `Balance_Sheet_Value
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_HTM
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_LAR
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_AFS
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_Trading
           `US_Statutory `Pre_Trade `Realized_Gain
           `US_Statutory `Pre_Trade `Unrealized_Gain
           `US_Statutory `Pre_Trade `Change_in_Unrealized_Gain
           `US_Statutory `Pre_Trade `Accrued_Income
           `US_Statutory `Pre_Trade `Income_Basis_of_Trades
           `US_Statutory `Pre_Trade `Change_in_Income_Basis
           `US_Statutory `Pre_Trade `Income_Received
           `US_Statutory `Pre_Trade `Expenses_Paid
           `US_Statutory `Pre_Trade `Net_Income_Earned
           `US_Statutory `Pre_Trade `Income_Basis_FX_Effect
           `US_Statutory `Pre_Trade `Accrued_Income_FX_Effect
           `US_Statutory `Pre_Trade `Income_FX_Effect
           `US_Statutory `Pre_Trade `Unrealized_Gain_FX_Effect
           `US_Statutory `Pre_Trade `Appreciation
           `US_Statutory `Pre_Trade `Depreciation
           `US_Statutory `Pre_Trade `Realized_Gain_Positive
           `US_Statutory `Pre_Trade `Realized_Gain_Negative
           `US_Statutory `Pre_Trade `Unrealized_Gain_Positive
           `US_Statutory `Pre_Trade `Unrealized_Gain_Negative
           `US_Statutory `Pre_Trade `BzW
           `US_Statutory `Pre_Trade `Fluctuation_Reserve
           `US_Statutory `Pre_Trade `Amount_Invested
           `US_Statutory `Pre_Trade `Hidden_Reserves
           `US_Statutory `Pre_Trade `Hidden_Reserves_Positive
           `US_Statutory `Pre_Trade `Hidden_Reserves_Negative
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_AV
           `US_Statutory `Pre_Trade `Quantity_AV
           `US_Statutory `Pre_Trade `Quantity_UV
           `US_Statutory `Pre_Trade `HGB_Cost_AV
           `US_Statutory `Pre_Trade `HGB_Cost_UV
           `US_Statutory `Pre_Trade `Hidden_Reserves_AV
           `HGB `Pre_Trade `Income_Basis
           `HGB `Pre_Trade `Balance_Sheet_Value
           `HGB `Pre_Trade `Balance_Sheet_Value_HTM
           `HGB `Pre_Trade `Balance_Sheet_Value_LAR
           `HGB `Pre_Trade `Balance_Sheet_Value_AFS
           `HGB `Pre_Trade `Balance_Sheet_Value_Trading
           `HGB `Pre_Trade `Realized_Gain
           `HGB `Pre_Trade `Unrealized_Gain
           `HGB `Pre_Trade `Change_in_Unrealized_Gain
           `HGB `Pre_Trade `Accrued_Income
           `HGB `Pre_Trade `Income_Basis_of_Trades
           `HGB `Pre_Trade `Change_in_Income_Basis
           `HGB `Pre_Trade `Income_Received
           `HGB `Pre_Trade `Expenses_Paid
           `HGB `Pre_Trade `Net_Income_Earned
           `HGB `Pre_Trade `Income_Basis_FX_Effect
           `HGB `Pre_Trade `Accrued_Income_FX_Effect
           `HGB `Pre_Trade `Income_FX_Effect
           `HGB `Pre_Trade `Unrealized_Gain_FX_Effect
           `HGB `Pre_Trade `Appreciation
           `HGB `Pre_Trade `Depreciation
           `HGB `Pre_Trade `Realized_Gain_Positive
           `HGB `Pre_Trade `Realized_Gain_Negative
           `HGB `Pre_Trade `Unrealized_Gain_Positive
           `HGB `Pre_Trade `Unrealized_Gain_Negative
           `Investments `Final `Quantity
           `Investments `Final `Cost_Value
           `Investments `Final `Constant_Yield_Amortized_Cost
           `Investments `Final `Market_Value
           `Investments `Final `Market_Value_QIS5_Shock_Up
           `Investments `Final `Market_Value_QIS5_Shock_Down
           `Investments `Final `Interest_Received
           `Investments `Final `Dividends_Received
           `Investments `Final `Rent_Received
           `Investments `Final `Accrued_Interest
           `Investments `Final `Consideration_Paid
           `Investments `Final `Price_Paid
           `Investments `Final `Accrued_Interest_Paid
           `Investments `Final `Consideration_Received
           `Investments `Final `Price_Received
           `Investments `Final `Accrued_Interest_Received
           `Investments `Final `Notional_Amount
           `Investments `Final `Market_Value_for_Fisher_Weil
           `Investments `Final `Market_Value_Times_Duration_Fisher_Weil
           `Investments `Final `Market_Value_Times_Convexity_Fisher_Weil
           `Investments `Final `Market_Value_Times_Duration_Modified
           `Investments `Final `Market_Value_Times_Convexity_Modified
           `Investments `Final `Market_Value_Times_Maturity
           `HGB `Final `Income_Basis
           `HGB `Final `Realized_Gain
           `HGB `Final `Unrealized_Gain
           `HGB `Final `Sell_Realized_Gain
           `HGB `Final `Reclassification_Gain
           `HGB `Final `Net_Ordinary_Income_Gain
           `HGB `Final `Balance_Sheet_Value
           `HGB `Final `Balance_Sheet_Value_HTM
           `HGB `Final `Balance_Sheet_Value_LAR
           `HGB `Final `Balance_Sheet_Value_AFS
           `HGB `Final `Balance_Sheet_Value_Trading
           `HGB `Final `Income_Basis_of_Purchases
           `HGB `Final `Change_in_Income_Basis
           `HGB `Final `Accrued_Income
           `HGB `Final `Accrued_Income_Paid
           `HGB `Final `Accrued_Income_Received
           `HGB `Final `Accrued_Expenses
           `HGB `Final `Accrued_Expenses_Received
           `HGB `Final `Accrued_Expenses_Paid
           `HGB `Final `Change_in_Accrued_Income
           `HGB `Final `Change_in_Accrued_Expenses
           `HGB `Final `Net_Income_Earned
           `HGB `Final `Change_in_Unrealized_Gain
           `HGB `Final `Appreciation
           `HGB `Final `Depreciation
           `HGB `Final `Realized_Gain_Positive
           `HGB `Final `Realized_Gain_Negative
           `HGB `Final `Unrealized_Gain_Positive
           `HGB `Final `Unrealized_Gain_Negative
           `HGB `Final `Total_Gain
           `HGB `Final `BzW
           `HGB `Final `Fluctuation_Reserve
           `HGB `Final `Amount_Invested
           `HGB `Final `Hidden_Reserves
           `HGB `Final `Hidden_Reserves_Positive
           `HGB `Final `Hidden_Reserves_Negative
           `HGB `Final `Balance_Sheet_Value_AV
           `HGB `Final `Quantity_AV
           `HGB `Final `Quantity_UV
           `HGB `Final `Hidden_Reserves_AV
           `Economic `Final `Income_Basis
           `Economic `Final `Realized_Gain
           `Economic `Final `Unrealized_Gain
           `Economic `Final `Sell_Realized_Gain
           `Economic `Final `Reclassification_Gain
           `Economic `Final `Net_Ordinary_Income_Gain
           `Economic `Final `Balance_Sheet_Value
           `Economic `Final `Balance_Sheet_Value_HTM
           `Economic `Final `Balance_Sheet_Value_LAR
           `Economic `Final `Balance_Sheet_Value_AFS
           `Economic `Final `Balance_Sheet_Value_Trading
           `Economic `Final `Income_Basis_of_Purchases
           `Economic `Final `Change_in_Income_Basis
           `Economic `Final `Accrued_Income
           `Economic `Final `Accrued_Income_Paid
           `Economic `Final `Accrued_Income_Received
           `Economic `Final `Accrued_Expenses
           `Economic `Final `Accrued_Expenses_Received
           `Economic `Final `Accrued_Expenses_Paid
           `Economic `Final `Change_in_Accrued_Income
           `Economic `Final `Change_in_Accrued_Expenses
           `Economic `Final `Net_Income_Earned
           `Economic `Final `Change_in_Unrealized_Gain
           `Economic `Final `Appreciation
           `Economic `Final `Depreciation
           `Economic `Final `Realized_Gain_Positive
           `Economic `Final `Realized_Gain_Negative
           `Economic `Final `Unrealized_Gain_Positive
           `Economic `Final `Unrealized_Gain_Negative
           `Economic `Final `Total_Gain
           `Solvency_II `Final `Income_Basis
           `Solvency_II `Final `Realized_Gain
           `Solvency_II `Final `Unrealized_Gain
           `Solvency_II `Final `Sell_Realized_Gain
           `Solvency_II `Final `Reclassification_Gain
           `Solvency_II `Final `Net_Ordinary_Income_Gain
           `Solvency_II `Final `Balance_Sheet_Value
           `Solvency_II `Final `Balance_Sheet_Value_HTM
           `Solvency_II `Final `Balance_Sheet_Value_LAR
           `Solvency_II `Final `Balance_Sheet_Value_AFS
           `Solvency_II `Final `Balance_Sheet_Value_Trading
           `Solvency_II `Final `Income_Basis_of_Purchases
           `Solvency_II `Final `Change_in_Income_Basis
           `Solvency_II `Final `Accrued_Income
           `Solvency_II `Final `Accrued_Income_Paid
           `Solvency_II `Final `Accrued_Income_Received
           `Solvency_II `Final `Accrued_Expenses
           `Solvency_II `Final `Accrued_Expenses_Received
           `Solvency_II `Final `Accrued_Expenses_Paid
           `Solvency_II `Final `Change_in_Accrued_Income
           `Solvency_II `Final `Change_in_Accrued_Expenses
           `Solvency_II `Final `Net_Income_Earned
           `Solvency_II `Final `Change_in_Unrealized_Gain
           `Solvency_II `Final `Appreciation
           `Solvency_II `Final `Depreciation
           `Solvency_II `Final `Realized_Gain_Positive
           `Solvency_II `Final `Realized_Gain_Negative
           `Solvency_II `Final `Unrealized_Gain_Positive
           `Solvency_II `Final `Unrealized_Gain_Negative
           `Solvency_II `Final `Total_Gain
           `US_GAAP `Final `Income_Basis
           `US_GAAP `Final `Realized_Gain
           `US_GAAP `Final `Unrealized_Gain
           `US_GAAP `Final `Sell_Realized_Gain
           `US_GAAP `Final `Reclassification_Gain
           `US_GAAP `Final `Net_Ordinary_Income_Gain
           `US_GAAP `Final `Balance_Sheet_Value
           `US_GAAP `Final `Balance_Sheet_Value_HTM
           `US_GAAP `Final `Balance_Sheet_Value_LAR
           `US_GAAP `Final `Balance_Sheet_Value_AFS
           `US_GAAP `Final `Balance_Sheet_Value_Trading
           `US_GAAP `Final `Income_Basis_of_Purchases
           `US_GAAP `Final `Change_in_Income_Basis
           `US_GAAP `Final `Accrued_Income
           `US_GAAP `Final `Accrued_Income_Paid
           `US_GAAP `Final `Accrued_Income_Received
           `US_GAAP `Final `Accrued_Expenses
           `US_GAAP `Final `Accrued_Expenses_Received
           `US_GAAP `Final `Accrued_Expenses_Paid
           `US_GAAP `Final `Change_in_Accrued_Income
           `US_GAAP `Final `Change_in_Accrued_Expenses
           `US_GAAP `Final `Net_Income_Earned
           `US_GAAP `Final `Change_in_Unrealized_Gain
           `US_GAAP `Final `Appreciation
           `US_GAAP `Final `Depreciation
           `US_GAAP `Final `Realized_Gain_Positive
           `US_GAAP `Final `Realized_Gain_Negative
           `US_GAAP `Final `Unrealized_Gain_Positive
           `US_GAAP `Final `Unrealized_Gain_Negative
           `US_GAAP `Final `Total_Gain
           `IFRS `Final `Income_Basis
           `IFRS `Final `Realized_Gain
           `IFRS `Final `Unrealized_Gain
           `IFRS `Final `Sell_Realized_Gain
           `IFRS `Final `Reclassification_Gain
           `IFRS `Final `Net_Ordinary_Income_Gain
           `IFRS `Final `Balance_Sheet_Value
           `IFRS `Final `Balance_Sheet_Value_HTM
           `IFRS `Final `Balance_Sheet_Value_LAR
           `IFRS `Final `Balance_Sheet_Value_AFS
           `IFRS `Final `Balance_Sheet_Value_Trading
           `IFRS `Final `Income_Basis_of_Purchases
           `IFRS `Final `Change_in_Income_Basis
           `IFRS `Final `Accrued_Income
           `IFRS `Final `Accrued_Income_Paid
           `IFRS `Final `Accrued_Income_Received
           `IFRS `Final `Accrued_Expenses
           `IFRS `Final `Accrued_Expenses_Received
           `IFRS `Final `Accrued_Expenses_Paid
           `IFRS `Final `Change_in_Accrued_Income
           `IFRS `Final `Change_in_Accrued_Expenses
           `IFRS `Final `Net_Income_Earned
           `IFRS `Final `Change_in_Unrealized_Gain
           `IFRS `Final `Appreciation
           `IFRS `Final `Depreciation
           `IFRS `Final `Realized_Gain_Positive
           `IFRS `Final `Realized_Gain_Negative
           `IFRS `Final `Unrealized_Gain_Positive
           `IFRS `Final `Unrealized_Gain_Negative
           `IFRS `Final `Total_Gain
           `US_Statutory `Final `Income_Basis
           `US_Statutory `Final `Realized_Gain
           `US_Statutory `Final `Unrealized_Gain
           `US_Statutory `Final `Sell_Realized_Gain
           `US_Statutory `Final `Reclassification_Gain
           `US_Statutory `Final `Net_Ordinary_Income_Gain
           `US_Statutory `Final `Balance_Sheet_Value
           `US_Statutory `Final `Balance_Sheet_Value_HTM
           `US_Statutory `Final `Balance_Sheet_Value_LAR
           `US_Statutory `Final `Balance_Sheet_Value_AFS
           `US_Statutory `Final `Balance_Sheet_Value_Trading
           `US_Statutory `Final `Income_Basis_of_Purchases
           `US_Statutory `Final `Change_in_Income_Basis
           `US_Statutory `Final `Accrued_Income
           `US_Statutory `Final `Accrued_Income_Paid
           `US_Statutory `Final `Accrued_Income_Received
           `US_Statutory `Final `Accrued_Expenses
           `US_Statutory `Final `Accrued_Expenses_Received
           `US_Statutory `Final `Accrued_Expenses_Paid
           `US_Statutory `Final `Change_in_Accrued_Income
           `US_Statutory `Final `Change_in_Accrued_Expenses
           `US_Statutory `Final `Net_Income_Earned
           `US_Statutory `Final `Change_in_Unrealized_Gain
           `US_Statutory `Final `Appreciation
           `US_Statutory `Final `Depreciation
           `US_Statutory `Final `Realized_Gain_Positive
           `US_Statutory `Final `Realized_Gain_Negative
           `US_Statutory `Final `Unrealized_Gain_Positive
           `US_Statutory `Final `Unrealized_Gain_Negative
           `US_Statutory `Final `Total_Gain
           `Investments `Pre_Trade `IRR
           `Investments `Pre_Trade `Risk_Adjusted_IRR
           `Investments `Final `IRR
           `Investments `Final `Risk_Adjusted_IRR);`Module `Timing `Item];)
         (`J
          .((`Portfolio
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Portfolio;,,`All];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Portfolio];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Portfolio];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Portfolio;,,`All];)
               (`F
                ,`Portfolio
                ))
             )
            (`Asset_Class
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Asset_Class;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Asset_Class];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Asset_Class];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Asset_Class;,0#`];)
               (`F
                ,`Asset_Class
                ))
             ))
          )
         (`U
          `Portfolio `Asset_Class
          )
         (`XX
          `IRR `Risk_Adjusted_IRR `Quantity `Notional_Amount `Cost_Value `Constant_Yield_Amortized_Cost `Market_Value `Market_Value_QIS5_Shock_Up `Market_Value_QIS5_Shock_Down `Constant_Yield_Adjustment `Accrued_Interest `Interest_Received `Return_of_Market_Value `Market_Value_for_Fisher_Weil `Market_Value_Times_Duration_Fisher_Weil `Market_Value_Times_Convexity_Fisher_Weil `Market_Value_Times_Duration_Modified `Market_Value_Times_Convexity_Modified `Market_Value_Times_Maturity `Market_Value_of_Maturing `Dividends_Declared `Dividends_Received `Dividends_Receivable `Consideration_Paid `Price_Paid `Consideration_Received `Price_Received `Principal_Received `Rent_Received `Property_Expenses_Paid `Derivatives_Cash_Flow `Accrued_Interest_Paid `Accrued_Interest_Received `Income_Basis `Balance_Sheet_Value `Balance_Sheet_Value_HTM `Balance_Sheet_Value_LAR `Balance_Sheet_Value_AFS `Balance_Sheet_Value_Trading `Realized_Gain `Unrealized_Gain `Change_in_Unrealized_Gain `Accrued_Income `Income_Basis_of_Trades `Change_in_Income_Basis `Income_Received `Expenses_Paid `Net_Income_Earned `Income_Basis_FX_Effect `Accrued_Income_FX_Effect `Income_FX_Effect `Unrealized_Gain_FX_Effect `Appreciation `Depreciation `Realized_Gain_Positive `Realized_Gain_Negative `Unrealized_Gain_Positive `Unrealized_Gain_Negative `BzW `Fluctuation_Reserve `Amount_Invested `Hidden_Reserves `Hidden_Reserves_Positive `Hidden_Reserves_Negative `Balance_Sheet_Value_AV `Quantity_AV `Quantity_UV `HGB_Cost_AV `HGB_Cost_UV `Hidden_Reserves_AV `Unrealized_Gain_FX `Unrealized_Gain_nonFX `Realized_Gain_IMR `Realized_Gain_AVR `Sell_Realized_Gain `Reclassification_Gain `Net_Ordinary_Income_Gain `Income_Basis_of_Purchases `Accrued_Income_Paid `Accrued_Income_Received `Accrued_Expenses `Accrued_Expenses_Received `Accrued_Expenses_Paid `Change_in_Accrued_Income `Change_in_Accrued_Expenses `Total_Gain
          )))
      (`Accounting
       .((`Entity
          `Entity_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Entity;,`Any_Entity_];))
         (`Standard
          `Economic
          .,(`V;{[label;p;x]
  g:`None,.G`submodules
  if[label~"Module"
    if[`HGB_Life _in g; g,:`HGB]
    if[`US_Statutory_Life _in g; g,:`US_Statutory]
    ]
 :[~x _in g;(1;("&0 is not an active &1";$x;label))]}["Standard"];))
         (`Statement;`Income_Statement;.())
         (`Timing;`Final;.())
         (`Item;`A_1_Fixed_Income;.())
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cell
             .((`Entity
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Entity_ `Any_Entity_ `Entity_1
                   ))
                )
               (`Standard
                .((`c;`combo;)
                  (`o
                   `Economic `Solvency_II `US_GAAP `IFRS `US_Statutory `US_Statutory_Life `HGB `HGB_Life
                   ))
                )
               (`Statement
                .((`c;`combo;)
                  (`o
                   `Assets `Liabilities `Capital_and_Surplus `Income_Statement `Change_in_Surplus
                   ))
                )
               (`Timing
                .((`c;`combo;)
                  (`o
                   `Pre_Trade_Pre_Supplemental `Pre_Trade `Final
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `A_01_Net_Earned_Premium `A_01_a_Gross_Written_Premium `A_01_b_Ceded_Written_Premium `A_01_c_Change_in_Gross_Unearned_Premium `A_01_d_Change_in_Ceded_Unearned_Premium `A_02_Premiums_from_Reserve_for_Premium_Refunds `A_02_Technical_Interest `A_03_Income_from_Investments `A_03_Other_Underwriting_Income `A_03_a_Income_from_Affiliates `A_03_b_Realized_Gains `A_03_c_Other_Investment_Income `A_04_Net_Incurred_Claims `A_04_Non_Realized_Gain_from_Investments `A_04_a_Net_Claims_Paid `A_04_a_aa_Gross_Claims_Paid `A_04_a_bb_Ceded_Claims_Paid `A_04_b_Change_in_Net_Loss_and_LAE_Reserves `A_04_b_aa_Change_in_Gross_Loss_and_LAE_Reserves `A_04_b_bb_Change_in_Ceded_Loss_and_LAE_Reserves `A_05_Change_in_Other_Net_Underwriting_Provisions `A_05_Other_Underwriting_Income `A_06_Net_Claims_Incurred `A_06_Payments_to_Reserve_for_Premium_Refunds `A_06_a_Net_Claims_Paid `A_06_b_Change_in_Net_Provision_for_Outstanding_Claims `A_07_Change_in_Other_Net_Underwriting_Provisions `A_07_Underwriting_Expenses `A_07_a_Gross_Underwriting_Expenses `A_07_b_Ceded_Underwriting_Expenses `A_08_Other_Underwriting_Expenses `A_08_Payments_to_Reserve_for_Premium_Refunds `A_09_Subtotal `A_09_Underwriting_Expenses `A_10_Change_in_Claim_Equalization_Reserves `A_10_Investment_Expenses `A_11_Non_Realized_Loss_from_Investments `A_11_Underwriting_Result `A_12_Other_Underwriting_Expenses `A_13_Underwriting_Result `A_1_1_Preferred_Stock `A_1_2_Common_Stock `A_1_3_Special_Surplus `A_1_Fixed_Income `A_1_Gross_Earned_Premium `A_1_Paid_Up_Ordinary_Share_Capital `A_1_Subscribed_Capital `A_1_TP_Best_Estimate_Non_Life_Excluding_Health `A_1_Unpaid_Losses `A_1_a_Gross_Written_Premium `A_1_b_Change_in_Gross_Unearned_Premium `A_1a_Fixed_Income_HTM `A_1b_Fixed_Income_LAR `A_1c_Fixed_Income_AFS `A_1d_Fixed_Income_Trading `A_2_Assumed_Incurred_Premium `A_2_Called_Up_Ordinary_Share_Capital `A_2_Capital_Reserve `A_2_Real_Estate `A_2_Risk_Margin_Non_Life_Excluding_Health `A_2_Unpaid_LAE `A_2_a_Assumed_Paid_Premium `A_2_b_Change_in_Assumed_Accrued_Premium `A_3_1_Legal_Reserve `A_3_2_Other_Revenue_Reserves `A_3_Ceded_Earned_Premium `A_3_Mortgages `A_3_Policyholders_Account_Balances `A_3_Revenue_Reserve `A_3_a_Ceded_Written_Premium `A_3_b_Change_in_Ceded_Unearned_Premium `A_4_Ceded_Incurred_Premium `A_4_Equities `A_4_Net_Retained_Profit `A_4_Other_Policyholder_Funds_Payable `A_4_a_Ceded_Paid_Premium `A_4_b_Change_in_Ceded_Accrued_Premium `A_4a_Equities_Unaffiliated `A_4a_Equities_Unaffiliated_AFS `A_4b_Equities_Affiliated `A_4c_Equities_Unaffiliated_Trading `A_5_Derivatives `A_5_Future_Policy_Benefits `A_6_Other_Investments `A_6_Policy_Claims `A_7_Policyholder_Dividends_Payable `A_7_Short_Term_Investments `A_Goodwill `A_Gross_Technical_Provisions_Non_Life_Excluding_Health `A_Investments `A_Net_Earned_Premium `A_Ordinary_Share_Capital `A_Reserves_for_Benefits_Claims_Expenses `A_Shareholders_Equity `A_Subscribed_Capital_Unpaid `B_01_Income_from_Investments `B_01_Other_Income `B_02_Investment_Expenses `B_02_Other_Expenses `B_03_Ordinary_Result `B_03_Technical_Interest `B_04_Extraordinary_Income `B_04_Other_Income `B_05_Extraordinary_Expenses `B_05_Other_Expenses `B_06_Extraordinary_Result `B_06_Result_from_Ordinary_Business_Activities `B_07_Extraordinary_Income `B_07_Taxes_On_Income `B_08_Extraordinary_Expenses `B_08_Other_Taxes `B_09_Extraordinary_Result `B_09_Profit_Transfers `B_10_Net_Income `B_10_Taxes_on_Income `B_11_Other_Taxes `B_11_Retained_Profit_Carried_Forward `B_12_Net_Income `B_12_Withdrawal_from_Capital_Reserve `B_12_a_Withdrawal_from_Preferred_Stock `B_12_b_Withdrawal_from_Common_Stock `B_12_c_Withdrawal_from_Special_Surplus `B_12_d_Withdrawal_from_Capital_Reserve `B_13_Retained_Profit_Carried_Forward `B_13_Withdrawal_from_Revenue_Reserve `B_13_a_Withdrawal_from_Legal_Reserve `B_13_b_Withdrawal_from_Other_Revenue_Reserves `B_13_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_13_d_Withdrawal_from_Shareholder_Equity `B_14_Net_Retained_Profit `B_14_Withdrawal_from_Capital_Reserve `B_14_a_Withdrawal_from_Preferred_Stock `B_14_b_Withdrawal_from_Common_Stock `B_14_c_Withdrawal_from_Special_Surplus `B_14_d_Withdrawal_from_Capital_Reserve `B_15_Withdrawal_from_Revenue_Reserve `B_15_a_Withdrawal_from_Legal_Reserve `B_15_b_Withdrawal_from_Other_Revenue_Reserves `B_15_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_16_Net_Retained_Profit `B_1_Paid_Up_Initial_Fund `B_1_TP_Best_Estimate_Health_Similar_To_Non_Life `B_2_Called_Up_Initial_Fund `B_2_Risk_Margin_Health_Similar_To_Non_Life `B_3_Callable_Up_Initial_Fund `B_Cash `B_Equity_from_Profit_Participation_Rights `B_Fee_Income_UL_Annuity_Policies `B_Gross_Technical_Provisions_Health_Similar_To_Non_Life `B_Initial_Fund `B_Intangible_Assets `B_Other_Intangible_Assets `B_Unearned_Premiums `C_1_Net_Investment_Income `C_1_Property `C_1_TP_Best_Estimate_Health_Similar_To_Life `C_2_Investments_in_Affiliates `C_2_Realized_Investment_Gains `C_2_Risk_Margin_Health_Similar_To_Life `C_3_1_Shares `C_3_1_a_Directly_Held_Shares `C_3_1_b_Fonds `C_3_2_Bearer_Bonds `C_3_3_Mortgages `C_3_4_Other_Loans `C_3_5_Deposits_with_Banks `C_3_6_Miscellaneous_Other_Investments `C_3_Other_Investments_Total `C_Accrued_Investment_Income `C_Drafts_Outstanding `C_Gross_Technical_Provisions_Health_Similar_To_Life `C_Investments `C_Profit_from_Investments `C_Property_Plant_Equipment_Held_For_Own_Use `C_Share_Premium_Account `C_Subordinate_Liabilities `Change_in_Shareholders_Equity `D_10_Derivatives `D_11_Long_Term_Bank_Deposits `D_12_Other_Investments `D_1_Property_Other_Than_Own_Use `D_1_TP_Best_Estimate_Life_Excluding_Health_And_Unit_Linked `D_2_Participations `D_2_Risk_Margin_Life_Excluding_Health_And_Unit_Linked `D_3_Equities_Other_Than_Participations_Listed `D_4_Equities_Other_Than_Participations_Unlisted `D_5_Bonds_Government_And_Multilateral_Banks `D_6_Bonds_Corporate_Asset_Backed_Securities `D_7_Bonds_Corporate_Other `D_8_Structured_Notes `D_9_Investment_Funds `D_Deposits `D_Funds_Held `D_Gross_Technical_Provisions_Life_Excluding_Health_And_Unit_Linked `D_Investments_Other_Than_Assets_Held_For_Unit_Linked_Funds `D_Other_Income `D_Retained_Earnings `D_Separate_Account_Investments `D_Special_Items_with_Reserve_Character `E_1_Adjustments_To_Assets `E_1_Net_Unearned_Premium `E_1_Receivable_on_Direct_Insurance `E_1_TP_Best_Estimate_Unit_Linked_Funds `E_1_Underwriting_Expenses_Payable `E_1_a_Gross_Unearned_Premium `E_1_b_Ceded_Unearned_Premium `E_2_Accrued_Underwriting_Expenses `E_2_Adjustments_To_Technical_Provisions `E_2_Net_Premium_Reserves `E_2_Receivable_on_Reinsurance `E_2_Risk_Margin_Unit_Linked_Funds `E_2_a_Gross_Premium_Reserves `E_2_b_Ceded_Premium_Reserves `E_3_Expected_Profit_In_Future_Premiums `E_3_Investment_Expenses_Payable `E_3_Net_Provision_for_Outstanding_Claims `E_3_Other_Receivables `E_3_a_Gross_Provision_for_Outstanding_Claims `E_3_b_Ceded_Provision_for_Outstanding_Claims `E_3_c_Net_Drafts_Outstanding `E_4_Accrued_Investment_Expenses `E_4_Adjustments_To_Other_Liabilities `E_4_Net_Reserve_for_Premium_Refunds `E_4_a_Gross_Reserve_for_Premium_Refunds `E_4_b_Ceded_Reserve_for_Premium_Refunds `E_5_Claim_Equalization_Reserves `E_5_Other_Adjustments `E_6_Other_Insurance_Reserves `E_6_a_Other_Gross_Insurance_Reserves `E_6_b_Other_Ceded_Insurance_Reserves `E_Accrued_Expenses_and_Other `E_Assets_Held_For_Unit_Linked_Funds `E_Deferred_Policy_Acquisition_Costs `E_Gross_Technical_Provisions_Unit_Linked_Funds `E_Interest_Credited `E_Reconciliation_Reserve `E_Total_Amounts_Receivable `E_Underwriting_Reserves `F_1_Fixed_Assets_and_Inventories `F_1_Gross_Benefits_and_Losses_Paid `F_2_Ceded_Benefits_and_Losses_Paid `F_2_Current_Bank_Accounts `F_3_Miscellaneous_Other_Assets `F_Cash_Deposits_From_Reinsurers `F_Cash_Deposits_To_Cedants `F_Net_Benefits_and_Losses_Paid `F_Prepaid_Reinsurance_Premiums `F_Reinsurance_Balances_Payable `F_Reserves_For_Separate_Accounts `F_Surplus_Funds_Expected_Profit_In_Future_Premiums `F_Total_Other_Assets `G_1_Accrued_Interest_and_Rent `G_1_Change_in_Gross_Benefit_and_Loss_Reserves `G_1_Provision_for_Pension_Liabilities `G_1_Uncollateralized_Loans_Made `G_2_Change_in_Ceded_Benefit_and_Loss_Reserves `G_2_Collateralized_Loans_Made_Other_Than_Loans_On_Policies `G_2_Other_Prepaid_Expenses `G_2_Taxes_Payable `G_3_Ceded_Uncollectible_Loss_Accrual `G_3_Intra_Company_Liabilities `G_3_Loans_On_Policies `G_4_Assumed_Uncollectible_Loss_Accrual `G_Change_in_Net_Benefit_and_Loss_Reserves `G_Mortgages_And_Loans_Made `G_Other_Paid_In_Capital_Instruments `G_Other_Provisions `G_Premiums_Receivable `G_Reinsurance_Accounts_Payable `G_Shareholder_Dividends_Payable `G_Total_Prepaid_Expenses `H_1_Gross_LAE_Incurred `H_1_Reinsurance_Share_Of_TP_Non_Life_Excluding_Health `H_1_a_Gross_LAE_Paid `H_1_b_Change_in_Gross_LAE_Reserves `H_2_Ceded_LAE_Incurred `H_2_Reinsurance_Share_Of_TP_Health_Similar_To_Non_Life `H_2_a_Ceded_LAE_Paid `H_2_b_Change_in_Ceded_LAE_Reserves `H_2_c_Ceded_Uncollectible_LAE_Accrual `H_2_d_Assumed_Uncollectible_LAE_Accrual `H_3_Reinsurance_Share_Of_TP_Health_Similar_To_Life `H_4_Reinsurance_Share_Of_TP_Life_Excluding_Health_And_Unit_Linked `H_5_Reinsurance_Share_Of_TP_Life_Unit_Linked `H_6_Other_Reinsurance_Recoverables `H_Deferred_Tax_Liability `H_Derivatives `H_Net_LAE_Incurred `H_Preference_Shares `H_Reinsurance_Balances_Receivable `H_Reinsurance_Recoverables `H_Total_Assets `I_1_Amounts_Payable_on_Direct_Insurance `I_1_Policy_Acquisition_Costs_Paid `I_1_Unpaid_Benefits_and_Losses_and_LAE_Recoverable `I_1_a_Unpaid_Benefits_and_Losses_Recoverable `I_1_b_Unpaid_LAE_Recoverable `I_2_Amounts_Payable_on_Reinsurance `I_2_Change_in_DAC `I_2_Provision_for_Reinsurance `I_3_Contingent_Commissions `I_3_Liabilities_to_Banks `I_4_Debt_and_Notes `I_5_Miscellaneous_Liabilities `I_Debt `I_Deferred_Tax_Liabilities `I_Policy_Acquisition_Costs `I_Reinsurance_Recoverable `I_SPV_Recoverables `I_Subordinated_Liabilities `I_Total_Other_Liabilities `J_1_Capital_Notes `J_2_Surplus_Notes `J_Deferred_Tax_Asset `J_Financing_Costs `J_Intermediaries_Recoverables `J_Notes `J_Other_Expenses `J_Provisions_Other_Than_Technical_Provisions `J_Subordinated_Mutual_Member_Accounts `K_1_Dividends_to_Policyholders `K_2_Depreciation `K_3_Foreign_Exchange_Effect `K_Amounts_Owed_To_Credit_Institutions `K_Deferred_Income `K_Insurance_Recoverables_Excluding_Intermediaries `K_Other `K_Other_Items_Not_Specified_Above `K_Other_Liabilities `K_Property_Plant_and_Equipment `L01__Aggregate_Reserve_For_Life_Contracts `L01__Bonds `L01__Losses `L01__Premiums_And_Annuity_Considerations `L01__Premiums_Earned `L02__Aggregate_Reserve_For_AH_Contracts `L02__Considerations_For_Supplementary_Contracts_With_Life `L02__Losses_Incurred `L02__Reinsurance_Payable `L02a_Preferred_Stocks `L02b_Common_Stocks `L03__Liability_For_Deposit_Type_Contracts `L03__Loss_Adjustment_Expenses `L03__Loss_Expenses_Incurred `L03__Mortgages `L03__Net_Investment_Income `L03a_Investment_Income `L03b_Investment_Expenses `L03c_Interest_Paid `L03x_Losses_LAE `L04__Amortization_Of_IMR `L04__Commissions_Payable `L04__Contract_Claims `L04__Other_UW_Expenses `L04a_Occupied_Real_Estate `L04a__Life_Contract_Claims `L04b_Real_Estate_Held_For_Income `L04b__AH_Contract_Claims `L04c_Real_Estate_For_Sale `L05__AWI_UW_Deductions `L05__Cash `L05__Other_Expenses `L05__Policyholder_Dividends `L05__Separate_Accounts_Net_Operation_Gain `L06__Commissions_and_Expense_Allowances_On_Reinsurance_Ceded `L06__Contract_Loans `L06__Provision_For_Policyholder_Dividends_And_Coupons_Payable_In_Following_Year `L06__Taxes_Licenses_Fees `L06__Total_UW_Deductions `L07__Amount_Provisionally_Held_For_Deferred_Dividend_Policies_Not_Included_In_Line_6 `L07__Net_Income_of_Protected_Cells `L07__Other_Investments `L07__Reserve_Adjustments_On_Reinsurance_Ceded `L07a__Federal_Income_Taxes `L07b__Net_Deferred_Tax_Liability `L08__Borrowed_Money `L08__Miscellaneous_Income `L08__Net_UW_Gain `L08__Premiums_And_Annuity_Considerations_For_Life_And_AH_Contracts_Received_In_Advance `L08__Receivable_For_Securities `L08a__Income_From_Fees_From_Separate_Accounts `L08b__Charges_And_Fees_For_Deposit_Type_Contracts `L08c__AWI_For_Miscellaneous_Income `L09__AWI_Investments `L09__Contract_Liabilities_Not_Included_Elsewhere `L09__Investment_Income_Earned `L09__Total_Lines_1_To_8 `L09__Unearned_Premium `L09a_Net_Investment_Income_Earned `L09a__Surrender_Values_On_Canceled_Contracts `L09b_Investment_Expenses `L09b__Provision_For_Experience_Rating_Refunds `L09c_Interest_Paid `L09c__Other_Amounts_Payable_On_Reinsurance `L09d__IMR `L09x_Gross_Unearned_Premium `L09y_Deferred_Acquisition_Costs `L10__Advance_Premiums `L10__Cash_and_Investments_Subtotal `L10__Commissions_Due_And_Accrued `L10__Death_Benefits `L10__Realized_Capital_Gains `L11__Commissions_And_Expense_Allowances_Payable_On_reinsurance_Assumed `L11__Investment_Gain `L11__Matured_Endowments `L11__Title_Plants `L11a_Stockholder_Dividends `L11b_Policyholder_Dividends `L12__Annuity_Benefits `L12__Ceded_Premium_Payable `L12__General_Expenses_Due_and_Accrued `L12__Investment_Income_Due `L12__Net_Gain_PAB_Charged_Off `L13__Disability_Benefits_And_Benefits_Under_AH_Contracts `L13__Finance_Service_Charges `L13__Funds_Held `L13__Transfers_To_Separate_Accounts_Due_And_Accrued `L13a_PAB_In_Collection `L13b_PAB_Deferred `L13c_Accrued_Retro_Premium `L14__AWI_Misc_Income `L14__Amounts_Withheld `L14__Coupons_Guaranteed_Annual_Pure_Endowments `L14__Taxes_Licenses_Fees_Due_and_Accrued `L14a__Reinsurance_Recoverable `L14b__Funds_Deposited `L14c__Other_Reinsurance_Recoverable `L15__Amounts_Receivable_Relating_To_Uninsured_Plans `L15__Remittances `L15__Surrender_Benefits_And_Withdrawals_For_Life_Contracts `L15__Total_Other_Income `L15a__Current_Federal_And_Foreign_Income_Taxes_Including_Taxes_On_Realized_Capital_Gains `L15b__Net_Deferred_Tax_Liability `L16__Group_Conversions `L16__Income_B4_Divs_Taxes `L16__Provision_Reinsurance `L16__Unearned_Investment_Income `L16a__Tax_Recoverable `L16b__Net_Deferred_Tax_Asset `L17__Amounts_Withheld_By_Company `L17__Guarantee_Funds `L17__Interest_And_Adjustments_On_Contracts_Or_Deposit_Funds `L17__Net_FX_Adjustments `L17__Policyholder_Dividends `L18__Amounts_Held_For_Agents_Acount `L18__Drafts_Outstanding `L18__EDP_Equipment `L18__Income_B4_Taxes `L18__Payments_On_Supplementary_Contracts_With_Life_Contingencies `L19__Federal_Income_Taxes `L19__Furniture_and_Equipment `L19__Increase_In_Aggregate_Reserves_For_Life_And_AH `L19__Payable_PSA `L19__Remittances `L20__Net_Adj_Foreign_Exchange `L20__Net_FX_Adjustments `L20__Net_Income `L20__Payable_For_Securities `L20__Total_Lines_10_To_19 `L21__Amounts_Held_Under_Uninsured_Plans `L21__Commissions `L21__Liability_For_Benefits_For_Employees_And_Agents `L21__PP_Policyholder_Surplus `L21__Receivable_PSA `L22__A_H_Receivable `L22__Borrowed_Money `L22__Capital_Notes `L22__Commissions_And_Expense_Allowances_On_Reinsurance_Assumed `L22__Net_Income `L23_Stockholder_Dividends `L23__AWI `L23__AWI_Other `L23__General_Insurance_Expenses `L23__Other_Non_Admitted `L24__AWI_Other `L24__Assets_Total `L24__Ch_Unrealized_Capital_Gains `L24__Insurance_Taxes_Licenses_And_Fees `L24__Liabilities_Total `L24__Miscellaneous_Liabilities `L24a__AVR `L24b__Reinsurance_On_Unauthorized_Companies `L24c__Funds_Held_Under_Reinsurance_Treaties_With_Unauthorized_Reinsurers `L24d__Payable_To_Parent_Subsidiaries_And_Affiliates `L24e__Drafts_Outstanding `L24f__Liability_For_Amounts_Held_Under_Uninsured_Plans `L24g__Funds_Held_Under_Coinsurance `L24h__Payable_For_Securities `L24i__Capital_Notes `L24x_Assets_excluding_DTA `L25__AWI `L25__Assets_Total `L25__Ch_FX_Adjustment `L25__Increase_In_Loading_On_Deferred_And_Uncollected_Premiums `L25x_Assets_excluding_DTA `L26__Ch_Net_Deferred_Tax `L26__Net_Transfer_To_Separate_Accounts_Net_Of_Reinsurance `L26__Total_Liabilities_Excluding_Separate_Accounts `L27__AWI_For_Deductions `L27__AWI_Special_Surplus `L27__Ch_Non_Admitted_Assets `L27__From_Separate_Accounts `L28__Ch_Provision_Reinsurance `L28__Common_Capital_Stock `L28__Total_Liabilities `L28__Total_Lines_20_To_27 `L29__Ch_Surplus_Notes `L29__Common_Capital_Stock `L29__Net_Gain_Before_Dividends_To_Policyholders_And_Taxes `L29__Preferred_Capital_Stock `L30__AWI_Other `L30__Dividends_To_Policyholders `L30__Preferred_Capital_Stock `L31__AWI_Other `L31__Cumulative_Effect_Accounting_Changes `L31__Net_Gain_After_Dividends_To_Policyholders `L31__Surplus_Notes `L32__Federal_Income_Taxes `L32__Paid_In_Surplus `L32__Surplus_Notes `L32a_Ch_Capital_Paid_In `L32b_Capital_From_Surplus `L32c_Capital_To_Surplus `L33__Net_Gain_After_Dividends_To_Policyholders_And_Taxes `L33__Paid_In_Surplus `L33__Unassigned_Funds `L33a_Ch_Surplus_Paid_In `L33b_Surplus_To_Capital `L33c_Surplus_From_Capital `L34__AWI_Special_Surplus `L34__From_Home_Office `L34__Net_Realized_Capital_Gains `L34__Treasury_Stock `L35__Net_Income `L35__Policyholders_Surplus `L35__Stockholders_Dividends `L35__Unassigned_Funds `L36__Ch_Treasury_Stock `L36__PP_Capital_And_Surplus `L36__Treasury_Stock `L37__AWI_Ch_Surplus `L37__Net_Income `L37__Surplus `L38__Ch_Policyholders_Surplus `L38__Ch_Unrealized_Capital_Gains `L39__Ch_FX_Adjustment `L39__Policyholders_Surplus `L40__Ch_Net_Deferred_Tax `L41__Ch_Non_Admitted_Assets `L42__Ch_Provision_Reinsurance_In_Unauthorized_Companies `L43__Ch_Reserve_Due_To_Ch_Valuation_Basis `L44__Ch_in_AVR `L45__Ch_Treasury_Stock `L46__Surplus_Withdrawn_From_Separate_Accounts `L47__Other_Ch_Surplus_In_Separate_Accounts `L48__Ch_Surplus_Notes `L49__Cumulative_Effect_Accounting_Changes `L50a_Ch_Capital_Paid_In `L50b_Ch_Capital_Transferred_From_Surplus `L50c_Ch_Capital_Transferred_To_Surplus `L51a_Surplus_Adjustment_Paid_In `L51b_Surplus_Adjustment_Transferred_To_Capital `L51c_Surplus_Adjustment_Transferred_From_Capital `L51d_Surplus_Adjustment_Due_To_Reinsurance `L52__Stockholders_Dividends `L53__AWI_Ch_Surplus `L54__Net_Ch_Capital_And_Surplus `L55__Capital_And_Surplus `L_Deferred_Acquisition_Costs `L_Financial_Liabilities_Other_Than_Amounts_Owed_To_Credit_Institutions `L_Financing_Costs `L_Minority_Interests `L_Other_Assets `L_Separate_Account_Liabilities `L_Total_Capital_and_Surplus_and_Liabilities `M_1_Preferred_Stock_Par_Value `M_1_Tax_Paid `M_2_Change_in_Tax_Payable `M_2_Preferred_Stock_Additional_Paid_In `M_3_Change_in_Deferred_Tax `M_Payables_Trade_Not_Insurance `M_Preferred_Stock `M_Receivables_Trade_Not_Insurance `M_Tax_Incurred `N_1_Common_Stock_Par_Value `N_2_Common_Stock_Additional_Paid_In `N_Common_Stock `N_Pension_Benefit_Obligations `N_Pension_Benefit_Surplus `N_Shareholder_Dividends `Net_Benefits_and_Losses_Incurred `Net_Income `O_1_Change_in_Preferred_Stock `O_1_Deductible_Temporary_Differences `O_2_Change_in_Common_Stock `O_2_The_Carry_Forward_Of_Unused_Tax_Losses_And_Unused_Tax_Credits `O_3_Cannot_Be_Realised_In_A_Reasonable_Time_Frame `O_Change_in_Stock `O_Deferred_Tax_Assets `O_Special_Surplus `O_Uncalled_Investments `Operating_Result `Other_Net_Result `P_1_Change_in_Unrealized_Gain_on_Investments `P_2_Change_in_Unrealized_Gain_on_FOREX `P_3_Change_in_Unrealized_Gain_on_Derivatives `P_Cash_And_Cash_Equivalents `P_Change_in_Accumulated_Other_Comprehensive_Income `P_Change_in_Unrealized_Gain `P_Contingent_Liabilities `P_Other_Surplus `Profit_Before_Tax `Q_1_Change_in_Special_Surplus `Q_1_Unrealized_Gain_on_Investments `Q_2_Change_in_Other_Surplus `Q_2_Unrealized_Gain_on_FOREX `Q_3_Unrealized_Gain_on_Derivatives `Q_Accumulated_Other_Comprehensive_Income `Q_Change_in_Surplus `Q_Other_Liabilities `Q_Short_Term_Bank_Deposits `R_Amounts_Due_In_Respect_Of_Called_But_Unpaid_Capital `R_Retained_Earnings `R_Total_Other_Financial_Sector_Liabilities `S_Any_Other_Assets_Not_Elsewhere_Shown `Shareholders_Equity `Total_Assets `Total_Assets_Excluding_Other_Financial_Sector_Assets `Total_Basic_Own_Funds `Total_Capital_and_Surplus `Total_Liabilities `Total_Liabilities_Excluding_Other_Financial_Sector_Liabilities `Total_Liabilities_Including_Other_Financial_Sector_Liabilities `Total_Revenue `Total_Taxes `U_Other_Financial_Sector_Assets
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Entity;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_Accounting.html;)
         (`V;{[p;x]
            r::[#r:.L.V.user_value_list[{,/{x,/:y}'[!x;!:'x[]]}@.C[`Accounting;x`Standard];`Statement`Item;p;x];r;()]
            / se = Spanned Entities (boolean)
            e:.k.get_s (0;`A;`User;`Accounting;x`Standard;`by_Entity;:[se:`Any_Entity_=xe:x`Entity; _n; xe];`m)
            if[se
              if[|/eo:`off=e
                xe:!.k.get_s (0;`A;`User;`Accounting;x`Standard;`by_Entity)
                r,:,(1;("&0 Standard is not active for entities &1";$x`Standard;2_,/" ,",/:$xe@&eo);,`Standard`Entity)
                ] / if `off _in e
              ] / if se
            if[~se
              if[`off~e; r,:,(1;("&0 Standard is not active for entity &1";$x`Standard;$x`Entity);,`Standard`Entity)]]
            :[#r;r;_n]};)
         (`J
          .,(`Entity
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Entity;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Entity];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Entity];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Entity;,0#`];)
               (`F
                ,`Entity
                ))
             )
          )
         (`U
          ,`Entity
          )
         (`XX
          `A_1_Fixed_Income `A_2_Real_Estate `A_3_Mortgages `A_4a_Equities_Unaffiliated `A_4b_Equities_Affiliated `A_4_Equities `A_5_Derivatives `A_6_Other_Investments `A_7_Short_Term_Investments `A_Investments `B_Cash `C_Accrued_Investment_Income `D_Deposits `E_Deferred_Policy_Acquisition_Costs `F_Prepaid_Reinsurance_Premiums `G_Premiums_Receivable `H_Reinsurance_Balances_Receivable `I_1_a_Unpaid_Benefits_and_Losses_Recoverable `I_1_b_Unpaid_LAE_Recoverable `I_1_Unpaid_Benefits_and_Losses_and_LAE_Recoverable `I_2_Provision_for_Reinsurance `I_Reinsurance_Recoverable `J_Deferred_Tax_Asset `K_Property_Plant_and_Equipment `L_Other_Assets `Total_Assets `A_1_Unpaid_Losses `A_2_Unpaid_LAE `A_3_Policyholders_Account_Balances `A_4_Other_Policyholder_Funds_Payable `A_5_Future_Policy_Benefits `A_6_Policy_Claims `A_7_Policyholder_Dividends_Payable `A_Reserves_for_Benefits_Claims_Expenses `B_Unearned_Premiums `C_Drafts_Outstanding `D_Funds_Held `E_1_Underwriting_Expenses_Payable `E_2_Accrued_Underwriting_Expenses `E_3_Investment_Expenses_Payable `E_4_Accrued_Investment_Expenses `E_Accrued_Expenses_and_Other `F_Reinsurance_Balances_Payable `G_Shareholder_Dividends_Payable `H_Deferred_Tax_Liability `I_Debt `J_1_Capital_Notes `J_2_Surplus_Notes `J_Notes `K_Other_Liabilities `L_Separate_Account_Liabilities `Total_Liabilities `Shareholders_Equity `M_Preferred_Stock `N_1_Common_Stock_Par_Value `N_2_Common_Stock_Additional_Paid_In `N_Common_Stock `O_Special_Surplus `P_Other_Surplus `Q_Accumulated_Other_Comprehensive_Income `R_Retained_Earnings `A_1_a_Gross_Written_Premium `A_1_b_Change_in_Gross_Unearned_Premium `A_1_Gross_Earned_Premium `A_2_a_Assumed_Paid_Premium `A_2_b_Change_in_Assumed_Accrued_Premium `A_2_Assumed_Incurred_Premium `A_3_a_Ceded_Written_Premium `A_3_b_Change_in_Ceded_Unearned_Premium `A_3_Ceded_Earned_Premium `A_4_a_Ceded_Paid_Premium `A_4_b_Change_in_Ceded_Accrued_Premium `A_4_Ceded_Incurred_Premium `A_Net_Earned_Premium `B_Fee_Income_UL_Annuity_Policies `C_1_Net_Investment_Income `C_2_Realized_Investment_Gains `C_Profit_from_Investments `D_Other_Income `Total_Revenue `E_Interest_Credited `F_1_Gross_Benefits_and_Losses_Paid `F_2_Ceded_Benefits_and_Losses_Paid `F_Net_Benefits_and_Losses_Paid `G_1_Change_in_Gross_Benefit_and_Loss_Reserves `G_2_Change_in_Ceded_Benefit_and_Loss_Reserves `G_3_Ceded_Uncollectible_Loss_Accrual `G_4_Assumed_Uncollectible_Loss_Accrual `G_Change_in_Net_Benefit_and_Loss_Reserves `Net_Benefits_and_Losses_Incurred `H_1_a_Gross_LAE_Paid `H_1_b_Change_in_Gross_LAE_Reserves `H_1_Gross_LAE_Incurred `H_2_a_Ceded_LAE_Paid `H_2_b_Change_in_Ceded_LAE_Reserves `H_2_c_Ceded_Uncollectible_LAE_Accrual `H_2_d_Assumed_Uncollectible_LAE_Accrual `H_2_Ceded_LAE_Incurred `H_Net_LAE_Incurred `I_1_Policy_Acquisition_Costs_Paid `I_2_Change_in_DAC `I_3_Contingent_Commissions `I_Policy_Acquisition_Costs `J_Other_Expenses `K_1_Dividends_to_Policyholders `K_2_Depreciation `K_3_Foreign_Exchange_Effect `K_Other `Operating_Result `L_Financing_Costs `Profit_Before_Tax `M_1_Tax_Paid `M_2_Change_in_Tax_Payable `M_3_Change_in_Deferred_Tax `M_Tax_Incurred `Net_Income `N_Shareholder_Dividends `O_1_Change_in_Preferred_Stock `O_2_Change_in_Common_Stock `O_Change_in_Stock `P_Change_in_Accumulated_Other_Comprehensive_Income `Q_1_Change_in_Special_Surplus `Q_2_Change_in_Other_Surplus `Q_Change_in_Surplus `Change_in_Shareholders_Equity `A_Goodwill `B_Other_Intangible_Assets `C_Property_Plant_Equipment_Held_For_Own_Use `D_1_Property_Other_Than_Own_Use `D_2_Participations `D_3_Equities_Other_Than_Participations_Listed `D_4_Equities_Other_Than_Participations_Unlisted `D_5_Bonds_Government_And_Multilateral_Banks `D_6_Bonds_Corporate_Asset_Backed_Securities `D_7_Bonds_Corporate_Other `D_8_Structured_Notes `D_9_Investment_Funds `D_10_Derivatives `D_11_Long_Term_Bank_Deposits `D_12_Other_Investments `D_Investments_Other_Than_Assets_Held_For_Unit_Linked_Funds `E_Assets_Held_For_Unit_Linked_Funds `F_Cash_Deposits_To_Cedants `G_1_Uncollateralized_Loans_Made `G_2_Collateralized_Loans_Made_Other_Than_Loans_On_Policies `G_3_Loans_On_Policies `G_Mortgages_And_Loans_Made `H_1_Reinsurance_Share_Of_TP_Non_Life_Excluding_Health `H_2_Reinsurance_Share_Of_TP_Health_Similar_To_Non_Life `H_3_Reinsurance_Share_Of_TP_Health_Similar_To_Life `H_4_Reinsurance_Share_Of_TP_Life_Excluding_Health_And_Unit_Linked `H_5_Reinsurance_Share_Of_TP_Life_Unit_Linked `H_6_Other_Reinsurance_Recoverables `H_Reinsurance_Recoverables `I_SPV_Recoverables `J_Intermediaries_Recoverables `K_Insurance_Recoverables_Excluding_Intermediaries `L_Deferred_Acquisition_Costs `M_Receivables_Trade_Not_Insurance `N_Pension_Benefit_Surplus `O_1_Deductible_Temporary_Differences `O_2_The_Carry_Forward_Of_Unused_Tax_Losses_And_Unused_Tax_Credits `O_3_Cannot_Be_Realised_In_A_Reasonable_Time_Frame `O_Deferred_Tax_Assets `P_Cash_And_Cash_Equivalents `Q_Short_Term_Bank_Deposits `R_Amounts_Due_In_Respect_Of_Called_But_Unpaid_Capital `S_Any_Other_Assets_Not_Elsewhere_Shown `Total_Assets_Excluding_Other_Financial_Sector_Assets `U_Other_Financial_Sector_Assets `A_1_TP_Best_Estimate_Non_Life_Excluding_Health `A_2_Risk_Margin_Non_Life_Excluding_Health `A_Gross_Technical_Provisions_Non_Life_Excluding_Health `B_1_TP_Best_Estimate_Health_Similar_To_Non_Life `B_2_Risk_Margin_Health_Similar_To_Non_Life `B_Gross_Technical_Provisions_Health_Similar_To_Non_Life `C_1_TP_Best_Estimate_Health_Similar_To_Life `C_2_Risk_Margin_Health_Similar_To_Life `C_Gross_Technical_Provisions_Health_Similar_To_Life `D_1_TP_Best_Estimate_Life_Excluding_Health_And_Unit_Linked `D_2_Risk_Margin_Life_Excluding_Health_And_Unit_Linked `D_Gross_Technical_Provisions_Life_Excluding_Health_And_Unit_Linked `E_1_TP_Best_Estimate_Unit_Linked_Funds `E_2_Risk_Margin_Unit_Linked_Funds `E_Gross_Technical_Provisions_Unit_Linked_Funds `F_Cash_Deposits_From_Reinsurers `G_Reinsurance_Accounts_Payable `H_Derivatives `I_Deferred_Tax_Liabilities `J_Provisions_Other_Than_Technical_Provisions `K_Amounts_Owed_To_Credit_Institutions `L_Financial_Liabilities_Other_Than_Amounts_Owed_To_Credit_Institutions `M_Payables_Trade_Not_Insurance `N_Pension_Benefit_Obligations `O_Uncalled_Investments `P_Contingent_Liabilities `Q_Other_Liabilities `Total_Liabilities_Excluding_Other_Financial_Sector_Liabilities `R_Total_Other_Financial_Sector_Liabilities `Total_Liabilities_Including_Other_Financial_Sector_Liabilities `Total_Basic_Own_Funds `A_1_Paid_Up_Ordinary_Share_Capital `A_2_Called_Up_Ordinary_Share_Capital `A_Ordinary_Share_Capital `B_1_Paid_Up_Initial_Fund `B_2_Called_Up_Initial_Fund `B_3_Callable_Up_Initial_Fund `B_Initial_Fund `C_Share_Premium_Account `E_1_Adjustments_To_Assets `E_2_Adjustments_To_Technical_Provisions `E_3_Expected_Profit_In_Future_Premiums `E_4_Adjustments_To_Other_Liabilities `E_5_Other_Adjustments `E_Reconciliation_Reserve `F_Surplus_Funds_Expected_Profit_In_Future_Premiums `G_Other_Paid_In_Capital_Instruments `H_Preference_Shares `I_Subordinated_Liabilities `J_Subordinated_Mutual_Member_Accounts `K_Other_Items_Not_Specified_Above `L_Minority_Interests `D_Retained_Earnings `A_1a_Fixed_Income_HTM `A_1b_Fixed_Income_LAR `A_1c_Fixed_Income_AFS `A_1d_Fixed_Income_Trading `A_4a_Equities_Unaffiliated_AFS `A_4c_Equities_Unaffiliated_Trading `M_1_Preferred_Stock_Par_Value `M_2_Preferred_Stock_Additional_Paid_In `Q_1_Unrealized_Gain_on_Investments `Q_2_Unrealized_Gain_on_FOREX `Q_3_Unrealized_Gain_on_Derivatives `P_1_Change_in_Unrealized_Gain_on_Investments `P_2_Change_in_Unrealized_Gain_on_FOREX `P_3_Change_in_Unrealized_Gain_on_Derivatives `P_Change_in_Unrealized_Gain `L01__Bonds `L02a_Preferred_Stocks `L02b_Common_Stocks `L03__Mortgages `L04a_Occupied_Real_Estate `L04b_Real_Estate_Held_For_Income `L04c_Real_Estate_For_Sale `L05__Cash `L06__Contract_Loans `L07__Other_Investments `L08__Receivable_For_Securities `L09__AWI_Investments `L10__Cash_and_Investments_Subtotal `L11__Title_Plants `L12__Investment_Income_Due `L13a_PAB_In_Collection `L13b_PAB_Deferred `L13c_Accrued_Retro_Premium `L14a__Reinsurance_Recoverable `L14b__Funds_Deposited `L14c__Other_Reinsurance_Recoverable `L15__Amounts_Receivable_Relating_To_Uninsured_Plans `L16a__Tax_Recoverable `L16b__Net_Deferred_Tax_Asset `L17__Guarantee_Funds `L18__EDP_Equipment `L19__Furniture_and_Equipment `L20__Net_Adj_Foreign_Exchange `L21__Receivable_PSA `L22__A_H_Receivable `L23__Other_Non_Admitted `L24__AWI_Other `L25x_Assets_excluding_DTA `L25__Assets_Total `L01__Losses `L02__Reinsurance_Payable `L03__Loss_Adjustment_Expenses `L04__Commissions_Payable `L05__Other_Expenses `L06__Taxes_Licenses_Fees `L07a__Federal_Income_Taxes `L07b__Net_Deferred_Tax_Liability `L08__Borrowed_Money `L09x_Gross_Unearned_Premium `L09y_Deferred_Acquisition_Costs `L09__Unearned_Premium `L10__Advance_Premiums `L11a_Stockholder_Dividends `L11b_Policyholder_Dividends `L12__Ceded_Premium_Payable `L13__Funds_Held `L14__Amounts_Withheld `L15__Remittances `L16__Provision_Reinsurance `L17__Net_FX_Adjustments `L18__Drafts_Outstanding `L19__Payable_PSA `L20__Payable_For_Securities `L21__Amounts_Held_Under_Uninsured_Plans `L22__Capital_Notes `L23__AWI `L24__Liabilities_Total `L03x_Losses_LAE `L27__AWI_Special_Surplus `L28__Common_Capital_Stock `L29__Preferred_Capital_Stock `L30__AWI_Other `L31__Surplus_Notes `L32__Paid_In_Surplus `L33__Unassigned_Funds `L34__Treasury_Stock `L35__Policyholders_Surplus `L01__Premiums_Earned `L02__Losses_Incurred `L03__Loss_Expenses_Incurred `L04__Other_UW_Expenses `L05__AWI_UW_Deductions `L06__Total_UW_Deductions `L07__Net_Income_of_Protected_Cells `L08__Net_UW_Gain `L09a_Net_Investment_Income_Earned `L09b_Investment_Expenses `L09c_Interest_Paid `L09__Investment_Income_Earned `L10__Realized_Capital_Gains `L11__Investment_Gain `L12__Net_Gain_PAB_Charged_Off `L13__Finance_Service_Charges `L14__AWI_Misc_Income `L15__Total_Other_Income `L16__Income_B4_Divs_Taxes `L17__Policyholder_Dividends `L18__Income_B4_Taxes `L19__Federal_Income_Taxes `L20__Net_Income `L21__PP_Policyholder_Surplus `L22__Net_Income `L24__Ch_Unrealized_Capital_Gains `L25__Ch_FX_Adjustment `L26__Ch_Net_Deferred_Tax `L27__Ch_Non_Admitted_Assets `L28__Ch_Provision_Reinsurance `L29__Ch_Surplus_Notes `L31__Cumulative_Effect_Accounting_Changes `L32a_Ch_Capital_Paid_In `L32b_Capital_From_Surplus `L32c_Capital_To_Surplus `L33a_Ch_Surplus_Paid_In `L33b_Surplus_To_Capital `L33c_Surplus_From_Capital `L34__From_Home_Office `L35__Stockholders_Dividends `L36__Ch_Treasury_Stock `L37__AWI_Ch_Surplus `L38__Ch_Policyholders_Surplus `L39__Policyholders_Surplus `L23__AWI_Other `L24x_Assets_excluding_DTA `L24__Assets_Total `L01__Aggregate_Reserve_For_Life_Contracts `L02__Aggregate_Reserve_For_AH_Contracts `L03__Liability_For_Deposit_Type_Contracts `L04a__Life_Contract_Claims `L04b__AH_Contract_Claims `L04__Contract_Claims `L05__Policyholder_Dividends `L06__Provision_For_Policyholder_Dividends_And_Coupons_Payable_In_Following_Year `L07__Amount_Provisionally_Held_For_Deferred_Dividend_Policies_Not_Included_In_Line_6 `L08__Premiums_And_Annuity_Considerations_For_Life_And_AH_Contracts_Received_In_Advance `L09a__Surrender_Values_On_Canceled_Contracts `L09b__Provision_For_Experience_Rating_Refunds `L09c__Other_Amounts_Payable_On_Reinsurance `L09d__IMR `L09__Contract_Liabilities_Not_Included_Elsewhere `L10__Commissions_Due_And_Accrued `L11__Commissions_And_Expense_Allowances_Payable_On_reinsurance_Assumed `L12__General_Expenses_Due_and_Accrued `L13__Transfers_To_Separate_Accounts_Due_And_Accrued `L14__Taxes_Licenses_Fees_Due_and_Accrued `L15a__Current_Federal_And_Foreign_Income_Taxes_Including_Taxes_On_Realized_Capital_Gains `L15b__Net_Deferred_Tax_Liability `L16__Unearned_Investment_Income `L17__Amounts_Withheld_By_Company `L18__Amounts_Held_For_Agents_Acount `L19__Remittances `L20__Net_FX_Adjustments `L21__Liability_For_Benefits_For_Employees_And_Agents `L22__Borrowed_Money `L23_Stockholder_Dividends `L24a__AVR `L24b__Reinsurance_On_Unauthorized_Companies `L24c__Funds_Held_Under_Reinsurance_Treaties_With_Unauthorized_Reinsurers `L24d__Payable_To_Parent_Subsidiaries_And_Affiliates `L24e__Drafts_Outstanding `L24f__Liability_For_Amounts_Held_Under_Uninsured_Plans `L24g__Funds_Held_Under_Coinsurance `L24h__Payable_For_Securities `L24i__Capital_Notes `L24__Miscellaneous_Liabilities `L25__AWI `L26__Total_Liabilities_Excluding_Separate_Accounts `L27__From_Separate_Accounts `L28__Total_Liabilities `L29__Common_Capital_Stock `L30__Preferred_Capital_Stock `L31__AWI_Other `L32__Surplus_Notes `L33__Paid_In_Surplus `L34__AWI_Special_Surplus `L35__Unassigned_Funds `L36__Treasury_Stock `L37__Surplus `L01__Premiums_And_Annuity_Considerations `L02__Considerations_For_Supplementary_Contracts_With_Life `L03a_Investment_Income `L03b_Investment_Expenses `L03c_Interest_Paid `L03__Net_Investment_Income `L04__Amortization_Of_IMR `L05__Separate_Accounts_Net_Operation_Gain `L06__Commissions_and_Expense_Allowances_On_Reinsurance_Ceded `L07__Reserve_Adjustments_On_Reinsurance_Ceded `L08a__Income_From_Fees_From_Separate_Accounts `L08b__Charges_And_Fees_For_Deposit_Type_Contracts `L08c__AWI_For_Miscellaneous_Income `L08__Miscellaneous_Income `L09__Total_Lines_1_To_8 `L10__Death_Benefits `L11__Matured_Endowments `L12__Annuity_Benefits `L13__Disability_Benefits_And_Benefits_Under_AH_Contracts `L14__Coupons_Guaranteed_Annual_Pure_Endowments `L15__Surrender_Benefits_And_Withdrawals_For_Life_Contracts `L16__Group_Conversions `L17__Interest_And_Adjustments_On_Contracts_Or_Deposit_Funds `L18__Payments_On_Supplementary_Contracts_With_Life_Contingencies `L19__Increase_In_Aggregate_Reserves_For_Life_And_AH `L20__Total_Lines_10_To_19 `L21__Commissions `L22__Commissions_And_Expense_Allowances_On_Reinsurance_Assumed `L23__General_Insurance_Expenses `L24__Insurance_Taxes_Licenses_And_Fees `L25__Increase_In_Loading_On_Deferred_And_Uncollected_Premiums `L26__Net_Transfer_To_Separate_Accounts_Net_Of_Reinsurance `L27__AWI_For_Deductions `L28__Total_Lines_20_To_27 `L29__Net_Gain_Before_Dividends_To_Policyholders_And_Taxes `L30__Dividends_To_Policyholders `L31__Net_Gain_After_Dividends_To_Policyholders `L32__Federal_Income_Taxes `L33__Net_Gain_After_Dividends_To_Policyholders_And_Taxes `L34__Net_Realized_Capital_Gains `L35__Net_Income `L36__PP_Capital_And_Surplus `L37__Net_Income `L38__Ch_Unrealized_Capital_Gains `L39__Ch_FX_Adjustment `L40__Ch_Net_Deferred_Tax `L41__Ch_Non_Admitted_Assets `L42__Ch_Provision_Reinsurance_In_Unauthorized_Companies `L43__Ch_Reserve_Due_To_Ch_Valuation_Basis `L44__Ch_in_AVR `L45__Ch_Treasury_Stock `L46__Surplus_Withdrawn_From_Separate_Accounts `L47__Other_Ch_Surplus_In_Separate_Accounts `L48__Ch_Surplus_Notes `L49__Cumulative_Effect_Accounting_Changes `L50a_Ch_Capital_Paid_In `L50b_Ch_Capital_Transferred_From_Surplus `L50c_Ch_Capital_Transferred_To_Surplus `L51a_Surplus_Adjustment_Paid_In `L51b_Surplus_Adjustment_Transferred_To_Capital `L51c_Surplus_Adjustment_Transferred_From_Capital `L51d_Surplus_Adjustment_Due_To_Reinsurance `L52__Stockholders_Dividends `L53__AWI_Ch_Surplus `L54__Net_Ch_Capital_And_Surplus `L55__Capital_And_Surplus `A_Subscribed_Capital_Unpaid `B_Intangible_Assets `C_1_Property `C_2_Investments_in_Affiliates `C_3_1_a_Directly_Held_Shares `C_3_1_b_Fonds `C_3_1_Shares `C_3_2_Bearer_Bonds `C_3_3_Mortgages `C_3_4_Other_Loans `C_3_5_Deposits_with_Banks `C_3_6_Miscellaneous_Other_Investments `C_3_Other_Investments_Total `C_Investments `D_Separate_Account_Investments `E_1_Receivable_on_Direct_Insurance `E_2_Receivable_on_Reinsurance `E_3_Other_Receivables `E_Total_Amounts_Receivable `F_1_Fixed_Assets_and_Inventories `F_2_Current_Bank_Accounts `F_3_Miscellaneous_Other_Assets `F_Total_Other_Assets `G_1_Accrued_Interest_and_Rent `G_2_Other_Prepaid_Expenses `G_Total_Prepaid_Expenses `H_Total_Assets `C_Subordinate_Liabilities `D_Special_Items_with_Reserve_Character `E_1_a_Gross_Unearned_Premium `E_1_b_Ceded_Unearned_Premium `E_1_Net_Unearned_Premium `E_2_a_Gross_Premium_Reserves `E_2_b_Ceded_Premium_Reserves `E_2_Net_Premium_Reserves `E_3_a_Gross_Provision_for_Outstanding_Claims `E_3_b_Ceded_Provision_for_Outstanding_Claims `E_3_c_Net_Drafts_Outstanding `E_3_Net_Provision_for_Outstanding_Claims `E_4_a_Gross_Reserve_for_Premium_Refunds `E_4_b_Ceded_Reserve_for_Premium_Refunds `E_4_Net_Reserve_for_Premium_Refunds `E_5_Claim_Equalization_Reserves `E_6_a_Other_Gross_Insurance_Reserves `E_6_b_Other_Ceded_Insurance_Reserves `E_6_Other_Insurance_Reserves `E_Underwriting_Reserves `F_Reserves_For_Separate_Accounts `G_1_Provision_for_Pension_Liabilities `G_2_Taxes_Payable `G_3_Intra_Company_Liabilities `G_Other_Provisions `J_Financing_Costs `I_1_Amounts_Payable_on_Direct_Insurance `I_2_Amounts_Payable_on_Reinsurance `I_3_Liabilities_to_Banks `I_4_Debt_and_Notes `I_5_Miscellaneous_Liabilities `I_Total_Other_Liabilities `K_Deferred_Income `L_Total_Capital_and_Surplus_and_Liabilities `A_1_1_Preferred_Stock `A_1_2_Common_Stock `A_1_3_Special_Surplus `A_1_Subscribed_Capital `A_2_Capital_Reserve `A_3_1_Legal_Reserve `A_3_2_Other_Revenue_Reserves `A_3_Revenue_Reserve `A_4_Net_Retained_Profit `A_Shareholders_Equity `B_Equity_from_Profit_Participation_Rights `Total_Capital_and_Surplus `A_01_a_Gross_Written_Premium `A_01_b_Ceded_Written_Premium `A_01_c_Change_in_Gross_Unearned_Premium `A_01_d_Change_in_Ceded_Unearned_Premium `A_01_Net_Earned_Premium `A_02_Technical_Interest `A_03_Other_Underwriting_Income `A_04_a_aa_Gross_Claims_Paid `A_04_a_bb_Ceded_Claims_Paid `A_04_a_Net_Claims_Paid `A_04_b_aa_Change_in_Gross_Loss_and_LAE_Reserves `A_04_b_bb_Change_in_Ceded_Loss_and_LAE_Reserves `A_04_b_Change_in_Net_Loss_and_LAE_Reserves `A_04_Net_Incurred_Claims `A_05_Change_in_Other_Net_Underwriting_Provisions `A_06_Payments_to_Reserve_for_Premium_Refunds `A_07_a_Gross_Underwriting_Expenses `A_07_b_Ceded_Underwriting_Expenses `A_07_Underwriting_Expenses `A_08_Other_Underwriting_Expenses `A_09_Subtotal `A_10_Change_in_Claim_Equalization_Reserves `A_11_Underwriting_Result `B_01_Income_from_Investments `B_02_Investment_Expenses `B_03_Technical_Interest `B_04_Other_Income `B_05_Other_Expenses `B_06_Result_from_Ordinary_Business_Activities `B_07_Extraordinary_Income `B_08_Extraordinary_Expenses `B_09_Extraordinary_Result `B_10_Taxes_on_Income `B_11_Other_Taxes `B_12_Net_Income `B_13_Retained_Profit_Carried_Forward `B_14_a_Withdrawal_from_Preferred_Stock `B_14_b_Withdrawal_from_Common_Stock `B_14_c_Withdrawal_from_Special_Surplus `B_14_d_Withdrawal_from_Capital_Reserve `B_14_Withdrawal_from_Capital_Reserve `B_15_a_Withdrawal_from_Legal_Reserve `B_15_b_Withdrawal_from_Other_Revenue_Reserves `B_15_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_15_Withdrawal_from_Revenue_Reserve `B_16_Net_Retained_Profit `A_02_Premiums_from_Reserve_for_Premium_Refunds `A_03_a_Income_from_Affiliates `A_03_b_Realized_Gains `A_03_c_Other_Investment_Income `A_03_Income_from_Investments `A_04_Non_Realized_Gain_from_Investments `A_05_Other_Underwriting_Income `A_06_a_Net_Claims_Paid `A_06_b_Change_in_Net_Provision_for_Outstanding_Claims `A_06_Net_Claims_Incurred `A_07_Change_in_Other_Net_Underwriting_Provisions `A_08_Payments_to_Reserve_for_Premium_Refunds `A_09_Underwriting_Expenses `A_10_Investment_Expenses `A_11_Non_Realized_Loss_from_Investments `A_12_Other_Underwriting_Expenses `A_13_Underwriting_Result `B_01_Other_Income `B_02_Other_Expenses `Other_Net_Result `B_03_Ordinary_Result `B_04_Extraordinary_Income `B_05_Extraordinary_Expenses `B_06_Extraordinary_Result `B_07_Taxes_On_Income `B_08_Other_Taxes `Total_Taxes `B_09_Profit_Transfers `B_10_Net_Income `B_11_Retained_Profit_Carried_Forward `B_12_a_Withdrawal_from_Preferred_Stock `B_12_b_Withdrawal_from_Common_Stock `B_12_c_Withdrawal_from_Special_Surplus `B_12_d_Withdrawal_from_Capital_Reserve `B_12_Withdrawal_from_Capital_Reserve `B_13_a_Withdrawal_from_Legal_Reserve `B_13_b_Withdrawal_from_Other_Revenue_Reserves `B_13_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_13_d_Withdrawal_from_Shareholder_Equity `B_13_Withdrawal_from_Revenue_Reserve `B_14_Net_Retained_Profit
          )))
      (`Regulatory
       .((`Entity
          `Entity_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Entity;0#`];))
         (`Regulator
          `BCAR
          .,(`V;{[p;x].L.V.active_module["Regulator or Rating Agency";p;:[x~`SaP;`Standard_and_Poors;x~`BCAR;`AM_Best;x]]};))
         (`Timing;`Final;.())
         (`Item;`Surplus;.())
         (`Period;`Current;.()))
       .((`X;`UserValues_Arguments_Source_Regulatory.html;)
         (`j
          .((`c;`Slot;)
            (`cell
             .((`Entity
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Entity_ `Any_Entity_ `Entity_1
                   ))
                )
               (`Regulator
                .((`c;`combo;)
                  (`o
                   `BCAR `EU_Solvency_I
                   )
                  (`ol
                   (`BCAR `EU_Solvency_I
                    `AM_Best `EU_Solvency_I)
                   ))
                )
               (`Timing
                .((`c;`combo;)
                  (`o
                   `Pre_Trade `Final
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Adjusted_Surplus `Annual_Gross_Incurred_Losses `Annual_Gross_Premium `Annual_Net_Incurred_Losses `Average_Gross_Incurred_Losses `B1_Investment_Risk_Fixed_Income_Securities `B3_Interest_Rate_Risk `B4_Credit_Risk `B5_Reserve_Risk `B6_Premium_Risk `B7_Business_Risk `Capital_Adequacy_Ratio `Deferred_Acquisition_Costs `Gross_Incurred_Loss_LAE_Net_SS `Gross_Loss_Threshold `Gross_Premium `Gross_Premium_Threshold `Hidden_Reserves `Inflation_Since_Last_Adjustment `Loss_Reserve_Equity `Losses_Two_Step_Sum `Min_Loss_Ratio_Net_To_Gross `Net_Incurred_Loss_LAE_Net_SS `Net_Required_Capital `Premium_Two_Step_Sum `Solvency_Debit `Solvency_Debit_Losses `Solvency_Debit_Premium `Solvency_Margin `Solvency_Surplus `Spread_of_Risk_Factor_B1_B2 `Subordinate_Liabilities_Disallowed `Sum_of_Capital_and_Reserves `Surplus
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                )
               (`Transformation
                .((`c;`combo;)
                  (`o
                   `Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN `Transform_1
                   ))
                ))
             )
            (`editor;1;)
            (`rl
             .,(`Regulator;`"Regulator or Rating Agency";)
             )
            (`u
             .,(`Entity;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`V;{[p;x]
            r::[#r:.L.V.user_value_list[.C`Regulatory_List;`Regulator`Timing`Item;p;x];r;()]
            e:.k.get_s (0;`A;`User;`Regulatory;x`Regulator;`Entity_Specific_Parameters;:[se:`Any_Entity_=xe:x`Entity; _n; xe];`m)
            if[se
              if[|/eo:`off=e
                xe:!.k.get_s (0;`A;`User;`Regulatory;x`Regulator;`Entity_Specific_Parameters)
                r,:,(1;("&0 Standard is not active for entities &1";$x`Standard;2_,/" ,",/:$xe@&eo);,`Standard`Entity)
                ] / if `off _in e
              ] / if se
            if[~se
              if[`off~e; r,:,(1;("&0 regulatory is not active for entity &1";$x`Regulator;$x`Entity);,`Regulatory`Entity)]]
            :[#r;r;_n]};)
         (`J
          .,(`Entity
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Entity;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Entity];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Entity];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Entity;,0#`];)
               (`F
                ,`Entity
                ))
             )
          )
         (`U
          ,`Entity
          )
         (`XX
          `Surplus `Deferred_Acquisition_Costs `Adjusted_Surplus `Loss_Reserve_Equity `Spread_of_Risk_Factor_B1_B2 `B1_Investment_Risk_Fixed_Income_Securities `B3_Interest_Rate_Risk `B4_Credit_Risk `B5_Reserve_Risk `B6_Premium_Risk `B7_Business_Risk `Net_Required_Capital `Capital_Adequacy_Ratio `Gross_Loss_Threshold `Gross_Premium_Threshold `Inflation_Since_Last_Adjustment `Gross_Premium `Gross_Incurred_Loss_LAE_Net_SS `Net_Incurred_Loss_LAE_Net_SS `Average_Gross_Incurred_Losses `Annual_Gross_Incurred_Losses `Annual_Net_Incurred_Losses `Annual_Gross_Premium `Premium_Two_Step_Sum `Min_Loss_Ratio_Net_To_Gross `Solvency_Debit_Premium `Losses_Two_Step_Sum `Solvency_Debit_Losses `Solvency_Debit `Sum_of_Capital_and_Reserves `Subordinate_Liabilities_Disallowed `Hidden_Reserves `Solvency_Surplus `Solvency_Margin
          )))
      (`Generic
       .((`Controls
          .((`Confidence;1;.())
            (`Period;`Current;.())
            (`Summary;`sum;.()))
          .,(`j
             .((`c;`Slot;)
               (`cell
                .((`Confidence
                   .,(`c;`check;)
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   )
                  (`Summary
                   .((`c;`combo;)
                     (`o
                      `sum `min `max `count `average `stdev
                      )
                     (`ol
                      (`sum `min `max `count `average `stdev
                       `Sum `Minimum `Maximum `Count `Average `"Standard Deviation")
                      ))
                   ))
                )
               (`rl
                .((`Confidence;`"Validation Warning";)
                  (`Period;`Period;)
                  (`Summary;`Summarization;))
                )
               (`rltip
                .((`Confidence;`"<html>If checked (default), use of generic user value creates a validation warning.</html>";)
                  (`Period;`"<html>Use current or previous value as input?</html>";)
                  (`Summary;`"<html>Summarization method for aggregating shapes</html>";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             ))
         (`Source
          .((`Axis
             ,`
             .,(`V;{[p;x]r:{:[x~_n;x;x,,,,y]}'[axis_list[p]'x;!#x]; :[#r:r _dv _n;r;_n]};))
            (`Summary
             ,`sum
             .()))
          .,(`j
             .((`c;`Table;)
               (`l;`"Tree-Structure Source of Data";)
               (`cell
                .,(`Summary
                   .((`c;`combo;)
                     (`o
                      `sum `min `max `count `average `stdev
                      )
                     (`ol
                      (`sum `min `max `count `average `stdev
                       `Sum `Minimum `Maximum `Count `Average `"Standard Deviation")
                      ))
                   )
                )
               (`cl
                .((`Summary;`Summarization;)
                  (`Axis;`Variable;))
                )
               (`p
                .((`Summary;`sum;)
                  (`Axis;`;))
                )
               (`cltip
                .,(`Summary;`"<html>Summarization method for aggregating axes with multiple items</html>";)
                )
               (`g
                .,(`Axis;{while[#x _ss ", ";x:_ssr[x;", ";","]];`$@[x;&" "~'x;:;"_"]};)
                )
               (`u
                .,(`Axis;{if[~#Y:$y;:("";y)]; Y:1_'(Y _ss ",") _ Y:",",Y
		:[|/{*@[.:;,(`$$x;);:]}'[Y];	("Each item in the input list must begin with a-z, A-Z and contain only a-z, A-Z, 0-9, and space";x)
					("";y)]};)
                )
               (`f
                .,(`Axis;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )))
       .((`j
          .,(`c;`panel;)
          )
         (`X;`UserValues_Arguments_Source_Generic.html;)
         (`V;{[p;x]:[x.Controls.Confidence;,(0;"Generic User Values should be used in consultation with the professional services staff of Conning")]};)))
      (`User_Value
       .((`User_Value
          `Zero
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`User_Value;`Zero `One `Period];))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`l;`"User Values";)
            (`cltip
             .,(`User_Value;`"<html>&nbsp;User Value (avoiding circularities) or Zero, One or Period&nbsp;</html>";)
             )
            (`cell
             .((`User_Value
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_User_Value_ `Zero `One `Period `User_Value_1
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`User_Value;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_UserValues.html;)
         (`J
          .,(`User_Value
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`User_Value;,`Zero `One `Period];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`User_Value];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`User_Value];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`User_Value;,`Zero `One `Period];)
               (`F
                ,`User_Value
                ))
             )
          )
         (`U
          ,`User_Value
          )))
      (`Reference
       .((`display
          ,`".."
          .((`j
             .((`c;`vector;)
               (`p;`;)
               (`l;`"Input Reference";)
               (`cell
                .((`c;`combo;)
                  (`ol;{ / Reference.display..j.cell.ol
/          `0:"call: ",(5:x),"\n" / used to guess patterns of calls
          if[~x~_n; ::[-3=tx:4:x; `$x
                       0=tx; (.k`get_path_of_labels)@`$x
                         x]]
          if[~t:4:.j.i_ / if list of values available
            h:*.j.i_
            .j.i_:1_ .j.i_
            if[~#.j.i_; .j.i_:_n]
            :h] / return first (next) result
          v:`. .j.v
          if[`. du:(.k.attr .j.v),`du / if Display Uninitialized
            vv:`.(-1_.j.v),`value
            v:(.k`path_to_labels)@vv.s / Screen Value
            if[2<#vv.si
              v:(-1_ v),`$.u.dws'$vv.si@2
              ] / if 2<#vv.si
            .[`;.j.v;:[;v]] / should be a trigger interaction, here
            .[`;du;:;0]
            ] / if `. du:(.k.attr .j.v),`du / if Display Uninitialized
          h:(.k`get_path_of_labels)[v]
          h:h[;;0] / retain just the labels
          v:@[v;i:&~v _in'(#v)#h;:[;`".."]]
          if[#i; .[`;.j.v;:[;v]]] / if vector has changed, store the updated version
          if[(#v)<#h; h:(#v)#h]
          i:&v=`".." / indices where blank required
          i:i@&~`".."_in/:h@i / only those where blank not already available
          h:@[h;i;`"..",]
          if[t=1 / if just completed call to j.u
            if[~.j.i_<0; c:h@.j.i_; .j.i_:1_ h,,c; :*h]
            if[ .j.i_<0; c:h@-.j.i_+1; .j.i_:_n; :c]
            ] / if t=1
          / assumed to be initial display call from here on
          .j.i_::[1<#h; 1_ h; _n]
          *h};)
                  (`o;;))
                )
               (`u;{ / Reference.display..j.u
         if[x~y; .j.i_:-1-*.j.i; :x] / signal value
         .j.i_:*.j.i
         lp:(.k`get_path_of_labels)[v:.[`. .j.v;.j.i;:[;y]]]
         pc:#lp / Path Count
         v:(+/&\(pc#v)_lin'lp[;;0])#v / keep only those elements of current value that are in the path
         if[pc>#v / can never happen if last element of v was already a blank
           v,:`".." ]
         .[`;ts:(.k.attr .j.v),`ts;:;0] / turn trigger off
         .[`;.j.v;:[;v]]
         .[`;ts;:;1] / turn trigger on
         y};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`editor;1;)
            (`t;"if[display..ts&~value.o~display\n         value.o:display\n         value.s:(.k`labels_to_path)[display]\n         if[value.a:`\"..\"_in value.s; value[`a`ai`si]:_n]\n         if[~value.a~_n\n           value.si:{(&~=':4::'\"|\",x)_ x}[value.s] / temp storage\n           value.a:1_.k.tag[.S;0,`A,*value.si]\n           if[2=#value.si; value.a:value.a,value.si@1] / simple index present\n           if[3>#value.si; value[`ai`si]:_n] / extended data not present\n           if[2<#value.si / extended data present\n             value.s:*value.si\n             value.ai:1_.k.tag[.S;0,`A,(-1_ value.s),`label] / only `label currently supported by get_paths_into_structure\n             value.si[0]:(-1_ value.si[0]),-1#value.ai\n             ] / if 2<#value.si\n           ] / if not invalid path\n         ]";)
            (`ts;1;)
            (`du;1;)
            (`H_t;"if[display..ts&~value.o~display\n         value.o:display\n         value.s:(.k`labels_to_path)[display]\n         if[value.a:`\"..\"_in value.s; value[`a`ai`si]:_n]\n         if[~value.a~_n\n           value.si:{(&~=':4::'\"|\",x)_ x}[value.s] / temp storage\n           value.a:1_.k.tag[.S;0,`A,*value.si]\n           if[2=#value.si; value.a:value.a,value.si@1] / simple index present\n           if[3>#value.si; value[`ai`si]:_n] / extended data not present\n           if[2<#value.si / extended data present\n             value.s:*value.si\n             value.ai:1_.k.tag[.S;0,`A,(-1_ value.s),`label] / only `label currently supported by get_paths_into_structure\n             value.si[0]:(-1_ value.si[0]),-1#value.ai\n             ] / if 2<#value.si\n           ] / if not invalid path\n         ]";)))
         (`value
          .((`s
             ,`".."
             )
            (`o;;)
            (`a;;)
            (`ai;;)
            (`si;;))
          .,(`B;`Hidden;)))
       .((`j
          .((`c;`panel;)
            (`border;0;)
            (`a;{(!x)@&test'x[.;`B]};))
          )
         (`V;{[p;x] / reference_vector..V
    r::[`".."_in x.display
          (1;"incomplete reference argument")
        `".."_in t:(.k`labels_to_path)@x.display
          (1;"User Value refers to a missing input (path may be truncated)")
        ~(4:.k.get_s (.C`get_mod_s_path)0,`A,t)_in 1 2 / can't use value.si: removed prior to validation
          (1;"Non-scalar argument")
        ()]
    :[#r;,r;_n]};)
         (`X;`UserValues_Arguments_Source_InputReference.html;)
         (`J
          .((`Asset_Class
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Claim_Cost_Index
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Compression
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Consolidation
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Counterparty
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Entity
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Financing_Instrument
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Function
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Greek
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`HGB_Equalization_Line
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Inner_Loop
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Library_Pattern
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Life_Product
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Life_Table
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Lookup
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Market_Index
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Peril
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Plan
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Portfolio
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Product
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Product_Group
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`QIS5_Line
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`QIS5_Region
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Return_Class
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Risk_Class
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`State
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Supplemental_Model
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Transform
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Transition
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Treaty
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Treaty_Group
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`User_Relative_Value
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`User_Value
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             ))
          )
         (`U
          `Asset_Class `Claim_Cost_Index `Compression `Consolidation `Counterparty `Entity `Financing_Instrument `Function `Greek `HGB_Equalization_Line `Inner_Loop `Library_Pattern `Life_Product `Life_Table `Lookup `Market_Index `Peril `Plan `Portfolio `Product `Product_Group `QIS5_Line `QIS5_Region `Return_Class `Risk_Class `State `Supplemental_Model `Transform `Transition `Treaty `Treaty_Group `User_Relative_Value `User_Value
          )))
      (`Prior_Arguments
       .((`value
          `x
          .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{!.k.get_s (6#x),`Arguments`Source}];))
         (`initial
          `"0."
          .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
       .,(`j
          .((`c;`slot;)
            (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
            (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
            (`rl
             .((`value;`"Current Value";)
               (`initial;`"Initial Value";))
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          ))
      (`Combination
       .((`m
          `pseudo
          .((`C;`model;)
            (`j
             .((`l;`"Combination Type";)
               (`o
                `pseudo `Spline `Function `Transform
                )
               (`ol
                (`pseudo `Spline `Function `Transform
                 `"Formulaic Expression" `"Piecewise Linear" `"Library Function" `"Library Transform")
                )
               (`fill;`h;)
               (`c;`combo;)
               (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M;();)
            (`P;;)))
         (`pseudo
          ,"x"
          .((`j
             .((`c;`Text;)
               (`l;`"Formulaic Expression";)
               (`wy;0.7;)
               (`f;{ / to_local[]
  if[(x~_n)|~#x; :x] / if no string to translate
  as:sfsm.split x / Alternating Segments - data,string,data,etc
  if[~#as; :x]  / no modification if no text
  ,/@[as;2*!-_-(#as)%2;decode_source]};)
               (`g;{ / to_canon[]
  if[(x~_n)|~#x; :x] / if no string to translate
  as:sfsm.split x / Alternating Segments - data,string,data,etc
  if[~#as; :x]  / no modification if no text
  ,/@[as;2*!-_-(#as)%2;encode_source]};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`Y;`formulaic_expression;)
            (`M
             ,`pseudo
             )))
         (`Spline
          .((`Input
             0 1.0
             .,(`V;{[p;x]:[~(x~x@<x)&/~x<0.;(1;"Must be a sorted vector of non-negative values")]};))
            (`Output
             0 0.0
             .()))
          .((`j
             .((`c;`Table;)
               (`cltip
                .,(`Input;`"Input values must be sorted from smallest to biggest";)
                )
               (`f
                .((`Output;18.6;)
                  (`Input;18.6;))
                )
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`p
                .((`Input;1.0;)
                  (`Output;0.0;))
                )
               (`l;`"Spline (with linear interpolation)";)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`P;1;)
            (`F
             .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`Input `Output;0#`;0 0.0;();0;0];)
             )
            (`V;{[p;x]:[~#x.Input;(1;"Must contain at least one row")]};)
            (`M
             ,`Spline
             )))
         (`Function
          `Zero
          .((`U;`Function;)
            (`j
             .((`c;`combo;)
               (`o
                `Unspecified_ `New_Function_ `Zero `One `Pi `NA `If `Function_1
                )
               (`u;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`J
             .((`C;{[c;x;d;e;a;u]	d::[d~_n;*x,u;d]
 			e:.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u]
 			e:.[e;(`j;`u);:[;c]]
 			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};`Zero `One `Pi `NA `If];)
               (`D;{  [d;e;a;u]	if[d _in u;d:`Unspecified_];(d;e)};)
               (`R;{  [d;e;a;u]	(:[d _in !u;u@d;d];e)};)
               (`A;{  [d;e;a;u]	(d;e)};)
               (`L;{[x;d;e;a;u]	(d;.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u])}[`Zero `One `Pi `NA `If];))
             )
            (`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Function;`Zero `One `Pi `NA `If];)
            (`M
             ,`Function
             )))
         (`Transform
          `Linear
          .((`U;`Transform;)
            (`j
             .((`c;`combo;)
               (`o
                `Unspecified_ `New_Transform_ `Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN `Transform_1
                )
               (`u;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`J
             .((`C;{[c;x;d;e;a;u]	d::[d~_n;*x,u;d]
 			e:.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u]
 			e:.[e;(`j;`u);:[;c]]
 			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];)
               (`D;{  [d;e;a;u]	if[d _in u;d:`Unspecified_];(d;e)};)
               (`R;{  [d;e;a;u]	(:[d _in !u;u@d;d];e)};)
               (`A;{  [d;e;a;u]	(d;e)};)
               (`L;{[x;d;e;a;u]	(d;.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u])}[`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];))
             )
            (`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Transform;`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];)
            (`M
             ,`Transform
             )))
         (`Single_Argument
          `x
          .((`j
             .((`c;`scalar;)
               (`f;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`fill;`h;)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             `Spline `Transform
             )
            (`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
         (`Argument_List
          ,`x
          .((`j
             .((`c;`Vector;)
               (`f;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`p;`x;)
               (`fill;`b;)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Function
             )
            (`V;{[p;x]r:();r,:(,/function_validation[(!.k.get_s (6#p),`Arguments`Source)_dv p@8;p]'x)_dv _n;:[#r;r;_n]};)))
         (`Initial
          .((`m
             `func
             .((`C;`model;)
               (`j
                .((`l;`"Initial Value";)
                  (`o
                   `func `value
                   )
                  (`ol
                   (`func `value
                    `"Apply Function" `"Fixed Initial Value")
                   )
                  (`fill;`h;)
                  (`c;`combo;)
                  (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
                  (`popup
                   .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                   ))
                )
               (`M;();)
               (`P;;)))
            (`func

             .((`j
                .((`c;`panel;)
                  (`l;`;)
                  (`border;0;))
                )
               (`M
                ,`func
                )))
            (`value
             0.0
             .((`j
                .((`c;`Scalar;)
                  (`f;18.6;)
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`l;`"Fixed Initial Value";)
                  (`fill;`h;)
                  (`popup
                   .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                   ))
                )
               (`M
                ,`value
                ))))
          .((`j
             .((`c;`panel;)
               (`border;0;)
               (`l;`;)
               (`wy;1e-010;)
               (`a
                `m `func
                ))
             )
            (`M
             `pseudo `Spline `Function `Transform
             )
            (`L;0;))))
       .((`j
          .((`c;`panel;)
            (`wy;0.5;)
            (`a
             `m `pseudo `Initial
             ))
          )
         (`P;1;)
         (`X;`UserValues_Arguments.html;))))
    .((`P;1;)
      (`j
       .((`c;`panel;)
         (`a;`by_Path;))
       )))
 .((`j
    .((`c;`panel;)
      (`border;0;)
      (`l;`"Source Details";)
      (`a;`x;))
    )
   (`D
    .((`l;1;)
      (`p;`Argument_List;)
      (`d
       .((`Path_Number

          .,(`X;`UserValues_Arguments_Source_PathNumber.html;))
         (`Fixed
          .((`Period
             ,`"2011 +"
             .,(`T;;))
            (`Value
             ,0.0
             .,(`T;;)))
          .((`j
             .((`l;`"User Time Series";)
               (`c;`table;)
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`p
                .((`Value;0.0;)
                  (`Period;`;))
                )
               (`f;18.6;)
               (`e
                .,(`Period;0;)
                )
               (`bg
                .,(`Period;`e;)
                )
               (`b
                .,(`Period;`n;)
                )
               (`fixed;1;)
               (`popup
                .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                  (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                  (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                  (`Append_Years
                   .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                     (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                     (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                     (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                   )
                  (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];))
                ))
             )
            (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
            (`C;`Future;)
            (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
            (`X;`UserValues_Arguments_Source_UserTimeSeries.html;)))
         (`by_Path
          .((`Mechanics
             .((`Type;`Stock;.())
               (`Repeats;`All;.()))
             .,(`j
                .((`c;`Slot;)
                  (`cell
                   .((`Type
                      .((`c;`combo;)
                        (`o
                         `Stock `Flow `Rate
                         ))
                      )
                     (`Repeats
                      .((`c;`combo;)
                        (`o
                         `Last `All `None
                         )
                        (`ol
                         (`Last `All `None
                          `"Repeat Last Path" `"Repeat All Paths" `"Unspecified Paths are Zero")
                         ))
                      ))
                   ))
                ))
            (`Data
             .((`m
                `Internal
                .((`C;`model;)
                  (`j
                   .((`o
                      `Internal `External
                      )
                     (`l;`"Data Source";)
                     (`ol
                      (`Internal `External
                       `"Internal Data" `"Batch Import File")
                      )
                     (`fill;`h;)
                     (`c;`combo;)
                     (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};))
                   )
                  (`M;();)
                  (`P;;)))
               (`Internal
                .((`Path;!0;.())
                  (`Date
                   !0
                   .,(`V;{[p;x]:[#a:&(x~\:0I)|~1=4::'x;(1;"Not a valid date";,a)]};))
                  (`Value;0#0.0;.()))
                .((`V;{[p;x]:[#a:,/a@&0<#:'a:1_'=+x`Path`Date;(0;"Duplicate path/date pairs are ignored";,(`Path`Date;a))]};)
                  (`j
                   .((`c;`Table;)
                     (`f
                      .((`Value;9.6;)
                        (`Path;{9$_ x};)
                        (`Date;{ / .r.date.f
 if[(~1=4:x)|(x<0)|x~0I; :"Invalid date"]
 d:0 100 100 _vs x                                / separate date into components
 s:date.format_string[]                           / separate format string into components
 i:&s _lin !date.fparts                           / which format components represent parts of the date
 s[i]:{date.fparts[y]x}[d]'s i                    / replace format components with date components
 ,/$s};))
                      )
                     (`g
                      .((`Value;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                        (`Path;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                        (`Date;{:[*r:.[date.g_;,x;:];0I;r 1]};))
                      )
                     (`u
                      .((`Value;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                        (`Path;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                        (`Date;{:[~y=0I;		("";y);	(("Input should be of the form &0";.r.sshortdateexample[]);x)]};))
                      )
                     (`p
                      .((`Path;0;)
                        (`Date;20121231;)
                        (`Value;0.0;))
                      ))
                   )
                  (`M
                   ,`Internal
                   )))
               (`External
                .((`File
                   ""
                   .((`j
                      .((`c;`string;)
                        (`l;`"Batch Import File Location";)
                        (`fill;`h;))
                      )
                     (`V;{[p;x]:[~.f.exists x; (1;"File does not exist")]};)))
                  (`Browse
                   {[x]
  vpath:(-1_ .j.v),`File
  spath:(`. `k`Main`split`right.`II),(-1_ 5_ .j.v),`File
  if[~(f:.f.getNetPath .j.Open`.k.CSV)_in (_n;"")
    .k.set_s[spath;f]
    .[`;vpath;:;f];
    .k.activate .k.add .k.ACTIVE
    ]
  }
                   .((`j
                      .((`c;`button;)
                        (`async;2;)
                        (`wx;0.2;)
                        (`l;`"<html>Browse<br>for File</html>";)
                        (`fill;`h;)
                        (`hpos;`r;)
                        (`vpos;`c;)
                        (`anchor;`c;)
                        (`image;"Open_32.png";))
                      )
                     (`Y;`null;))))
                .((`j
                   .((`c;`panel;)
                     (`a
                      ,`File `Browse
                      )
                     (`wy;1e-010;))
                   )
                  (`M
                   ,`External
                   ))))
             .,(`j
                .((`c;`panel;)
                  (`a
                   `m `Internal
                   ))
                )))
          .((`j
             .((`c;`panel;)
               (`l;`"User Time Series by Path";))
             )
            (`V;{[p;x]if[`External~x`m; if[.f.exists f:x[`External;`File]; :.L.V.external_data[`Path`Date`Value;f] ]]};)
            (`X;`UserValues_Arguments_Source_UserTimeSeriesbyPath.html;)))
         (`Random_Draw
          .((`m
             `Normal
             .((`C;`model;)
               (`j
                .((`l;`Distribution;)
                  (`fill;`h;)
                  (`c;`combo;)
                  (`o
                   `Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                   )
                  (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
                  (`ol
                   (`Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                    `Beta `Binomial `Chi_Squared `"Discrete Distribution" `Gamma `"Linear Distribution Function" `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull)
                   ))
                )
               (`M;();)
               (`P;;)))
            (`Hash
             -1
             .((`M
                `Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                )
               (`j
                .((`c;`scalar;)
                  (`f;{:[0>4:x;_f'x;x<0;"Default";9$_ x]};)
                  (`g;{:[~&/x _lin"0123456789,.";-1;.C[`G;`integer] x]};)
                  (`u;{:[y~0n;		("Input should be numeric";x)
                   y~0N;		("Input should be integer-valued";x)
                   y>max:65536;		(("Input must be at most &0";$max);max)
					("";y)]};)
                  (`fill;`h;))
                )))
            (`Beta
             .((`alpha
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`beta
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`alpha;`"Shape Parameter (alpha)";)
                     (`beta;`"Shape Parameter (beta)";))
                   ))
                )
               (`M
                ,`Beta
                )))
            (`Binomial
             .((`n
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`p
                `"0.5"
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`n;`"n parameter (number of trials)";)
                     (`p;`"p parameter (prob. of success)";))
                   ))
                )
               (`M
                ,`Binomial
                )))
            (`Chi_Squared
             .,(`df
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .,(`df;`"Degrees of freedom";)
                   ))
                )
               (`M
                ,`Chi_Squared
                )))
            (`Discrete_Distribution
             .((`probability
                ,1.0
                .())
               (`value
                ,0.0
                .()))
             .((`j
                .((`l;`"Discrete Distribution";)
                  (`c;`Table;)
                  (`cl
                   .((`probability;`"Cumulative\nProbabilities";)
                     (`value;`"Sorted\nDiscrete\nValues";))
                   )
                  (`cltip
                   .((`probability;`"Cumulative probabilities for discrete distribution";)
                     (`value;`"Discrete values must be sorted from smallest to largest";))
                   )
                  (`p
                   .((`probability;0.0;)
                     (`value;0.0;))
                   )
                  (`f
                   .((`probability;9.6;)
                     (`value;18.6;))
                   )
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                )
               (`P;1;)
               (`T;;)
               (`F
                .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`probability `value;0#`;0 0.0;();0;0];)
                )
               (`V;{[p;x]
  r:()
  if[{(~x~x@<x)|(0.>*x)|~1.=*|x}@x.probability
   r,:,(1;"Probabilities must be a sorted vector of cumulative probabilities ending with 1")]
  if[{(~x~x@<x)}@x.value
   r,:,(1;"Values must be sorted in acsending order")]
  :[0=#r;_n;r]};)
               (`M
                ,`Discrete_Distribution
                )))
            (`Gamma
             .((`a
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`b
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`a;`"Shape Parameter (a)";)
                     (`b;`"Rate Parameter (b)";))
                   ))
                )
               (`M
                ,`Gamma
                )))
            (`Linear_Function
             .((`probability
                0 1.0
                .())
               (`value
                0 0.0
                .()))
             .((`j
                .((`l;`"Linear Distribution Function";)
                  (`c;`Table;)
                  (`cl
                   .((`probability;`"Cumulative\nProbabilities";)
                     (`value;`"Sorted\nCutpoints";))
                   )
                  (`cltip
                   .((`probability;`"Cumulative probabilities at cutpoints of piece-wise linear distribution (uniform distribution between cutpoints)";)
                     (`value;`"Values (at cutpoints) must be sorted from smallest to largest";))
                   )
                  (`p
                   .((`probability;0.0;)
                     (`value;0.0;))
                   )
                  (`f
                   .((`probability;9.6;)
                     (`value;18.6;))
                   )
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                )
               (`P;1;)
               (`T;;)
               (`F
                .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`probability `value;0#`;0 0.0;();0;0];)
                )
               (`V;{[p;x]
  r:()
  if[{(~x~x@<x)|(~0.=*x)|~1.=*|x}@x.probability
   r,:,(1;"Probabilities must be a sorted vector of cumulative probabilities starting with 0 and ending with 1")]
  if[{(~x~x@<x)}@x.value
   r,:,(1;"Values must be sorted in acsending order")]
  :[0=#r;_n;r]};)
               (`M
                ,`Linear_Function
                )))
            (`Loggamma
             .((`a
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`b
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`a;`"Shape Parameter (a) of underlying Gamma";)
                     (`b;`"Rate Parameter (b) of underlying Gamma";))
                   ))
                )
               (`M
                ,`Loggamma
                )))
            (`Lognormal
             .((`mean
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`stdev
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`mean;`Mean;)
                     (`stdev;`"Standard Deviation";))
                   ))
                )
               (`M
                ,`Lognormal
                )))
            (`Negative_Binomial
             .((`r
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`p
                `"0.5"
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`r;`"r parameter";)
                     (`p;`"p parameter (prob. of success)";))
                   ))
                )
               (`M
                ,`Negative_Binomial
                )))
            (`Negative_Binomial_from_Moments
             .((`mean
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`stdev
                `"2."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`mean;`Mean;)
                     (`stdev;`"Standard Deviation";))
                   ))
                )
               (`M
                ,`Negative_Binomial_from_Moments
                )))
            (`Normal
             .((`mean
                `"0."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`stdev
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`mean;`Mean;)
                     (`stdev;`"Standard Deviation";))
                   ))
                )
               (`M
                ,`Normal
                )))
            (`Pareto
             .((`alpha
                `"2."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`min
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`alpha;`"Shape Parameter (alpha)";)
                     (`min;`"Location Parameter (minimum value)";))
                   ))
                )
               (`M
                ,`Pareto
                )))
            (`Poisson
             .,(`lambda
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .,(`lambda;`Lambda;)
                   ))
                )
               (`M
                ,`Poisson
                )))
            (`Resampling
             .,(`value
                ,0.0
                .())
             .((`j
                .((`l;`Resampling;)
                  (`c;`Table;)
                  (`cl
                   .,(`value;`"Equally\nProbable\nValues";)
                   )
                  (`p
                   .,(`value;0.0;)
                   )
                  (`f
                   .,(`value;18.6;)
                   )
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                )
               (`P;1;)
               (`T;;)
               (`F
                .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[,`value;0#`;,0.0;();0;0];)
                )
               (`M
                ,`Resampling
                )))
            (`T_Distribution
             .,(`df
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .,(`df;`"Degrees of freedom";)
                   ))
                )
               (`M
                ,`T_Distribution
                )))
            (`Uniform
             .((`min
                `"0."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`max
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`min;`Minimum;)
                     (`max;`Maximum;))
                   ))
                )
               (`M
                ,`Uniform
                )))
            (`Weibull
             .((`alpha
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`beta
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`alpha;`"Shape Parameter (alpha)";)
                     (`beta;`"Scale Parameter (beta)";))
                   ))
                )
               (`M
                ,`Weibull
                ))))
          .((`j
             .((`c;`panel;)
               (`a
                `m `Hash `Normal
                ))
             )
            (`X;`UserValues_Arguments_Source_RandomDraw.html;)))
         (`External_Rate
          .((`m
             `Bond_Yield
             .((`C;`model;)
               (`j
                .((`l;`"Model Choice";)
                  (`fill;`h;)
                  (`c;`combo;)
                  (`o
                   `Bond_Yield `FX `Inflation
                   )
                  (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
                  (`ol
                   (`Bond_Yield `FX `Inflation
                    `"Factor of Bond Yields" `"Factor of Foreign Exchange Rate" `"Factor of Inflation")
                   ))
                )
               (`M;();)
               (`P;;)))
            (`Bond_Yield
             .((`Period
                ,`"2011 +"
                .,(`T;{[nn;x;y]x,nn}[`future_period];))
               (`mrkt
                ,`Treasury
                .())
               (`econ
                ,`US
                .,(`V;{[p;x]
  :[1=#e:?x a:&~x _lin `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
         (1;("Economy &0 is not in the list of economies to run for this simulation";$e);,,a)
    1<#e;(1;("Economies &0 are not in the list of economies to run for this simulation";,/" ",/:$:'e);,,a)]};))
               (`year
                ,`"10."
                .,(`V;{[p;x]r:();r,:(,/function_validation[!.k.get_s (6#p),`Arguments`Source;p]'x)_dv _n;:[#r;r;_n]};))
               (`lags
                ,0
                .,(`V;{[p;x]:[#a:&~(x>-1)&1=4::'x;(1;"Must be non-negative integers";,,a)]};))
               (`avgp
                ,1
                .,(`V;{[p;x]:[#a:&~(x>0)&1=4::'x;(1;"Must be positive integers";,,a)]};))
               (`mult
                ,1.0
                .())
               (`sprd
                ,0.0
                .()))
             .((`j
                .((`l;`"Factor of Bond Yields";)
                  (`c;`table;)
                  (`p
                   .((`Period;`;)
                     (`mrkt;`Treasury;)
                     (`econ;`US;)
                     (`year;`"10.";)
                     (`lags;0;)
                     (`avgp;1;)
                     (`mult;1.0;)
                     (`sprd;0.0;)
                     (`round;`Nearest;))
                   )
                  (`f
                   .((`lags;{9$_ x};)
                     (`avgp;{9$_ x};)
                     (`mult;9.6;)
                     (`sprd;9.6;))
                   )
                  (`e
                   .,(`Period;0;)
                   )
                  (`bg
                   .,(`Period;`e;)
                   )
                  (`b
                   .,(`Period;`n;)
                   )
                  (`fixed;1;)
                  (`popup
                   .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                     (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                     (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                     (`Append_Years
                      .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                        (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                        (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                        (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                      )
                     (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                     (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];))
                   )
                  (`cl
                   .((`mrkt;`Rating;)
                     (`econ;`Economy;)
                     (`year;`"Maturity\n(in Years)";)
                     (`lags;`"Lag\n(in periods)";)
                     (`avgp;`"Number of\nPeriods to\nAverage";)
                     (`mult;`"Multiplicative\nFactor\non Yield";)
                     (`sprd;`"Additive Factor\nto Yield\n(Spread)";))
                   )
                  (`cltip
                   .((`econ;`"<html>US:  United States&nbsp;<br>&nbsp;DE:  Germany&nbsp;<br>&nbsp;GB:  Great Britain&nbsp;<br>&nbsp;CH:  Switzerland&nbsp;<br>&nbsp;AU:  Australia&nbsp;<br>&nbsp;CA:  Canada&nbsp;<br>&nbsp;JP:  Japan&nbsp;<br>&nbsp;DK:  Denmark&nbsp;<br>&nbsp;NO:  Norway&nbsp;<br>&nbsp;SE:  Sweden&nbsp;<br>&nbsp;BR:  Brazil&nbsp;<br>&nbsp;PL:  Poland&nbsp;<br>&nbsp;KR:  South Korea&nbsp;<br>&nbsp;TW:  Taiwan&nbsp;<br>&nbsp;HK:  Hong Kong&nbsp;<br>&nbsp;CN:  China&nbsp;<br>&nbsp;</html>";)
                     (`year;`"<html>Maturity expressed in years.&nbsp;<br>&nbsp;May be a function of other arguments&nbsp;<br>&nbsp;</html>";)
                     (`lags;`"<html>&nbsp;The lag in periods (e.g. 0 for no lag,&nbsp;<br>&nbsp;1 to use bond yield from one period ago, etc.)&nbsp;</html>";)
                     (`avgp;`"<html>&nbsp;Use values greater than 1 to smooth bond yields&nbsp;<br>&nbsp;by averaging a number of historical periods&nbsp;</html>";)
                     (`mult;`"<html>&nbsp;The bond yield (after lagging and smoothing)&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;</html>";)
                     (`sprd;`"<html>&nbsp;This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the bond yield (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;</html>";)
                     (`round;`"<html>Rounding method for Maturity&nbsp;<br>&nbsp;Up, Down, and Nearest move to the relative simulation-frerquency point on the yield curve.&nbsp;<br>&nbsp;Interpolate does a linear interpolation based on the two nearest points.&nbsp;<br>&nbsp;</html>";))
                   )
                  (`cell
                   .((`mrkt
                      .((`c;`combo;)
                        (`o
                         `Treasury `Pfandbriefe `AAA `AA `A `BBB `High_Yield
                         ))
                      )
                     (`econ
                      .((`c;`combo;)
                        (`o
                         `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                         ))
                      )
                     (`round
                      .((`c;`combo;)
                        (`o
                         `Up `Down `Nearest `Interpolate
                         ))
                      ))
                   )
                  (`editor
                   .((`mrkt;1;)
                     (`econ;1;)
                     (`round;1;))
                   )
                  (`g
                   .((`lags;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`avgp;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`year;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};))
                   )
                  (`u
                   .((`lags;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`avgp;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`year;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};))
                   ))
                )
               (`T;;)
               (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
               (`C;`External_Rate_Bond_Yield;)
               (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
               (`X;`UserValues_Arguments_Source_ExternalRate_FactorofBondYields.html;)
               (`V;{[p;x] r:()
            hist_ylds:.k.get_s (0;`A;`System;`Historical_Yields)
            if[#a:&{[h;p;e;y]p>-2+#h[e;y;`Period]}[hist_ylds]'[(-1+x.lags+x.avgp)*12%.G`pdy;x.econ;x.mrkt]
              r,:,(0;("There is inadequate historical yield data for economy &0 and market &1.  The necessary additional history is assumed to be the earliest available data.";$x.econ a;$x.mrkt a))]
            :[#r;r;_n]};)
               (`M
                ,`Bond_Yield
                )))
            (`FX
             .((`Period
                ,`"2011 +"
                .,(`T;{[nn;x;y]x,nn}[`future_period];))
               (`econ
                ,`USD
                .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[1=#e:?x a:&~x _lin c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$e);,,a)
    1<#e;(1;("Currencies &0 are not in the list of currencies to run for this simulation";,/" ",/:$:'e);,,a)]};))
               (`curr
                ,`USD
                .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[1=#e:?x a:&~x _lin c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$e);,,a)
    1<#e;(1;("Currencies &0 are not in the list of currencies to run for this simulation";,/" ",/:$:'e);,,a)]};))
               (`lags
                ,0
                .,(`V;{[p;x]:[#a:&~(x>-1)&1=4::'x;(1;"Must be non-negative integers";,,a)]};))
               (`avgp
                ,1
                .,(`V;{[p;x]:[#a:&~(x>0)&1=4::'x;(1;"Must be positive integers";,,a)]};))
               (`mult
                ,1.0
                .())
               (`sprd
                ,0.0
                .()))
             .((`j
                .((`l;`"Factor of Foreign Exchange Rate";)
                  (`c;`table;)
                  (`p
                   .((`Period;`;)
                     (`lags;0;)
                     (`avgp;1;)
                     (`mult;1.0;)
                     (`sprd;0.0;)
                     (`econ;`USD;)
                     (`curr;`USD;))
                   )
                  (`f
                   .((`lags;{9$_ x};)
                     (`avgp;{9$_ x};)
                     (`mult;9.6;)
                     (`sprd;9.6;))
                   )
                  (`e
                   .,(`Period;0;)
                   )
                  (`bg
                   .,(`Period;`e;)
                   )
                  (`b
                   .,(`Period;`n;)
                   )
                  (`fixed;1;)
                  (`popup
                   .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                     (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                     (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                     (`Append_Years
                      .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                        (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                        (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                        (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                      )
                     (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                     (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];))
                   )
                  (`cl
                   .((`econ;`"Numerator\nCurrency";)
                     (`curr;`"Denominator\nCurrency";)
                     (`lags;`"Lag\n(in periods)";)
                     (`avgp;`"Number of\nPeriods to\nAverage";)
                     (`mult;`"Multiplicative\nFactor\non Rate";)
                     (`sprd;`"Additive Factor\nto Rate\n(Spread)";))
                   )
                  (`cltip
                   .((`econ;`"<html>Home currency whose rate is used as the basis&nbsp;<br>&nbsp;for the external rate calculation&nbsp;<br>&nbsp;USD:  US Dollar&nbsp;<br>&nbsp;EUR:  Euro&nbsp;<br>&nbsp;GBP:  British Pound&nbsp;<br>&nbsp;CHF:  Swiss Franc&nbsp;<br>&nbsp;AUD:  Australian Dollar&nbsp;<br>&nbsp;CAD:  Canadian Dollar&nbsp;<br>&nbsp;JPY:  Japanese Yen&nbsp;<br>&nbsp;DKK:  Danish Krone&nbsp;<br>&nbsp;NOK:  Norwaegian Krone&nbsp;<br>&nbsp;SEK:  Swedish Krona&nbsp;<br>&nbsp;BRL:  Brazilian Real&nbsp;<br>&nbsp;PLN:  Polish Zloty&nbsp;<br>&nbsp;KRW:  South Korean Won&nbsp;<br>&nbsp;TWD:  Taiwan Dollar&nbsp;<br>&nbsp;HKD:  Hong Kong Dollar&nbsp;<br>&nbsp;CNY:  Chinese Yuan&nbsp;<br>&nbsp;</html>";)
                     (`curr;`"<html>Foreign currency whose exchange rate is used as the starting point&nbsp;<br>&nbsp;for the external rate calculation&nbsp;<br>&nbsp;USD:  US Dollar&nbsp;<br>&nbsp;EUR:  Euro&nbsp;<br>&nbsp;GBP:  British Pound&nbsp;<br>&nbsp;CHF:  Swiss Franc&nbsp;<br>&nbsp;AUD:  Australian Dollar&nbsp;<br>&nbsp;CAD:  Canadian Dollar&nbsp;<br>&nbsp;JPY:  Japanese Yen&nbsp;<br>&nbsp;DKK:  Danish Krone&nbsp;<br>&nbsp;NOK:  Norwaegian Krone&nbsp;<br>&nbsp;SEK:  Swedish Krona&nbsp;<br>&nbsp;BRL:  Brazilian Real&nbsp;<br>&nbsp;PLN:  Polish Zloty&nbsp;<br>&nbsp;KRW:  South Korean Won&nbsp;<br>&nbsp;TWD:  Taiwan Dollar&nbsp;<br>&nbsp;HKD:  Hong Kong Dollar&nbsp;<br>&nbsp;CNY:  Chinese Yuan&nbsp;<br>&nbsp;</html>";)
                     (`lags;`"<html>The lag in periods (e.g. 0 for no lag,&nbsp;<br>&nbsp;1 to use rate from one period ago, etc.)&nbsp;<br>&nbsp;</html>";)
                     (`avgp;`"<html>Use values greater than 1 to smooth rates&nbsp;<br>&nbsp;by averaging a number of historical periods&nbsp;<br>&nbsp;</html>";)
                     (`mult;`"<html>The rate (after lagging and smoothing)&nbsp&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;<br>&nbsp;</html>";)
                     (`sprd;`"<html>This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the rate (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;<br>&nbsp;</html>";))
                   )
                  (`cell
                   .((`econ
                      .((`c;`combo;)
                        (`o
                         `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                         ))
                      )
                     (`curr
                      .((`c;`combo;)
                        (`o
                         `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                         ))
                      ))
                   )
                  (`editor
                   .((`econ;1;)
                     (`curr;1;))
                   )
                  (`g
                   .((`lags;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`avgp;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};))
                   )
                  (`u
                   .((`lags;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`avgp;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                   ))
                )
               (`T;;)
               (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
               (`C;`External_Rate_FX;)
               (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
               (`X;`UserValues_Arguments_Source_ExternalRate_FactorofForeignExchangeRate.html;)
               (`M
                ,`FX
                )))
            (`Inflation
             .((`Period
                ,`"2011 +"
                .,(`T;{[nn;x;y]x,nn}[`future_period];))
               (`econ
                ,`US
                .,(`V;{[p;x]
  :[1=#e:?x a:&~x _lin `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
         (1;("Economy &0 is not in the list of economies to run for this simulation";$e);,,a)
    1<#e;(1;("Economies &0 are not in the list of economies to run for this simulation";,/" ",/:$:'e);,,a)]};))
               (`mult
                ,1.0
                .())
               (`sprd
                ,0.0
                .()))
             .((`j
                .((`l;`"Factor of Inflation";)
                  (`c;`table;)
                  (`p
                   .((`Period;`;)
                     (`mult;1.0;)
                     (`sprd;0.0;)
                     (`econ;`US;))
                   )
                  (`f
                   .((`mult;9.6;)
                     (`sprd;9.6;))
                   )
                  (`e
                   .,(`Period;0;)
                   )
                  (`bg
                   .,(`Period;`e;)
                   )
                  (`b
                   .,(`Period;`n;)
                   )
                  (`fixed;1;)
                  (`popup
                   .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                     (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                     (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                     (`Append_Years
                      .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                        (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                        (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                        (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                      )
                     (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                     (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];))
                   )
                  (`cl
                   .((`econ;`Economy;)
                     (`mult;`"Multiplicative\nFactor\non Rate";)
                     (`sprd;`"Additive Factor\nto Rate\n(Spread)";))
                   )
                  (`cltip
                   .((`econ;`"<html>&nbsp;Home economy whose inflation is used as the basis&nbsp;<br>&nbsp;for the external rate calculation&nbsp;</html>";)
                     (`mult;`"<html>&nbsp;The rate (after lagging and averaging)&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;</html>";)
                     (`sprd;`"<html>&nbsp;This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the rate (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;</html>";))
                   )
                  (`cell
                   .,(`econ
                      .((`c;`combo;)
                        (`o
                         `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                         ))
                      )
                   )
                  (`editor
                   .,(`econ;1;)
                   )
                  (`g
                   .((`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};))
                   )
                  (`u
                   .((`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                   ))
                )
               (`T;;)
               (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
               (`C;`External_Rate_Inflation;)
               (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
               (`X;`UserValues_Arguments_Source_ExternalRate_FactorofInflation.html;)
               (`M
                ,`Inflation
                ))))
          .((`j
             .((`c;`panel;)
               (`a
                `m `Bond_Yield
                ))
             )
            (`X;`UserValues_Arguments_Source_ExternalRate.html;)))
         (`Treasury_Curve
          .((`Economy
             `US
             .,(`V;{[p;x]
  :[~x _in `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
    (1;("Economy &0 is not in the list of economies to run for this simulation";$x))]};))
            (`Maturity
             1.0
             .,(`V;{[p;x]:[x<0;(1;"Must be a non-negative number")]};))
            (`Item;`Continuous_Nominal_Yield;.())
            (`Period;`Current;.()))
          .,(`j
             .((`c;`Slot;)
               (`l;`"Treasury Curve";)
               (`cell
                .((`Economy
                   .((`c;`combo;)
                     (`o
                      `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Continuous_Nominal_Yield `Annual_Nominal_Yield `Continuous_Real_Yield `Annual_Real_Yield `Nominal_Price `Real_Price
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;))
             ))
         (`Market_Index
          .((`Index
             `Market_Index_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Market_Index;0#`];))
            (`Item;`Dividend_Yield;.())
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`l;`"Market Index";)
               (`cell
                .((`Index
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Market_Index_ `Market_Index_1
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Dividend_Yield `"Price/Level" `Modeled_Level `Modeled_Dividend_Yield `Variance `Volatility
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`p
                .((`Index;`Market_Index_1;)
                  (`Item;`Dividend_Yield;)
                  (`Period;`Current;)
                  (`Economy;`US;))
                )
               (`u
                .,(`Index;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`V;{[p;x]
            r:()
            t:.k.get_s@0,`A`User`Investments`Existing_and_New_Issues`Market_Indices`Definitions,x.Index,`m
            if[`Unspecified_=x.Index
              r,:,(1;"A valid input must be specified:";,,`Index)
              t:`
              ] / if #bad:&`Unspecified_=x.Index
            if[(~t=`Modeled_Market_Index)&x.Item _lin`Modeled_Level`Modeled_Dividend_Yield
              r,:,(1;"\"Modeled Level\" and \"Modeled Dividend Yield\" are available only in Modeled Market Indices";,`Item`Index)
              ] / if #bad:&(~t=`Modeled_Market_Index)&x.Item _lin`Modeled_Level`Modeled_Dividend_Yield
            if[(~t=`Copy_of_Common_Stock_Index)&x.Item _lin`Variance`Volatility
              r,:,(1;"\"Variance\" and\"Volatility\" are available only in Copies of Common Stock Indices";,`Item`Index)
              ] / if #bad:&(~t=`Copy_of_Common_Stock_Index)&x.Item _lin`Variance`Volatility
            :[#r;r;_n]};)
            (`J
             .,(`Market_Index
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Index;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Index];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Index];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Index;,0#`];)
                  (`F
                   ,`Index
                   ))
                )
             )
            (`U
             ,`Market_Index
             )))
         (`Common_Stock_Index
          .((`Economy
             `US
             .,(`V;{[p;x]
  :[~x _in `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
    (1;("Economy &0 is not in the list of economies to run for this simulation";$x))]};))
            (`Index;`Large_Cap;.())
            (`Item;`Price;.())
            (`Period;`Current;.()))
          .,(`j
             .((`c;`Slot;)
               (`l;`"Common Stock Index";)
               (`cell
                .((`Economy
                   .((`c;`combo;)
                     (`o
                      `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                      ))
                   )
                  (`Index
                   .((`c;`combo;)
                     (`o
                      `Large_Cap `Mid_Cap `Broad_Cap `Small_Cap `Other_Sector
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Price `Volatility `Dividend_Yield
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;))
             ))
         (`Return_Class_Return
          .((`Class
             `Return_Class_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Return_Class;0#`];))
            (`Component;`Total;.())
            (`Frequency;`Simulation;.())
            (`Currency
             `USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cl
                .,(`Currency;`"Return\nCurrency";)
                )
               (`cell
                .((`Class
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Return_Class_ `Return_Class_1
                      ))
                   )
                  (`Component
                   .((`c;`combo;)
                     (`o
                      `Total `Income `Price
                      ))
                   )
                  (`Frequency
                   .((`c;`combo;)
                     (`o
                      `Simulation `Annualized `YY_Annual `Cumulative
                      ))
                   )
                  (`Currency
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_ReturnClassReturn.html;)
            (`J
             .,(`Return_Class
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
                  (`F
                   ,`Class
                   ))
                )
             )
            (`U
             ,`Return_Class
             )))
         (`Asset_Class_Return
          .((`Class
             `Asset_Class_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;0#`];))
            (`Component;`Total;.())
            (`Frequency;`Simulation;.())
            (`Currency
             `USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cl
                .((`Currency;`"Return\nCurrency";)
                  (`Class;`"Asset Class";))
                )
               (`cell
                .((`Class
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                      ))
                   )
                  (`Component
                   .((`c;`combo;)
                     (`o
                      `Total `Income `Price
                      ))
                   )
                  (`Frequency
                   .((`c;`combo;)
                     (`o
                      `Simulation `Annualized `YY_Annual `Cumulative `Index
                      ))
                   )
                  (`Currency
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_AssetClassReturn.html;)
            (`J
             .,(`Asset_Class
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
                  (`F
                   ,`Class
                   ))
                )
             )
            (`U
             ,`Asset_Class
             )
            (`V;{[p;x]r:()
          if[(`Index~x`Frequency)&~(x`Component) _in`Price`Total
            r,:,(1;"Component must be Price or Total for Frequency=Index") ]
          if[(`Index~x`Frequency)&~(x`Currency)~acb:.k.get_s (0;`A;`User;`Investments;`Asset_Classes;x`Class;`Basis)
            r,:,(1;("Currency must be the Index basis of &0";$acb)) ]
          :[#r;r;_n]};)))
         (`Portfolio_Return
          .((`Class
             `Asset_Class_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;0#`];))
            (`Component;`Total;.())
            (`Frequency;`Simulation;.())
            (`Currency
             `USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
            (`Period;`Current;.())
            (`Return_Portfolio
             `All
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Portfolio;,`All];)))
          .((`j
             .((`c;`Slot;)
               (`cl
                .((`Currency;`"Return\nCurrency";)
                  (`Return_Portfolio;`Portfolio;)
                  (`Class;`"Asset Class";))
                )
               (`cell
                .((`Class
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                      ))
                   )
                  (`Component
                   .((`c;`combo;)
                     (`o
                      `Total `Income `Price
                      ))
                   )
                  (`Frequency
                   .((`c;`combo;)
                     (`o
                      `Simulation `Annualized `YY_Annual `Cumulative
                      ))
                   )
                  (`Currency
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   )
                  (`Return_Portfolio
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Portfolio_ `All `Portfolio_1
                      ))
                   ))
                )
               (`editor;1;)
               (`a
                `Return_Portfolio `Class `Component `Frequency `Currency `Period
                )
               (`u
                .((`Return_Portfolio;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                  (`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
                ))
             )
            (`X;`UserValues_Arguments_Source_PortfolioReturn.html;)
            (`J
             .((`Asset_Class
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
                  (`F
                   ,`Class
                   ))
                )
               (`Portfolio
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Return_Portfolio;,,`All];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Return_Portfolio];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Return_Portfolio];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Return_Portfolio;,,`All];)
                  (`F
                   ,`Return_Portfolio
                   ))
                ))
             )
            (`U
             `Asset_Class `Portfolio
             )))
         (`Life_Insurance
          .((`Product_Group
             `Product_Group_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Product_Group;0#`];))
            (`Category;`Income_Statement;.())
            (`Type;`Benefits;.())
            (`Item;`Total;.())
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`l;`"Life Insurance";)
               (`cl
                .,(`Product_Group;`"Product\nGroup";)
                )
               (`cell
                .((`Product_Group
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Product_Group_ `Product_Group_1
                      ))
                   )
                  (`Category
                   .((`c;`combo;)
                     (`o
                      `BaFin `Basis_Post `Basis_Pre `Benefit `Bonus_Post `Bonus_Pre `Cashflow `Change `Dividend `Expense `Income_Post `Income_Pre `Income_Statement `Participation `Reserve_Post `Reserve_Pre `Reserves `Reserves_Post `Scaled `Surplus_Post `Surplus_Pre `Tax `Volume
                      ))
                   )
                  (`Type
                   .((`c;`combo;)
                     (`o
                      `Acquisition `Adjustment `Amount `Base `Basis `Benefits `Convexity_Fisher_Weil `Convexity_Modified `Declared `Direct `Dividend `Duration_Fisher_Weil `Duration_Modified `Dynamic_Interest `Economic `Expenses `Face_Amount `Final `Free `Gain `HGB `HGB_Life `IFRS `Income `Interest `Investment `Maintenance `Negative `Net_Present_Value `On_Deposit `Other `Other_Exp `Paid `Policyholder `Pre_Dividend `Pre_Trade `Premium `Premium_from_Equity `Required `Reversionary `Separate `Shareholder `Solvency_II `Tax `Terminal `Terminal_Prev_Decl `Total `US `US_GAAP `US_Statutory_Life `Underwriting `VTRUE
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Acquisition `Adjusted_Premium `Adjustments `Advanced_Premium `Allocated `Allocated_Dynamic `Allocated_Fixed `Amount `Annuity `Annuity_Allocated `Annuity_Allocated_Fixed `Annuity_Declaration `Annuity_Declaration_Difference `Annuity_Earned `Annuity_Extra_Fixed `Annuity_Maturing `Annuity_Non_Interest `Annuity_Premium `Annuity_Projected `Annuity_Required `Annuity_Total_Dynamic `Annuity_Total_Fixed `Annuity_Unallocated `Base `Basis `Benefit `Cash_Value `Commission `Committed `Credit `DAC_Asset `DAC_Balance `Death `Death_Benefits `Declaration `Declaration_Difference `Deposit `Dir_or_Ind_Dist `Direct `Disability_AH `Div_Accum `Dividend `Divs_on_Def_Annuities `Dynamic_Interest `Earned `Earned_Reduction `Excess_Interest `Expense `Experience_Rated_Refunds `Extra_Fixed `Factor `Fees_Charged `Free `Future `General_Deductions `Gross `Group_Life_Premium `Income `Increase `Inforce `Interest `Interest_Credited `Interest_Extra `Interest_NonExtra `Interest_on_Deposit `Investment `Lapse `Life `Maintenance `Maturing `Maturity `Miscellaneous `NAR `Negative `Net `Net_Amount_at_Risk `Non_Annuity_Allocated `Non_Annuity_Allocated_Fixed `Non_Annuity_Declaration `Non_Annuity_Declaration_Difference `Non_Annuity_Earned `Non_Annuity_Extra_Fixed `Non_Annuity_Maturing `Non_Annuity_Non_Interest `Non_Annuity_Projected `Non_Annuity_Required `Non_Annuity_Total_Dynamic `Non_Annuity_Total_Fixed `Non_Annuity_Unallocated `Non_Exit `Non_Interest `Non_Interest_Dynamic `Non_Premium `Non_Terminal `On_Deposit `Operations_Loss_Deduction `Other `Overhead `PH_Surplus `Payable `Payout `Policy `Policyholder_Divs_Paid `Positive `Premium `Premium_Adjustments `Premium_Mortality `Premium_Reserve `Projected `Rebates `Received `Req_Add_Reserve `Required `Required_Interest `Reserve `Reserve_Payout `Reserve_Str_Account `Reserve_Str_Bonus `Risk `SGA_Base `SGA_Benefit `Separate `Special_Reserve `Supplementary_Contracts `Surrender `Terminal `Tied `Total `Total_Dynamic `Total_Fixed `Transfer `Unallocated `Unallocated_Dynamic `Unallocated_Fixed `User_Data_1 `User_Data_2
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Product_Group;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_LifeInsurance.html;)
            (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Basis_Pre `Terminal `Annuity_Declaration
              `Basis_Pre `Terminal `Non_Annuity_Declaration
              `Basis_Pre `Terminal `Declaration
              `Basis_Pre `Terminal `SGA_Base
              `Basis_Pre `Terminal_Prev_Decl `SGA_Benefit
              `Basis_Pre `Terminal_Prev_Decl `Earned
              `Benefit `Total `Death
              `Benefit `Total `Surrender
              `Benefit `Total `Maturity
              `Benefit `Total `Annuity
              `Benefit `Total `Total
              `Benefit `Base `Death
              `Benefit `Base `Surrender
              `Benefit `Base `Maturity
              `Benefit `Base `Annuity
              `Benefit `Base `Total
              `Benefit `Dynamic_Interest `Death
              `Benefit `Dynamic_Interest `Surrender
              `Benefit `Dynamic_Interest `Maturity
              `Benefit `Dynamic_Interest `Annuity
              `Benefit `Dynamic_Interest `Total
              `Benefit `Terminal `Death
              `Benefit `Terminal `Surrender
              `Benefit `Terminal `Maturity
              `Benefit `Terminal `Annuity
              `Benefit `Terminal `Total
              `Benefit `Terminal `Transfer
              `Benefit `Interest `Total
              `Benefit `Declared `Total
              `Benefit `Adjustment `Reserve
              `Benefit `Adjustment `Terminal
              `Benefit `Adjustment `Non_Interest
              `Benefit `Adjustment `Total
              `Benefit `Declared `Direct
              `Benefit `Paid `Direct
              `Benefit `Declared `Dividend
              `Benefit `Declared `Terminal
              `Bonus_Pre `Total `Non_Interest
              `Bonus_Pre `Total `Non_Interest_Dynamic
              `Bonus_Pre `Total `Extra_Fixed
              `Bonus_Pre `Terminal `Non_Interest
              `Bonus_Pre `Terminal `Non_Interest_Dynamic
              `Bonus_Pre `Terminal `Extra_Fixed
              `Bonus_Pre `Dividend `Non_Interest
              `Bonus_Pre `Dividend `Non_Interest_Dynamic
              `Bonus_Pre `Dividend `Extra_Fixed
              `Bonus_Pre `Direct `Non_Interest
              `Bonus_Pre `Direct `Non_Interest_Dynamic
              `Bonus_Pre `Direct `Extra_Fixed
              `Bonus_Pre `Reversionary `Non_Interest
              `Bonus_Pre `Reversionary `Non_Interest_Dynamic
              `Bonus_Pre `Reversionary `Extra_Fixed
              `Bonus_Pre `Base `Non_Interest
              `Bonus_Pre `Base `Non_Interest_Dynamic
              `Bonus_Pre `Base `Extra_Fixed
              `Bonus_Pre `Terminal `Annuity_Non_Interest
              `Bonus_Pre `Terminal `Non_Annuity_Non_Interest
              `Bonus_Pre `Terminal `Annuity_Extra_Fixed
              `Bonus_Pre `Terminal `Non_Annuity_Extra_Fixed
              `Bonus_Pre `Total `Factor
              `Bonus_Pre `Total `Req_Add_Reserve
              `Bonus_Pre `Terminal `Annuity_Earned
              `Bonus_Pre `Terminal `Non_Annuity_Earned
              `Bonus_Pre `Terminal `Annuity_Maturing
              `Bonus_Pre `Terminal `Non_Annuity_Maturing
              `Bonus_Pre `Terminal `Annuity_Total_Dynamic
              `Bonus_Pre `Terminal `Non_Annuity_Total_Dynamic
              `Bonus_Pre `Terminal `Declaration
              `Bonus_Pre `Terminal `Earned
              `Bonus_Pre `Terminal `Total
              `Bonus_Pre `Terminal `Total_Fixed
              `Bonus_Pre `Terminal `Total_Dynamic
              `Bonus_Pre `Terminal `Gross
              `Bonus_Pre `Terminal `Maturing
              `Change `Base `Total
              `Change `Dynamic_Interest `Total
              `Change `On_Deposit `Total
              `Change `Other `Total
              `Change `Separate `Total
              `Change `Terminal `Total
              `Change `Premium `Total
              `Change `Income `Total
              `Change `Negative `Total
              `Expense `Acquisition `Total
              `Expense `Maintenance `Total
              `Expense `Other_Exp `Total
              `Expense `Total `Total
              `Income_Pre `Premium `Total
              `Income_Pre `Premium_from_Equity `Total
              `Income_Pre `Other `Total
              `Income_Pre `Underwriting `Total
              `Income_Pre `Premium `Rebates
              `Income_Pre `Premium `Received
              `Reserve_Pre `Base `Total
              `Reserve_Pre `Dynamic_Interest `Total
              `Reserve_Pre `Premium `Total
              `Reserve_Pre `Other `Total
              `Reserve_Pre `Separate `Total
              `Reserve_Pre `Dividend `Total
              `Reserve_Pre `Interest `Total
              `Reserve_Pre `Investment `Total
              `Reserve_Pre `Total `Total
              `Reserve_Pre `On_Deposit `Total
              `Reserve_Pre `Negative `Total
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Maturing
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Maturing
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Earned
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Earned
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Declaration
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Declaration
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Unallocated
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Unallocated
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Allocated
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Allocated
              `Reserve_Pre `Terminal_Prev_Decl `Allocated
              `Reserve_Pre `Terminal_Prev_Decl `Gross
              `Reserve_Pre `Terminal_Prev_Decl `Maturing
              `Reserve_Pre `Terminal_Prev_Decl `Unallocated
              `Reserve_Pre `Terminal_Prev_Decl `Declaration
              `Reserve_Pre `Terminal_Prev_Decl `Earned
              `Reserve_Pre `Terminal_Prev_Decl `Total
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Allocated_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Allocated_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Total_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Total_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Total_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Total_Dynamic
              `Reserve_Pre `Terminal_Prev_Decl `Allocated_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Allocated_Dynamic
              `Reserve_Pre `Terminal_Prev_Decl `Unallocated_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Unallocated_Dynamic
              `Reserve_Pre `Terminal `Annuity_Declaration
              `Reserve_Pre `Terminal `Non_Annuity_Declaration
              `Reserve_Pre `Terminal `Annuity_Earned
              `Reserve_Pre `Terminal `Non_Annuity_Earned
              `Reserve_Pre `Terminal `Annuity_Required
              `Reserve_Pre `Terminal `Non_Annuity_Required
              `Reserve_Pre `Terminal `Annuity_Projected
              `Reserve_Pre `Terminal `Non_Annuity_Projected
              `Reserve_Pre `Terminal `Projected
              `Reserve_Pre `Terminal `Required
              `Reserve_Pre `Terminal `Gross
              `Reserve_Pre `Terminal `Declaration
              `Reserve_Pre `Terminal `Earned
              `Reserve_Pre `Terminal `Total
              `Reserve_Pre `Terminal `Maturing
              `Reserve_Pre `Terminal `Allocated
              `Reserve_Pre `Terminal `Unallocated
              `Reserve_Pre `Terminal `Annuity_Total_Fixed
              `Reserve_Pre `Terminal `Non_Annuity_Total_Fixed
              `Reserve_Pre `Terminal `Allocated_Fixed
              `Reserve_Pre `Terminal `Allocated_Dynamic
              `Reserve_Pre `Terminal `Unallocated_Fixed
              `Reserve_Pre `Terminal `Unallocated_Dynamic
              `Reserve_Pre `Terminal `Total_Fixed
              `Reserve_Pre `Terminal `Total_Dynamic
              `Reserve_Pre `Dividend `Future
              `Reserve_Pre `Interest `Terminal
              `Basis_Pre `Total `Reserve_Payout
              `Scaled `Base `User_Data_1
              `Scaled `Base `User_Data_2
              `Surplus_Pre `Basis `Benefit
              `Surplus_Pre `Basis `NAR
              `Surplus_Pre `Basis `Premium
              `Surplus_Pre `Basis `Reserve
              `Surplus_Pre `Required `Benefit
              `Surplus_Pre `Required `NAR
              `Surplus_Pre `Required `Premium
              `Surplus_Pre `Required `Reserve
              `Surplus_Pre `Required `Total
              `Volume `Face_Amount `Inforce
              `Income_Statement `Income `Premium
              `Income_Statement `Income `Other
              `Income_Statement `Benefits `Death
              `Income_Statement `Benefits `Surrender
              `Income_Statement `Benefits `Lapse
              `Income_Statement `Benefits `Maturity
              `Income_Statement `Benefits `Annuity
              `Income_Statement `Benefits `Disability_AH
              `Income_Statement `Benefits `Non_Exit
              `Income_Statement `Benefits `Adjustments
              `Income_Statement `Benefits `Total
              `Income_Statement `Expenses `Acquisition
              `Income_Statement `Expenses `Commission
              `Income_Statement `Expenses `Maintenance
              `Income_Statement `Expenses `Overhead
              `Income_Statement `Expenses `Other
              `Income_Statement `Expenses `Total
              `Reserves `HGB_Life `Base
              `Reserves `HGB_Life `Dynamic_Interest
              `Reserves `HGB_Life `Policy
              `Reserves `HGB_Life `Separate
              `Reserves `HGB_Life `Premium
              `Reserves `HGB_Life `Negative
              `Reserves `HGB_Life `On_Deposit
              `Reserves `HGB_Life `Other
              `Reserves `HGB_Life `Total
              `Reserves `HGB_Life `Terminal
              `Reserves `HGB_Life `Interest
              `Reserves `HGB_Life `Investment
              `Reserves `HGB_Life `Dividend
              `Reserves `HGB_Life `Non_Terminal
              `Reserves `HGB_Life `Non_Premium
              `Reserves `HGB_Life `Income
              `Reserves `US_GAAP `Premium
              `Reserves `US_GAAP `Benefit
              `Reserves `US_GAAP `Expense
              `Reserves `US_GAAP `Fees_Charged
              `Reserves `US_GAAP `Interest_Credited
              `Reserves `US_GAAP `DAC_Asset
              `Reserves `US_GAAP `Total
              `Reserves `IFRS `Premium
              `Reserves `IFRS `Benefit
              `Reserves `IFRS `Expense
              `Reserves `IFRS `Fees_Charged
              `Reserves `IFRS `Interest_Credited
              `Reserves `IFRS `DAC_Asset
              `Reserves `IFRS `Total
              `Reserves `Economic `Premium
              `Reserves `Economic `Benefit
              `Reserves `Economic `Expense
              `Reserves `Economic `Fees_Charged
              `Reserves `Economic `Interest_Credited
              `Reserves `Economic `Total
              `Reserves `Solvency_II `Premium
              `Reserves `Solvency_II `Benefit
              `Reserves `Solvency_II `Expense
              `Reserves `Solvency_II `Fees_Charged
              `Reserves `Solvency_II `Interest_Credited
              `Reserves `Solvency_II `Total
              `Reserves `US_Statutory_Life `Premium
              `Reserves `US_Statutory_Life `Life
              `Reserves `US_Statutory_Life `Disability_AH
              `Reserves `US_Statutory_Life `Deposit
              `Reserves `US_Statutory_Life `Expense
              `Reserves `US_Statutory_Life `Total
              `BaFin `Amount `Reserve
              `BaFin `Amount `Net_Amount_at_Risk
              `BaFin `Amount `Premium
              `BaFin `Amount `Benefit
              `BaFin `Amount `Total
              `BaFin `Basis `Reserve
              `BaFin `Basis `Net_Amount_at_Risk
              `BaFin `Basis `Premium
              `BaFin `Basis `Benefit
              `Cashflow `Net_Present_Value `Premium
              `Cashflow `Net_Present_Value `Expense
              `Cashflow `Net_Present_Value `Benefit
              `Cashflow `Net_Present_Value `Other
              `Cashflow `Net_Present_Value `Positive
              `Cashflow `Net_Present_Value `Negative
              `Cashflow `Net_Present_Value `Net
              `Cashflow `Total `Premium
              `Cashflow `Total `Expense
              `Cashflow `Total `Benefit
              `Cashflow `Total `Other
              `Cashflow `Total `Positive
              `Cashflow `Total `Negative
              `Cashflow `Total `Net
              `Participation `Gain `Basis
              `Participation `Gain `Expense
              `Participation `Gain `Interest
              `Participation `Gain `Miscellaneous
              `Participation `Gain `Risk
              `Participation `Dividend `Premium
              `Participation `Pre_Trade `Committed
              `Participation `Pre_Trade `Payable
              `Tax `US `Reserve
              `Tax `US `Premium_Reserve
              `Tax `US `Supplementary_Contracts
              `Tax `US `Div_Accum
              `Tax `US `Special_Reserve
              `Tax `US `Advanced_Premium
              `Tax `US `Required_Interest
              `Tax `US `Excess_Interest
              `Tax `US `Divs_on_Def_Annuities
              `Tax `US `Interest_on_Deposit
              `Tax `US `Policyholder_Divs_Paid
              `Tax `US `Premium_Adjustments
              `Tax `US `Experience_Rated_Refunds
              `Tax `US `Premium_Mortality
              `Tax `US `Annuity_Premium
              `Tax `US `Group_Life_Premium
              `Tax `US `General_Deductions
              `Tax `US `Operations_Loss_Deduction
              `Tax `US `Death_Benefits
              `Tax `US `Dir_or_Ind_Dist
              `Tax `US `DAC_Balance
              `Tax `US `Cash_Value
              `Tax `US `PH_Surplus
              `Tax `HGB `Reserve
              `Tax `HGB `Premium_Reserve
              `Tax `HGB `Supplementary_Contracts
              `Tax `HGB `Div_Accum
              `Tax `HGB `Special_Reserve
              `Tax `HGB `Advanced_Premium
              `Tax `HGB `Required_Interest
              `Tax `HGB `Excess_Interest
              `Tax `HGB `Divs_on_Def_Annuities
              `Tax `HGB `Interest_on_Deposit
              `Tax `HGB `Policyholder_Divs_Paid
              `Tax `HGB `Premium_Adjustments
              `Tax `HGB `Experience_Rated_Refunds
              `Tax `HGB `Premium_Mortality
              `Tax `HGB `Annuity_Premium
              `Tax `HGB `Group_Life_Premium
              `Tax `HGB `General_Deductions
              `Tax `HGB `Operations_Loss_Deduction
              `Tax `HGB `Death_Benefits
              `Tax `HGB `Dir_or_Ind_Dist
              `Tax `HGB `DAC_Balance
              `Tax `HGB `Cash_Value
              `Tax `HGB `PH_Surplus
              `Cashflow `Duration_Modified `Premium
              `Cashflow `Duration_Modified `Expense
              `Cashflow `Duration_Modified `Benefit
              `Cashflow `Duration_Modified `Other
              `Cashflow `Duration_Modified `Positive
              `Cashflow `Duration_Modified `Negative
              `Cashflow `Duration_Modified `Net
              `Cashflow `Convexity_Modified `Premium
              `Cashflow `Convexity_Modified `Expense
              `Cashflow `Convexity_Modified `Benefit
              `Cashflow `Convexity_Modified `Other
              `Cashflow `Convexity_Modified `Positive
              `Cashflow `Convexity_Modified `Negative
              `Cashflow `Convexity_Modified `Net
              `Cashflow `Duration_Fisher_Weil `Premium
              `Cashflow `Duration_Fisher_Weil `Expense
              `Cashflow `Duration_Fisher_Weil `Benefit
              `Cashflow `Duration_Fisher_Weil `Other
              `Cashflow `Duration_Fisher_Weil `Positive
              `Cashflow `Duration_Fisher_Weil `Negative
              `Cashflow `Duration_Fisher_Weil `Net
              `Cashflow `Convexity_Fisher_Weil `Premium
              `Cashflow `Convexity_Fisher_Weil `Expense
              `Cashflow `Convexity_Fisher_Weil `Benefit
              `Cashflow `Convexity_Fisher_Weil `Other
              `Cashflow `Convexity_Fisher_Weil `Positive
              `Cashflow `Convexity_Fisher_Weil `Negative
              `Cashflow `Convexity_Fisher_Weil `Net
              `Basis_Post `Terminal `Earned
              `Basis_Post `Terminal `SGA_Benefit
              `Basis_Post `Terminal `Increase
              `Bonus_Post `Total `Non_Interest
              `Bonus_Post `Total `Interest
              `Bonus_Post `Total `Total
              `Bonus_Post `Total `Payout
              `Bonus_Post `Terminal `Non_Interest
              `Bonus_Post `Terminal `Interest
              `Bonus_Post `Terminal `Total
              `Bonus_Post `Terminal `Payout
              `Bonus_Post `Dividend `Non_Interest
              `Bonus_Post `Dividend `Interest
              `Bonus_Post `Dividend `Total
              `Bonus_Post `Dividend `Payout
              `Bonus_Post `Direct `Non_Interest
              `Bonus_Post `Direct `Interest
              `Bonus_Post `Direct `Total
              `Bonus_Post `Direct `Payout
              `Bonus_Post `Reversionary `Non_Interest
              `Bonus_Post `Reversionary `Interest
              `Bonus_Post `Reversionary `Total
              `Bonus_Post `Reversionary `Payout
              `Bonus_Post `Base `Non_Interest
              `Bonus_Post `Base `Interest
              `Bonus_Post `Base `Total
              `Bonus_Post `Base `Payout
              `Bonus_Post `Dividend `Interest_Extra
              `Bonus_Post `Dividend `Interest_NonExtra
              `Bonus_Post `Dividend `Reserve_Str_Bonus
              `Bonus_Post `Direct `Interest_Extra
              `Bonus_Post `Direct `Interest_NonExtra
              `Bonus_Post `Direct `Reserve_Str_Bonus
              `Bonus_Post `Total `Amount
              `Bonus_Post `Dividend `Amount
              `Bonus_Post `Reversionary `Amount
              `Bonus_Post `Direct `Amount
              `Bonus_Post `Free `Amount
              `Bonus_Post `Total `Reserve_Str_Account
              `Bonus_Post `Total `Reserve_Str_Bonus
              `Bonus_Post `Terminal `Annuity_Declaration
              `Bonus_Post `Terminal `Non_Annuity_Declaration
              `Bonus_Post `Terminal `Annuity_Earned
              `Bonus_Post `Terminal `Non_Annuity_Earned
              `Bonus_Post `Terminal `Annuity_Declaration_Difference
              `Bonus_Post `Terminal `Non_Annuity_Declaration_Difference
              `Bonus_Post `Terminal `Earned
              `Bonus_Post `Terminal `Declaration
              `Bonus_Post `Terminal `Declaration_Difference
              `Bonus_Post `Terminal `Earned_Reduction
              `Bonus_Post `Terminal `Total_Fixed
              `Bonus_Post `Terminal `Total_Dynamic
              `Dividend `Policyholder `Required
              `Dividend `Policyholder `Total
              `Income_Post `VTRUE `Total
              `Income_Post `Investment `Total
              `Income_Post `Pre_Dividend `Total
              `Income_Post `Shareholder `Total
              `Income_Post `Tax `Total
              `Income_Post `Premium_from_Equity `Total
              `Income_Post `VTRUE `Basis
              `Reserve_Post `Terminal `Earned
              `Reserve_Post `Terminal `Declaration
              `Reserve_Post `Terminal `Total
              `Reserve_Post `Terminal `Allocated
              `Reserve_Post `Terminal `Gross
              `Reserve_Post `Terminal `Maturing
              `Reserve_Post `Terminal `Unallocated
              `Reserve_Post `Terminal `Total_Fixed
              `Reserve_Post `Terminal `Total_Dynamic
              `Reserve_Post `Terminal `Allocated_Fixed
              `Reserve_Post `Terminal `Allocated_Dynamic
              `Reserve_Post `Terminal `Unallocated_Fixed
              `Reserve_Post `Terminal `Unallocated_Dynamic
              `Surplus_Post `Shareholder `Total
              `Surplus_Post `Policyholder `Tied
              `Surplus_Post `Policyholder `Free
              `Surplus_Post `Policyholder `Total
              `Surplus_Post `Policyholder `Terminal
              `Reserves_Post `Economic `Total
              `Reserves_Post `Economic `Benefit
              `Reserves_Post `Economic `Expense
              `Reserves_Post `Economic `Premium
              `Reserves_Post `Economic `Other
              `Reserves_Post `US_GAAP `Total
              `Reserves_Post `US_GAAP `Benefit
              `Reserves_Post `US_GAAP `Expense
              `Reserves_Post `US_GAAP `Premium
              `Reserves_Post `US_GAAP `Other
              `Reserves_Post `IFRS `Total
              `Reserves_Post `IFRS `Benefit
              `Reserves_Post `IFRS `Expense
              `Reserves_Post `IFRS `Premium
              `Reserves_Post `IFRS `Other
              `Reserves_Post `Solvency_II `Total
              `Reserves_Post `Solvency_II `Benefit
              `Reserves_Post `Solvency_II `Expense
              `Reserves_Post `Solvency_II `Premium
              `Reserves_Post `Solvency_II `Other
              `Participation `Dividend `Credit
              `Participation `Dividend `Adjusted_Premium
              `Participation `Final `Committed
              `Participation `Final `Payable);`Category `Type `Item];)
            (`J
             .,(`Product_Group
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Product_Group;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Product_Group];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Product_Group];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Product_Group;,0#`];)
                  (`F
                   ,`Product_Group
                   ))
                )
             )
            (`U
             ,`Product_Group
             )
            (`XX
             `Annuity_Declaration `Non_Annuity_Declaration `Declaration `SGA_Base `SGA_Benefit `Earned `Death `Surrender `Maturity `Annuity `Total `Transfer `Reserve `Terminal `Non_Interest `Direct `Dividend `Non_Interest_Dynamic `Extra_Fixed `Annuity_Non_Interest `Non_Annuity_Non_Interest `Annuity_Extra_Fixed `Non_Annuity_Extra_Fixed `Factor `Req_Add_Reserve `Annuity_Earned `Non_Annuity_Earned `Annuity_Maturing `Non_Annuity_Maturing `Annuity_Total_Dynamic `Non_Annuity_Total_Dynamic `Total_Fixed `Total_Dynamic `Gross `Maturing `Rebates `Received `Annuity_Unallocated `Non_Annuity_Unallocated `Annuity_Allocated `Non_Annuity_Allocated `Allocated `Unallocated `Annuity_Allocated_Fixed `Non_Annuity_Allocated_Fixed `Annuity_Total_Fixed `Non_Annuity_Total_Fixed `Allocated_Fixed `Allocated_Dynamic `Unallocated_Fixed `Unallocated_Dynamic `Annuity_Required `Non_Annuity_Required `Annuity_Projected `Non_Annuity_Projected `Projected `Required `Future `Reserve_Payout `User_Data_1 `User_Data_2 `Benefit `NAR `Premium `Inforce `Other `Lapse `Disability_AH `Non_Exit `Adjustments `Acquisition `Commission `Maintenance `Overhead `Base `Dynamic_Interest `Policy `Separate `Negative `On_Deposit `Interest `Investment `Non_Terminal `Non_Premium `Income `Expense `Fees_Charged `Interest_Credited `DAC_Asset `Life `Deposit `Net_Amount_at_Risk `Positive `Net `Basis `Miscellaneous `Risk `Committed `Payable `Premium_Reserve `Supplementary_Contracts `Div_Accum `Special_Reserve `Advanced_Premium `Required_Interest `Excess_Interest `Divs_on_Def_Annuities `Interest_on_Deposit `Policyholder_Divs_Paid `Premium_Adjustments `Experience_Rated_Refunds `Premium_Mortality `Annuity_Premium `Group_Life_Premium `General_Deductions `Operations_Loss_Deduction `Death_Benefits `Dir_or_Ind_Dist `DAC_Balance `Cash_Value `PH_Surplus `Increase `Payout `Interest_Extra `Interest_NonExtra `Reserve_Str_Bonus `Amount `Reserve_Str_Account `Annuity_Declaration_Difference `Non_Annuity_Declaration_Difference `Declaration_Difference `Earned_Reduction `Tied `Free `Credit `Adjusted_Premium
             )))
         (`Property_Casualty
          .((`Product
             `Product_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Product;,`Any_Product_];))
            (`Basis
             `Net
             .,(`V;{[p;x]:[(x _in`Ceded`Net)&~`Reinsurance _in .G.submodules; :,(1;"Cannot choose Ceded or Net basis without running Reinsurance module")]};))
            (`Item
             `Underwriting_Result
             .,(`V;{[modon;p;x] :[x _in modon@{x@&~x _lin y}[!modon;.G.submodules]; (1;"Item is disabled in module selection button")]}[.((`Underwriting_Expenses;`UWE;)
                  (`Commissions_and_Brokerage;`CBE;)
                  (`Taxes_Licenses_and_Fees;`TLF;)
                  (`Contingent_Commissions;`Contingent_Commission;)
                  (`Management_Fees;`MGT;)
                  (`Policyholder_Dividends;`PHD;)
                  (`Allocated;`ALAE;)
                  (`Unallocated;`ULAE;)
                  (`Salvage_and_Subrogation;`SS;))];))
            (`Transaction
             `Cashflow
             .,(`V;{[p;x]:[(`Unpaid~x)&~`Reserves _in .G.submodules; (1;"Reserves disabled in module selection button")]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cl
                .,(`Product;`Product;)
                )
               (`cell
                .((`Product
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Product_ `Any_Product_ `Product_1
                      ))
                   )
                  (`Basis
                   .((`c;`combo;)
                     (`o
                      `Ceded `Gross `Net
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `ALAE `Acquisition_Costs `CBE `Contingent_Commission `Exposure `Float `Loss `Loss_ALAE_Net_SS `Loss_Catastrophe `Loss_LAE_Net_SS `Loss_Non_Catastrophe `MGT `PHD `Premium `SS `TLF `ULAE `UWE `Underwriting_Result
                      ))
                   )
                  (`Transaction
                   .((`c;`combo;)
                     (`o
                      `Accrued `Balance `Cashflow `Drafts_Outstanding `Earned `Incurred `Paid `Payable `Receivable `Received `True_Ultimate `Unearned `Unpaid `Written
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Product;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_PCInsurance.html;)
            (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Gross `Premium `Written
              `Gross `Premium `Earned
              `Gross `Premium `True_Ultimate
              `Gross `Premium `Received
              `Gross `Premium `Cashflow
              `Gross `Premium `Unearned
              `Gross `Premium `Receivable
              `Ceded `Premium `Written
              `Ceded `Premium `Earned
              `Ceded `Premium `True_Ultimate
              `Ceded `Premium `Received
              `Ceded `Premium `Cashflow
              `Ceded `Premium `Unearned
              `Ceded `Premium `Receivable
              `Net `Premium `Written
              `Net `Premium `Earned
              `Net `Premium `True_Ultimate
              `Net `Premium `Received
              `Net `Premium `Cashflow
              `Net `Premium `Unearned
              `Net `Premium `Receivable
              `Gross `Exposure `Written
              `Gross `Exposure `Earned
              `Gross `Loss `True_Ultimate
              `Gross `Loss `Paid
              `Gross `Loss `Unpaid
              `Gross `ALAE `True_Ultimate
              `Gross `ALAE `Paid
              `Gross `ALAE `Unpaid
              `Gross `Loss_LAE_Net_SS `True_Ultimate
              `Gross `Loss_LAE_Net_SS `Paid
              `Gross `Loss_LAE_Net_SS `Unpaid
              `Ceded `Loss `True_Ultimate
              `Ceded `Loss `Paid
              `Ceded `Loss `Unpaid
              `Ceded `ALAE `True_Ultimate
              `Ceded `ALAE `Paid
              `Ceded `ALAE `Unpaid
              `Ceded `Loss_LAE_Net_SS `True_Ultimate
              `Ceded `Loss_LAE_Net_SS `Paid
              `Ceded `Loss_LAE_Net_SS `Unpaid
              `Net `Loss `True_Ultimate
              `Net `Loss `Paid
              `Net `Loss `Unpaid
              `Net `ALAE `True_Ultimate
              `Net `ALAE `Paid
              `Net `ALAE `Unpaid
              `Net `Loss_LAE_Net_SS `True_Ultimate
              `Net `Loss_LAE_Net_SS `Paid
              `Net `Loss_LAE_Net_SS `Unpaid
              `Gross `ULAE `True_Ultimate
              `Gross `ULAE `Paid
              `Gross `ULAE `Unpaid
              `Gross `UWE `Written
              `Gross `UWE `Earned
              `Gross `UWE `True_Ultimate
              `Gross `UWE `Payable
              `Gross `TLF `Written
              `Gross `TLF `Earned
              `Gross `TLF `True_Ultimate
              `Gross `TLF `Payable
              `Gross `MGT `Written
              `Gross `MGT `Earned
              `Gross `MGT `True_Ultimate
              `Gross `MGT `Payable
              `Gross `CBE `Written
              `Gross `CBE `Earned
              `Gross `CBE `True_Ultimate
              `Gross `CBE `Payable
              `Gross `PHD `Written
              `Gross `PHD `Earned
              `Gross `PHD `True_Ultimate
              `Gross `PHD `Payable
              `Ceded `UWE `Written
              `Ceded `UWE `Earned
              `Ceded `UWE `True_Ultimate
              `Ceded `UWE `Payable
              `Ceded `TLF `Written
              `Ceded `TLF `Earned
              `Ceded `TLF `True_Ultimate
              `Ceded `TLF `Payable
              `Ceded `MGT `Written
              `Ceded `MGT `Earned
              `Ceded `MGT `True_Ultimate
              `Ceded `MGT `Payable
              `Ceded `CBE `Written
              `Ceded `CBE `Earned
              `Ceded `CBE `True_Ultimate
              `Ceded `CBE `Payable
              `Ceded `PHD `Written
              `Ceded `PHD `Earned
              `Ceded `PHD `True_Ultimate
              `Ceded `PHD `Payable
              `Net `UWE `Written
              `Net `UWE `Earned
              `Net `UWE `True_Ultimate
              `Net `UWE `Payable
              `Net `TLF `Written
              `Net `TLF `Earned
              `Net `TLF `True_Ultimate
              `Net `TLF `Payable
              `Net `MGT `Written
              `Net `MGT `Earned
              `Net `MGT `True_Ultimate
              `Net `MGT `Payable
              `Net `CBE `Written
              `Net `CBE `Earned
              `Net `CBE `True_Ultimate
              `Net `CBE `Payable
              `Net `PHD `Written
              `Net `PHD `Earned
              `Net `PHD `True_Ultimate
              `Net `PHD `Payable
              `Gross `UWE `Paid
              `Gross `TLF `Paid
              `Gross `MGT `Paid
              `Gross `CBE `Paid
              `Gross `PHD `Paid
              `Gross `Acquisition_Costs `Paid
              `Gross `Float `Balance
              `Ceded `Float `Balance
              `Net `Float `Balance
              `Gross `Underwriting_Result `True_Ultimate
              `Gross `Loss `True_Ultimate
              `Gross `ALAE `True_Ultimate
              `Gross `SS `True_Ultimate
              `Gross `Loss_Catastrophe `True_Ultimate
              `Gross `Loss_ALAE_Net_SS `True_Ultimate
              `Gross `Loss_Non_Catastrophe `True_Ultimate
              `Ceded `Underwriting_Result `True_Ultimate
              `Ceded `Loss `True_Ultimate
              `Ceded `ALAE `True_Ultimate
              `Ceded `SS `True_Ultimate
              `Ceded `Loss_Catastrophe `True_Ultimate
              `Ceded `Loss_ALAE_Net_SS `True_Ultimate
              `Ceded `Loss_Non_Catastrophe `True_Ultimate
              `Net `Underwriting_Result `True_Ultimate
              `Net `Loss `True_Ultimate
              `Net `ALAE `True_Ultimate
              `Net `SS `True_Ultimate
              `Net `Loss_Catastrophe `True_Ultimate
              `Net `Loss_ALAE_Net_SS `True_Ultimate
              `Net `Loss_Non_Catastrophe `True_Ultimate
              `Gross `Acquisition_Costs `True_Ultimate
              `Ceded `Acquisition_Costs `True_Ultimate
              `Gross `Loss `Drafts_Outstanding
              `Gross `ALAE `Drafts_Outstanding
              `Gross `Contingent_Commission `True_Ultimate
              `Gross `Contingent_Commission `Cashflow
              `Gross `Contingent_Commission `Payable
              `Gross `Contingent_Commission `Accrued
              `Gross `Contingent_Commission `Incurred
              `Gross `Underwriting_Result `True_Ultimate
              `Ceded `Underwriting_Result `True_Ultimate
              `Net `Underwriting_Result `True_Ultimate);`Basis `Item `Transaction];)
            (`J
             .,(`Product
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Product;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Product];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Product];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Product;,0#`];)
                  (`F
                   ,`Product
                   ))
                )
             )
            (`U
             ,`Product
             )
            (`XX
             `Written `Earned `True_Ultimate `Received `Cashflow `Unearned `Receivable `Paid `Unpaid `Payable `Balance `Drafts_Outstanding `Accrued `Incurred
             )))
         (`PC_Reinsurance
          .((`Treaty
             `Treaty_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Treaty;,`Any_Treaty_];))
            (`Item
             `Loss
             .,(`V;{[modon;p;x] :[x _in modon@{x@&~x _lin y}[!modon;.G.submodules]; (1;"Item is disabled in module selection button")]}[.((`Commissions_and_Brokerage;`CBE;)
                  (`Allocated;`ALAE;))];))
            (`Transaction
             `True_Ultimate
             .,(`V;{[p;x]:[(`Unpaid~x)&~`Reserves _in .G.submodules; (1;"Reserves disabled in module selection button")]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`l;`"P&C Reinsurance";)
               (`cell
                .((`Treaty
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Treaty_ `Any_Treaty_ `Treaty_1
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `ALAE `Acquisition_Costs `Loss `Loss_ALAE_Net_SS `Premium
                      ))
                   )
                  (`Transaction
                   .((`c;`combo;)
                     (`o
                      `Cashflow `Earned `Paid `Payable `Receivable `Received `True_Ultimate `Unearned `Unpaid `Written
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Treaty;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_PCReinsurance.html;)
            (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Premium `Written
              `Premium `Earned
              `Premium `True_Ultimate
              `Premium `Received
              `Premium `Cashflow
              `Premium `Unearned
              `Premium `Receivable
              `Acquisition_Costs `Written
              `Acquisition_Costs `Earned
              `Acquisition_Costs `True_Ultimate
              `Acquisition_Costs `Paid
              `Acquisition_Costs `Cashflow
              `Acquisition_Costs `Unearned
              `Acquisition_Costs `Payable
              `Loss `True_Ultimate
              `Loss `Paid
              `Loss `Unpaid
              `ALAE `True_Ultimate
              `ALAE `Paid
              `ALAE `Unpaid
              `Loss_ALAE_Net_SS `True_Ultimate
              `Loss_ALAE_Net_SS `Paid
              `Loss_ALAE_Net_SS `Unpaid);`Item `Transaction];)
            (`J
             .,(`Treaty
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Treaty;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Treaty];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Treaty];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Treaty;,0#`];)
                  (`F
                   ,`Treaty
                   ))
                )
             )
            (`U
             ,`Treaty
             )
            (`XX
             `Written `Earned `True_Ultimate `Received `Cashflow `Unearned `Receivable `Paid `Payable `Unpaid
             )))
         (`Financing
          .((`Instrument
             `Financing_Instrument_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Financing_Instrument;0#`];))
            (`Category;`Share_Balances;.())
            (`Timing;`Final;.())
            (`Item;`Outstanding;.())
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`rl
                .,(`Instrument;`"Financing Instrument";)
                )
               (`cell
                .((`Instrument
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Financing_Instrument_ `Financing_Instrument_1
                      ))
                   )
                  (`Category
                   .((`c;`combo;)
                     (`o
                      `Money_Balances `Share_Balances `Transactions
                      ))
                   )
                  (`Timing
                   .((`c;`combo;)
                     (`o
                      `Pre_Trade `Final
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Additional_Paid_In `Committed `Credit `Credit_Adjustment `Dividend `Dividend_Adjustment `Dividend_Adjustment_Paid `Dividends_Declared `Dividends_Deferred `Dividends_Paid `Dividends_Unpaid `Extra_Decrease `Extra_Increase `Interest_Backlog `Interest_Deferred `Interest_Due `Interest_Paid `Interest_Unpaid `Issued `Market_Value `Outstanding `Par_Value `Payable `Principal `Principal_Paid `Repurchased `Retired `Uncommitted
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Instrument;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_Financing.html;)
            (`V;{[p;x] f:.k.get_s (0;`A;`User;`Financing)
             if[`Unspecified_~x`Instrument; :_n]
             r:.L.V.user_value_list[.C`Financing_List;`Instrument`Category`Timing`Item;p;@[x;`Instrument;:;f[x`Instrument;`m]]]
             :[#r;r;_n]};)
            (`J
             .,(`Financing_Instrument
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Instrument;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Instrument];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Instrument];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Instrument;,0#`];)
                  (`F
                   ,`Instrument
                   ))
                )
             )
            (`U
             ,`Financing_Instrument
             )
            (`XX
             `Dividend `Credit `Outstanding `Committed `Uncommitted `Payable `Dividends_Declared `Dividends_Paid `Interest_Due `Interest_Backlog `Interest_Paid `Principal_Paid `Par_Value `Market_Value `Principal `Additional_Paid_In `Dividends_Unpaid `Dividend_Adjustment `Credit_Adjustment `Extra_Increase `Extra_Decrease `Dividend_Adjustment_Paid `Dividends_Deferred `Retired `Issued `Repurchased `Interest_Deferred `Interest_Unpaid
             )))
         (`Investments
          .((`Module
             `Investments
             .,(`V;{[label;p;x]
  g:`None,.G`submodules
  if[label~"Module"
    if[`HGB_Life _in g; g,:`HGB]
    if[`US_Statutory_Life _in g; g,:`US_Statutory]
    ]
 :[~x _in g;(1;("&0 is not an active &1";$x;label))]}["Module"];))
            (`Portfolio
             `All
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Portfolio;,`All];))
            (`Asset_Class
             `Asset_Class_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;,`HGB_Funds];))
            (`Timing;`Final;.())
            (`Item;`Quantity;.())
            (`Currency
             `Reporting
             .,(`V;{[p;x]:[x~`Original;(0;"Currency of Original may not be available in future releases of the software.");_n]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cell
                .((`Portfolio
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Portfolio_ `All `Portfolio_1
                      ))
                   )
                  (`Module
                   .((`c;`combo;)
                     (`o
                      `Investments `Economic `Solvency_II `US_GAAP `IFRS `US_Statutory `HGB
                      ))
                   )
                  (`Asset_Class
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Accrued_Expenses `Accrued_Expenses_Paid `Accrued_Expenses_Received `Accrued_Income `Accrued_Income_FX_Effect `Accrued_Income_Paid `Accrued_Income_Received `Accrued_Interest `Accrued_Interest_Paid `Accrued_Interest_Received `Amount_Invested `Appreciation `Balance_Sheet_Value `Balance_Sheet_Value_AFS `Balance_Sheet_Value_AV `Balance_Sheet_Value_HTM `Balance_Sheet_Value_LAR `Balance_Sheet_Value_Trading `BzW `Change_in_Accrued_Expenses `Change_in_Accrued_Income `Change_in_Income_Basis `Change_in_Unrealized_Gain `Consideration_Paid `Consideration_Received `Constant_Yield_Adjustment `Constant_Yield_Amortized_Cost `Cost_Value `Depreciation `Derivatives_Cash_Flow `Dividends_Declared `Dividends_Receivable `Dividends_Received `Expenses_Paid `Fluctuation_Reserve `HGB_Cost_AV `HGB_Cost_UV `Hidden_Reserves `Hidden_Reserves_AV `Hidden_Reserves_Negative `Hidden_Reserves_Positive `IRR `Income_Basis `Income_Basis_FX_Effect `Income_Basis_of_Purchases `Income_Basis_of_Trades `Income_FX_Effect `Income_Received `Interest_Received `Market_Value `Market_Value_QIS5_Shock_Down `Market_Value_QIS5_Shock_Up `Market_Value_Times_Convexity_Fisher_Weil `Market_Value_Times_Convexity_Modified `Market_Value_Times_Duration_Fisher_Weil `Market_Value_Times_Duration_Modified `Market_Value_Times_Maturity `Market_Value_for_Fisher_Weil `Market_Value_of_Maturing `Net_Income_Earned `Net_Ordinary_Income_Gain `Notional_Amount `Price_Paid `Price_Received `Principal_Received `Property_Expenses_Paid `Quantity `Quantity_AV `Quantity_UV `Realized_Gain `Realized_Gain_AVR `Realized_Gain_IMR `Realized_Gain_Negative `Realized_Gain_Positive `Reclassification_Gain `Rent_Received `Return_of_Market_Value `Risk_Adjusted_IRR `Sell_Realized_Gain `Total_Gain `Unrealized_Gain `Unrealized_Gain_FX `Unrealized_Gain_FX_Effect `Unrealized_Gain_Negative `Unrealized_Gain_Positive `Unrealized_Gain_nonFX
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   )
                  (`Timing
                   .((`c;`combo;)
                     (`o
                      `Pre_Trade `Final
                      ))
                   )
                  (`Currency
                   .((`c;`combo;)
                     (`o
                      `Original `Reporting
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .((`Portfolio;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                  (`Asset_Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
                ))
             )
            (`X;`UserValues_Arguments_Source_Investments.html;)
            (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Investments `Pre_Trade `Quantity
              `Investments `Pre_Trade `Notional_Amount
              `Investments `Pre_Trade `Cost_Value
              `Investments `Pre_Trade `Constant_Yield_Amortized_Cost
              `Investments `Pre_Trade `Market_Value
              `Investments `Pre_Trade `Market_Value_QIS5_Shock_Up
              `Investments `Pre_Trade `Market_Value_QIS5_Shock_Down
              `Investments `Pre_Trade `Constant_Yield_Adjustment
              `Investments `Pre_Trade `Accrued_Interest
              `Investments `Pre_Trade `Interest_Received
              `Investments `Pre_Trade `Return_of_Market_Value
              `Investments `Pre_Trade `Market_Value_for_Fisher_Weil
              `Investments `Pre_Trade `Market_Value_Times_Duration_Fisher_Weil
              `Investments `Pre_Trade `Market_Value_Times_Convexity_Fisher_Weil
              `Investments `Pre_Trade `Market_Value_Times_Duration_Modified
              `Investments `Pre_Trade `Market_Value_Times_Convexity_Modified
              `Investments `Pre_Trade `Market_Value_Times_Maturity
              `Investments `Pre_Trade `Market_Value_of_Maturing
              `Investments `Pre_Trade `Dividends_Declared
              `Investments `Pre_Trade `Dividends_Received
              `Investments `Pre_Trade `Dividends_Receivable
              `Investments `Pre_Trade `Consideration_Paid
              `Investments `Pre_Trade `Price_Paid
              `Investments `Pre_Trade `Consideration_Received
              `Investments `Pre_Trade `Price_Received
              `Investments `Pre_Trade `Principal_Received
              `Investments `Pre_Trade `Rent_Received
              `Investments `Pre_Trade `Property_Expenses_Paid
              `Investments `Pre_Trade `Derivatives_Cash_Flow
              `Economic `Pre_Trade `Income_Basis
              `Economic `Pre_Trade `Balance_Sheet_Value
              `Economic `Pre_Trade `Balance_Sheet_Value_HTM
              `Economic `Pre_Trade `Balance_Sheet_Value_LAR
              `Economic `Pre_Trade `Balance_Sheet_Value_AFS
              `Economic `Pre_Trade `Balance_Sheet_Value_Trading
              `Economic `Pre_Trade `Realized_Gain
              `Economic `Pre_Trade `Unrealized_Gain
              `Economic `Pre_Trade `Change_in_Unrealized_Gain
              `Economic `Pre_Trade `Accrued_Income
              `Economic `Pre_Trade `Income_Basis_of_Trades
              `Economic `Pre_Trade `Change_in_Income_Basis
              `Economic `Pre_Trade `Income_Received
              `Economic `Pre_Trade `Expenses_Paid
              `Economic `Pre_Trade `Net_Income_Earned
              `Economic `Pre_Trade `Income_Basis_FX_Effect
              `Economic `Pre_Trade `Accrued_Income_FX_Effect
              `Economic `Pre_Trade `Income_FX_Effect
              `Economic `Pre_Trade `Unrealized_Gain_FX_Effect
              `Economic `Pre_Trade `Appreciation
              `Economic `Pre_Trade `Depreciation
              `Economic `Pre_Trade `Realized_Gain_Positive
              `Economic `Pre_Trade `Realized_Gain_Negative
              `Economic `Pre_Trade `Unrealized_Gain_Positive
              `Economic `Pre_Trade `Unrealized_Gain_Negative
              `Economic `Pre_Trade `BzW
              `Economic `Pre_Trade `Fluctuation_Reserve
              `Economic `Pre_Trade `Amount_Invested
              `Economic `Pre_Trade `Hidden_Reserves
              `Economic `Pre_Trade `Hidden_Reserves_Positive
              `Economic `Pre_Trade `Hidden_Reserves_Negative
              `Economic `Pre_Trade `Balance_Sheet_Value_AV
              `Economic `Pre_Trade `Quantity_AV
              `Economic `Pre_Trade `Quantity_UV
              `Economic `Pre_Trade `HGB_Cost_AV
              `Economic `Pre_Trade `HGB_Cost_UV
              `Economic `Pre_Trade `Hidden_Reserves_AV
              `Solvency_II `Pre_Trade `Income_Basis
              `Solvency_II `Pre_Trade `Balance_Sheet_Value
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_HTM
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_LAR
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_AFS
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_Trading
              `Solvency_II `Pre_Trade `Realized_Gain
              `Solvency_II `Pre_Trade `Unrealized_Gain
              `Solvency_II `Pre_Trade `Change_in_Unrealized_Gain
              `Solvency_II `Pre_Trade `Accrued_Income
              `Solvency_II `Pre_Trade `Income_Basis_of_Trades
              `Solvency_II `Pre_Trade `Change_in_Income_Basis
              `Solvency_II `Pre_Trade `Income_Received
              `Solvency_II `Pre_Trade `Expenses_Paid
              `Solvency_II `Pre_Trade `Net_Income_Earned
              `Solvency_II `Pre_Trade `Income_Basis_FX_Effect
              `Solvency_II `Pre_Trade `Accrued_Income_FX_Effect
              `Solvency_II `Pre_Trade `Income_FX_Effect
              `Solvency_II `Pre_Trade `Unrealized_Gain_FX_Effect
              `Solvency_II `Pre_Trade `Appreciation
              `Solvency_II `Pre_Trade `Depreciation
              `Solvency_II `Pre_Trade `Realized_Gain_Positive
              `Solvency_II `Pre_Trade `Realized_Gain_Negative
              `Solvency_II `Pre_Trade `Unrealized_Gain_Positive
              `Solvency_II `Pre_Trade `Unrealized_Gain_Negative
              `Solvency_II `Pre_Trade `BzW
              `Solvency_II `Pre_Trade `Fluctuation_Reserve
              `Solvency_II `Pre_Trade `Amount_Invested
              `Solvency_II `Pre_Trade `Hidden_Reserves
              `Solvency_II `Pre_Trade `Hidden_Reserves_Positive
              `Solvency_II `Pre_Trade `Hidden_Reserves_Negative
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_AV
              `Solvency_II `Pre_Trade `Quantity_AV
              `Solvency_II `Pre_Trade `Quantity_UV
              `Solvency_II `Pre_Trade `HGB_Cost_AV
              `Solvency_II `Pre_Trade `HGB_Cost_UV
              `Solvency_II `Pre_Trade `Hidden_Reserves_AV
              `US_GAAP `Pre_Trade `Income_Basis
              `US_GAAP `Pre_Trade `Balance_Sheet_Value
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_HTM
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_LAR
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_AFS
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_Trading
              `US_GAAP `Pre_Trade `Realized_Gain
              `US_GAAP `Pre_Trade `Unrealized_Gain
              `US_GAAP `Pre_Trade `Change_in_Unrealized_Gain
              `US_GAAP `Pre_Trade `Accrued_Income
              `US_GAAP `Pre_Trade `Income_Basis_of_Trades
              `US_GAAP `Pre_Trade `Change_in_Income_Basis
              `US_GAAP `Pre_Trade `Income_Received
              `US_GAAP `Pre_Trade `Expenses_Paid
              `US_GAAP `Pre_Trade `Net_Income_Earned
              `US_GAAP `Pre_Trade `Income_Basis_FX_Effect
              `US_GAAP `Pre_Trade `Accrued_Income_FX_Effect
              `US_GAAP `Pre_Trade `Income_FX_Effect
              `US_GAAP `Pre_Trade `Unrealized_Gain_FX_Effect
              `US_GAAP `Pre_Trade `Appreciation
              `US_GAAP `Pre_Trade `Depreciation
              `US_GAAP `Pre_Trade `Realized_Gain_Positive
              `US_GAAP `Pre_Trade `Realized_Gain_Negative
              `US_GAAP `Pre_Trade `Unrealized_Gain_Positive
              `US_GAAP `Pre_Trade `Unrealized_Gain_Negative
              `US_GAAP `Pre_Trade `BzW
              `US_GAAP `Pre_Trade `Fluctuation_Reserve
              `US_GAAP `Pre_Trade `Amount_Invested
              `US_GAAP `Pre_Trade `Hidden_Reserves
              `US_GAAP `Pre_Trade `Hidden_Reserves_Positive
              `US_GAAP `Pre_Trade `Hidden_Reserves_Negative
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_AV
              `US_GAAP `Pre_Trade `Quantity_AV
              `US_GAAP `Pre_Trade `Quantity_UV
              `US_GAAP `Pre_Trade `HGB_Cost_AV
              `US_GAAP `Pre_Trade `HGB_Cost_UV
              `US_GAAP `Pre_Trade `Hidden_Reserves_AV
              `IFRS `Pre_Trade `Income_Basis
              `IFRS `Pre_Trade `Balance_Sheet_Value
              `IFRS `Pre_Trade `Balance_Sheet_Value_HTM
              `IFRS `Pre_Trade `Balance_Sheet_Value_LAR
              `IFRS `Pre_Trade `Balance_Sheet_Value_AFS
              `IFRS `Pre_Trade `Balance_Sheet_Value_Trading
              `IFRS `Pre_Trade `Realized_Gain
              `IFRS `Pre_Trade `Unrealized_Gain
              `IFRS `Pre_Trade `Change_in_Unrealized_Gain
              `IFRS `Pre_Trade `Accrued_Income
              `IFRS `Pre_Trade `Income_Basis_of_Trades
              `IFRS `Pre_Trade `Change_in_Income_Basis
              `IFRS `Pre_Trade `Income_Received
              `IFRS `Pre_Trade `Expenses_Paid
              `IFRS `Pre_Trade `Net_Income_Earned
              `IFRS `Pre_Trade `Income_Basis_FX_Effect
              `IFRS `Pre_Trade `Accrued_Income_FX_Effect
              `IFRS `Pre_Trade `Income_FX_Effect
              `IFRS `Pre_Trade `Unrealized_Gain_FX_Effect
              `IFRS `Pre_Trade `Appreciation
              `IFRS `Pre_Trade `Depreciation
              `IFRS `Pre_Trade `Realized_Gain_Positive
              `IFRS `Pre_Trade `Realized_Gain_Negative
              `IFRS `Pre_Trade `Unrealized_Gain_Positive
              `IFRS `Pre_Trade `Unrealized_Gain_Negative
              `IFRS `Pre_Trade `BzW
              `IFRS `Pre_Trade `Fluctuation_Reserve
              `IFRS `Pre_Trade `Amount_Invested
              `IFRS `Pre_Trade `Hidden_Reserves
              `IFRS `Pre_Trade `Hidden_Reserves_Positive
              `IFRS `Pre_Trade `Hidden_Reserves_Negative
              `IFRS `Pre_Trade `Balance_Sheet_Value_AV
              `IFRS `Pre_Trade `Quantity_AV
              `IFRS `Pre_Trade `Quantity_UV
              `IFRS `Pre_Trade `HGB_Cost_AV
              `IFRS `Pre_Trade `HGB_Cost_UV
              `IFRS `Pre_Trade `Hidden_Reserves_AV
              `US_Statutory `Pre_Trade `Income_Basis
              `US_Statutory `Pre_Trade `Balance_Sheet_Value
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_HTM
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_LAR
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_AFS
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_Trading
              `US_Statutory `Pre_Trade `Realized_Gain
              `US_Statutory `Pre_Trade `Unrealized_Gain
              `US_Statutory `Pre_Trade `Change_in_Unrealized_Gain
              `US_Statutory `Pre_Trade `Accrued_Income
              `US_Statutory `Pre_Trade `Income_Basis_of_Trades
              `US_Statutory `Pre_Trade `Change_in_Income_Basis
              `US_Statutory `Pre_Trade `Income_Received
              `US_Statutory `Pre_Trade `Expenses_Paid
              `US_Statutory `Pre_Trade `Net_Income_Earned
              `US_Statutory `Pre_Trade `Income_Basis_FX_Effect
              `US_Statutory `Pre_Trade `Accrued_Income_FX_Effect
              `US_Statutory `Pre_Trade `Income_FX_Effect
              `US_Statutory `Pre_Trade `Unrealized_Gain_FX_Effect
              `US_Statutory `Pre_Trade `Appreciation
              `US_Statutory `Pre_Trade `Depreciation
              `US_Statutory `Pre_Trade `Realized_Gain_Positive
              `US_Statutory `Pre_Trade `Realized_Gain_Negative
              `US_Statutory `Pre_Trade `Unrealized_Gain_Positive
              `US_Statutory `Pre_Trade `Unrealized_Gain_Negative
              `US_Statutory `Pre_Trade `BzW
              `US_Statutory `Pre_Trade `Fluctuation_Reserve
              `US_Statutory `Pre_Trade `Amount_Invested
              `US_Statutory `Pre_Trade `Hidden_Reserves
              `US_Statutory `Pre_Trade `Hidden_Reserves_Positive
              `US_Statutory `Pre_Trade `Hidden_Reserves_Negative
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_AV
              `US_Statutory `Pre_Trade `Quantity_AV
              `US_Statutory `Pre_Trade `Quantity_UV
              `US_Statutory `Pre_Trade `HGB_Cost_AV
              `US_Statutory `Pre_Trade `HGB_Cost_UV
              `US_Statutory `Pre_Trade `Hidden_Reserves_AV
              `HGB `Pre_Trade `Income_Basis
              `HGB `Pre_Trade `Balance_Sheet_Value
              `HGB `Pre_Trade `Balance_Sheet_Value_HTM
              `HGB `Pre_Trade `Balance_Sheet_Value_LAR
              `HGB `Pre_Trade `Balance_Sheet_Value_AFS
              `HGB `Pre_Trade `Balance_Sheet_Value_Trading
              `HGB `Pre_Trade `Realized_Gain
              `HGB `Pre_Trade `Unrealized_Gain
              `HGB `Pre_Trade `Change_in_Unrealized_Gain
              `HGB `Pre_Trade `Accrued_Income
              `HGB `Pre_Trade `Income_Basis_of_Trades
              `HGB `Pre_Trade `Change_in_Income_Basis
              `HGB `Pre_Trade `Income_Received
              `HGB `Pre_Trade `Expenses_Paid
              `HGB `Pre_Trade `Net_Income_Earned
              `HGB `Pre_Trade `Income_Basis_FX_Effect
              `HGB `Pre_Trade `Accrued_Income_FX_Effect
              `HGB `Pre_Trade `Income_FX_Effect
              `HGB `Pre_Trade `Unrealized_Gain_FX_Effect
              `HGB `Pre_Trade `Appreciation
              `HGB `Pre_Trade `Depreciation
              `HGB `Pre_Trade `Realized_Gain_Positive
              `HGB `Pre_Trade `Realized_Gain_Negative
              `HGB `Pre_Trade `Unrealized_Gain_Positive
              `HGB `Pre_Trade `Unrealized_Gain_Negative
              `Investments `Final `Quantity
              `Investments `Final `Cost_Value
              `Investments `Final `Constant_Yield_Amortized_Cost
              `Investments `Final `Market_Value
              `Investments `Final `Market_Value_QIS5_Shock_Up
              `Investments `Final `Market_Value_QIS5_Shock_Down
              `Investments `Final `Interest_Received
              `Investments `Final `Dividends_Received
              `Investments `Final `Rent_Received
              `Investments `Final `Accrued_Interest
              `Investments `Final `Consideration_Paid
              `Investments `Final `Price_Paid
              `Investments `Final `Accrued_Interest_Paid
              `Investments `Final `Consideration_Received
              `Investments `Final `Price_Received
              `Investments `Final `Accrued_Interest_Received
              `Investments `Final `Notional_Amount
              `Investments `Final `Market_Value_for_Fisher_Weil
              `Investments `Final `Market_Value_Times_Duration_Fisher_Weil
              `Investments `Final `Market_Value_Times_Convexity_Fisher_Weil
              `Investments `Final `Market_Value_Times_Duration_Modified
              `Investments `Final `Market_Value_Times_Convexity_Modified
              `Investments `Final `Market_Value_Times_Maturity
              `HGB `Final `Income_Basis
              `HGB `Final `Realized_Gain
              `HGB `Final `Unrealized_Gain
              `HGB `Final `Sell_Realized_Gain
              `HGB `Final `Reclassification_Gain
              `HGB `Final `Net_Ordinary_Income_Gain
              `HGB `Final `Balance_Sheet_Value
              `HGB `Final `Balance_Sheet_Value_HTM
              `HGB `Final `Balance_Sheet_Value_LAR
              `HGB `Final `Balance_Sheet_Value_AFS
              `HGB `Final `Balance_Sheet_Value_Trading
              `HGB `Final `Income_Basis_of_Purchases
              `HGB `Final `Change_in_Income_Basis
              `HGB `Final `Accrued_Income
              `HGB `Final `Accrued_Income_Paid
              `HGB `Final `Accrued_Income_Received
              `HGB `Final `Accrued_Expenses
              `HGB `Final `Accrued_Expenses_Received
              `HGB `Final `Accrued_Expenses_Paid
              `HGB `Final `Change_in_Accrued_Income
              `HGB `Final `Change_in_Accrued_Expenses
              `HGB `Final `Net_Income_Earned
              `HGB `Final `Change_in_Unrealized_Gain
              `HGB `Final `Appreciation
              `HGB `Final `Depreciation
              `HGB `Final `Realized_Gain_Positive
              `HGB `Final `Realized_Gain_Negative
              `HGB `Final `Unrealized_Gain_Positive
              `HGB `Final `Unrealized_Gain_Negative
              `HGB `Final `Total_Gain
              `HGB `Final `BzW
              `HGB `Final `Fluctuation_Reserve
              `HGB `Final `Amount_Invested
              `HGB `Final `Hidden_Reserves
              `HGB `Final `Hidden_Reserves_Positive
              `HGB `Final `Hidden_Reserves_Negative
              `HGB `Final `Balance_Sheet_Value_AV
              `HGB `Final `Quantity_AV
              `HGB `Final `Quantity_UV
              `HGB `Final `Hidden_Reserves_AV
              `Economic `Final `Income_Basis
              `Economic `Final `Realized_Gain
              `Economic `Final `Unrealized_Gain
              `Economic `Final `Sell_Realized_Gain
              `Economic `Final `Reclassification_Gain
              `Economic `Final `Net_Ordinary_Income_Gain
              `Economic `Final `Balance_Sheet_Value
              `Economic `Final `Balance_Sheet_Value_HTM
              `Economic `Final `Balance_Sheet_Value_LAR
              `Economic `Final `Balance_Sheet_Value_AFS
              `Economic `Final `Balance_Sheet_Value_Trading
              `Economic `Final `Income_Basis_of_Purchases
              `Economic `Final `Change_in_Income_Basis
              `Economic `Final `Accrued_Income
              `Economic `Final `Accrued_Income_Paid
              `Economic `Final `Accrued_Income_Received
              `Economic `Final `Accrued_Expenses
              `Economic `Final `Accrued_Expenses_Received
              `Economic `Final `Accrued_Expenses_Paid
              `Economic `Final `Change_in_Accrued_Income
              `Economic `Final `Change_in_Accrued_Expenses
              `Economic `Final `Net_Income_Earned
              `Economic `Final `Change_in_Unrealized_Gain
              `Economic `Final `Appreciation
              `Economic `Final `Depreciation
              `Economic `Final `Realized_Gain_Positive
              `Economic `Final `Realized_Gain_Negative
              `Economic `Final `Unrealized_Gain_Positive
              `Economic `Final `Unrealized_Gain_Negative
              `Economic `Final `Total_Gain
              `Solvency_II `Final `Income_Basis
              `Solvency_II `Final `Realized_Gain
              `Solvency_II `Final `Unrealized_Gain
              `Solvency_II `Final `Sell_Realized_Gain
              `Solvency_II `Final `Reclassification_Gain
              `Solvency_II `Final `Net_Ordinary_Income_Gain
              `Solvency_II `Final `Balance_Sheet_Value
              `Solvency_II `Final `Balance_Sheet_Value_HTM
              `Solvency_II `Final `Balance_Sheet_Value_LAR
              `Solvency_II `Final `Balance_Sheet_Value_AFS
              `Solvency_II `Final `Balance_Sheet_Value_Trading
              `Solvency_II `Final `Income_Basis_of_Purchases
              `Solvency_II `Final `Change_in_Income_Basis
              `Solvency_II `Final `Accrued_Income
              `Solvency_II `Final `Accrued_Income_Paid
              `Solvency_II `Final `Accrued_Income_Received
              `Solvency_II `Final `Accrued_Expenses
              `Solvency_II `Final `Accrued_Expenses_Received
              `Solvency_II `Final `Accrued_Expenses_Paid
              `Solvency_II `Final `Change_in_Accrued_Income
              `Solvency_II `Final `Change_in_Accrued_Expenses
              `Solvency_II `Final `Net_Income_Earned
              `Solvency_II `Final `Change_in_Unrealized_Gain
              `Solvency_II `Final `Appreciation
              `Solvency_II `Final `Depreciation
              `Solvency_II `Final `Realized_Gain_Positive
              `Solvency_II `Final `Realized_Gain_Negative
              `Solvency_II `Final `Unrealized_Gain_Positive
              `Solvency_II `Final `Unrealized_Gain_Negative
              `Solvency_II `Final `Total_Gain
              `US_GAAP `Final `Income_Basis
              `US_GAAP `Final `Realized_Gain
              `US_GAAP `Final `Unrealized_Gain
              `US_GAAP `Final `Sell_Realized_Gain
              `US_GAAP `Final `Reclassification_Gain
              `US_GAAP `Final `Net_Ordinary_Income_Gain
              `US_GAAP `Final `Balance_Sheet_Value
              `US_GAAP `Final `Balance_Sheet_Value_HTM
              `US_GAAP `Final `Balance_Sheet_Value_LAR
              `US_GAAP `Final `Balance_Sheet_Value_AFS
              `US_GAAP `Final `Balance_Sheet_Value_Trading
              `US_GAAP `Final `Income_Basis_of_Purchases
              `US_GAAP `Final `Change_in_Income_Basis
              `US_GAAP `Final `Accrued_Income
              `US_GAAP `Final `Accrued_Income_Paid
              `US_GAAP `Final `Accrued_Income_Received
              `US_GAAP `Final `Accrued_Expenses
              `US_GAAP `Final `Accrued_Expenses_Received
              `US_GAAP `Final `Accrued_Expenses_Paid
              `US_GAAP `Final `Change_in_Accrued_Income
              `US_GAAP `Final `Change_in_Accrued_Expenses
              `US_GAAP `Final `Net_Income_Earned
              `US_GAAP `Final `Change_in_Unrealized_Gain
              `US_GAAP `Final `Appreciation
              `US_GAAP `Final `Depreciation
              `US_GAAP `Final `Realized_Gain_Positive
              `US_GAAP `Final `Realized_Gain_Negative
              `US_GAAP `Final `Unrealized_Gain_Positive
              `US_GAAP `Final `Unrealized_Gain_Negative
              `US_GAAP `Final `Total_Gain
              `IFRS `Final `Income_Basis
              `IFRS `Final `Realized_Gain
              `IFRS `Final `Unrealized_Gain
              `IFRS `Final `Sell_Realized_Gain
              `IFRS `Final `Reclassification_Gain
              `IFRS `Final `Net_Ordinary_Income_Gain
              `IFRS `Final `Balance_Sheet_Value
              `IFRS `Final `Balance_Sheet_Value_HTM
              `IFRS `Final `Balance_Sheet_Value_LAR
              `IFRS `Final `Balance_Sheet_Value_AFS
              `IFRS `Final `Balance_Sheet_Value_Trading
              `IFRS `Final `Income_Basis_of_Purchases
              `IFRS `Final `Change_in_Income_Basis
              `IFRS `Final `Accrued_Income
              `IFRS `Final `Accrued_Income_Paid
              `IFRS `Final `Accrued_Income_Received
              `IFRS `Final `Accrued_Expenses
              `IFRS `Final `Accrued_Expenses_Received
              `IFRS `Final `Accrued_Expenses_Paid
              `IFRS `Final `Change_in_Accrued_Income
              `IFRS `Final `Change_in_Accrued_Expenses
              `IFRS `Final `Net_Income_Earned
              `IFRS `Final `Change_in_Unrealized_Gain
              `IFRS `Final `Appreciation
              `IFRS `Final `Depreciation
              `IFRS `Final `Realized_Gain_Positive
              `IFRS `Final `Realized_Gain_Negative
              `IFRS `Final `Unrealized_Gain_Positive
              `IFRS `Final `Unrealized_Gain_Negative
              `IFRS `Final `Total_Gain
              `US_Statutory `Final `Income_Basis
              `US_Statutory `Final `Realized_Gain
              `US_Statutory `Final `Unrealized_Gain
              `US_Statutory `Final `Sell_Realized_Gain
              `US_Statutory `Final `Reclassification_Gain
              `US_Statutory `Final `Net_Ordinary_Income_Gain
              `US_Statutory `Final `Balance_Sheet_Value
              `US_Statutory `Final `Balance_Sheet_Value_HTM
              `US_Statutory `Final `Balance_Sheet_Value_LAR
              `US_Statutory `Final `Balance_Sheet_Value_AFS
              `US_Statutory `Final `Balance_Sheet_Value_Trading
              `US_Statutory `Final `Income_Basis_of_Purchases
              `US_Statutory `Final `Change_in_Income_Basis
              `US_Statutory `Final `Accrued_Income
              `US_Statutory `Final `Accrued_Income_Paid
              `US_Statutory `Final `Accrued_Income_Received
              `US_Statutory `Final `Accrued_Expenses
              `US_Statutory `Final `Accrued_Expenses_Received
              `US_Statutory `Final `Accrued_Expenses_Paid
              `US_Statutory `Final `Change_in_Accrued_Income
              `US_Statutory `Final `Change_in_Accrued_Expenses
              `US_Statutory `Final `Net_Income_Earned
              `US_Statutory `Final `Change_in_Unrealized_Gain
              `US_Statutory `Final `Appreciation
              `US_Statutory `Final `Depreciation
              `US_Statutory `Final `Realized_Gain_Positive
              `US_Statutory `Final `Realized_Gain_Negative
              `US_Statutory `Final `Unrealized_Gain_Positive
              `US_Statutory `Final `Unrealized_Gain_Negative
              `US_Statutory `Final `Total_Gain
              `Investments `Pre_Trade `IRR
              `Investments `Pre_Trade `Risk_Adjusted_IRR
              `Investments `Final `IRR
              `Investments `Final `Risk_Adjusted_IRR);`Module `Timing `Item];)
            (`J
             .((`Portfolio
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Portfolio;,,`All];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Portfolio];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Portfolio];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Portfolio;,,`All];)
                  (`F
                   ,`Portfolio
                   ))
                )
               (`Asset_Class
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Asset_Class;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Asset_Class];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Asset_Class];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Asset_Class;,0#`];)
                  (`F
                   ,`Asset_Class
                   ))
                ))
             )
            (`U
             `Portfolio `Asset_Class
             )
            (`XX
             `IRR `Risk_Adjusted_IRR `Quantity `Notional_Amount `Cost_Value `Constant_Yield_Amortized_Cost `Market_Value `Market_Value_QIS5_Shock_Up `Market_Value_QIS5_Shock_Down `Constant_Yield_Adjustment `Accrued_Interest `Interest_Received `Return_of_Market_Value `Market_Value_for_Fisher_Weil `Market_Value_Times_Duration_Fisher_Weil `Market_Value_Times_Convexity_Fisher_Weil `Market_Value_Times_Duration_Modified `Market_Value_Times_Convexity_Modified `Market_Value_Times_Maturity `Market_Value_of_Maturing `Dividends_Declared `Dividends_Received `Dividends_Receivable `Consideration_Paid `Price_Paid `Consideration_Received `Price_Received `Principal_Received `Rent_Received `Property_Expenses_Paid `Derivatives_Cash_Flow `Accrued_Interest_Paid `Accrued_Interest_Received `Income_Basis `Balance_Sheet_Value `Balance_Sheet_Value_HTM `Balance_Sheet_Value_LAR `Balance_Sheet_Value_AFS `Balance_Sheet_Value_Trading `Realized_Gain `Unrealized_Gain `Change_in_Unrealized_Gain `Accrued_Income `Income_Basis_of_Trades `Change_in_Income_Basis `Income_Received `Expenses_Paid `Net_Income_Earned `Income_Basis_FX_Effect `Accrued_Income_FX_Effect `Income_FX_Effect `Unrealized_Gain_FX_Effect `Appreciation `Depreciation `Realized_Gain_Positive `Realized_Gain_Negative `Unrealized_Gain_Positive `Unrealized_Gain_Negative `BzW `Fluctuation_Reserve `Amount_Invested `Hidden_Reserves `Hidden_Reserves_Positive `Hidden_Reserves_Negative `Balance_Sheet_Value_AV `Quantity_AV `Quantity_UV `HGB_Cost_AV `HGB_Cost_UV `Hidden_Reserves_AV `Unrealized_Gain_FX `Unrealized_Gain_nonFX `Realized_Gain_IMR `Realized_Gain_AVR `Sell_Realized_Gain `Reclassification_Gain `Net_Ordinary_Income_Gain `Income_Basis_of_Purchases `Accrued_Income_Paid `Accrued_Income_Received `Accrued_Expenses `Accrued_Expenses_Received `Accrued_Expenses_Paid `Change_in_Accrued_Income `Change_in_Accrued_Expenses `Total_Gain
             )))
         (`Accounting
          .((`Entity
             `Entity_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Entity;,`Any_Entity_];))
            (`Standard
             `Economic
             .,(`V;{[label;p;x]
  g:`None,.G`submodules
  if[label~"Module"
    if[`HGB_Life _in g; g,:`HGB]
    if[`US_Statutory_Life _in g; g,:`US_Statutory]
    ]
 :[~x _in g;(1;("&0 is not an active &1";$x;label))]}["Standard"];))
            (`Statement;`Income_Statement;.())
            (`Timing;`Final;.())
            (`Item;`A_1_Fixed_Income;.())
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cell
                .((`Entity
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Entity_ `Any_Entity_ `Entity_1
                      ))
                   )
                  (`Standard
                   .((`c;`combo;)
                     (`o
                      `Economic `Solvency_II `US_GAAP `IFRS `US_Statutory `US_Statutory_Life `HGB `HGB_Life
                      ))
                   )
                  (`Statement
                   .((`c;`combo;)
                     (`o
                      `Assets `Liabilities `Capital_and_Surplus `Income_Statement `Change_in_Surplus
                      ))
                   )
                  (`Timing
                   .((`c;`combo;)
                     (`o
                      `Pre_Trade_Pre_Supplemental `Pre_Trade `Final
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `A_01_Net_Earned_Premium `A_01_a_Gross_Written_Premium `A_01_b_Ceded_Written_Premium `A_01_c_Change_in_Gross_Unearned_Premium `A_01_d_Change_in_Ceded_Unearned_Premium `A_02_Premiums_from_Reserve_for_Premium_Refunds `A_02_Technical_Interest `A_03_Income_from_Investments `A_03_Other_Underwriting_Income `A_03_a_Income_from_Affiliates `A_03_b_Realized_Gains `A_03_c_Other_Investment_Income `A_04_Net_Incurred_Claims `A_04_Non_Realized_Gain_from_Investments `A_04_a_Net_Claims_Paid `A_04_a_aa_Gross_Claims_Paid `A_04_a_bb_Ceded_Claims_Paid `A_04_b_Change_in_Net_Loss_and_LAE_Reserves `A_04_b_aa_Change_in_Gross_Loss_and_LAE_Reserves `A_04_b_bb_Change_in_Ceded_Loss_and_LAE_Reserves `A_05_Change_in_Other_Net_Underwriting_Provisions `A_05_Other_Underwriting_Income `A_06_Net_Claims_Incurred `A_06_Payments_to_Reserve_for_Premium_Refunds `A_06_a_Net_Claims_Paid `A_06_b_Change_in_Net_Provision_for_Outstanding_Claims `A_07_Change_in_Other_Net_Underwriting_Provisions `A_07_Underwriting_Expenses `A_07_a_Gross_Underwriting_Expenses `A_07_b_Ceded_Underwriting_Expenses `A_08_Other_Underwriting_Expenses `A_08_Payments_to_Reserve_for_Premium_Refunds `A_09_Subtotal `A_09_Underwriting_Expenses `A_10_Change_in_Claim_Equalization_Reserves `A_10_Investment_Expenses `A_11_Non_Realized_Loss_from_Investments `A_11_Underwriting_Result `A_12_Other_Underwriting_Expenses `A_13_Underwriting_Result `A_1_1_Preferred_Stock `A_1_2_Common_Stock `A_1_3_Special_Surplus `A_1_Fixed_Income `A_1_Gross_Earned_Premium `A_1_Paid_Up_Ordinary_Share_Capital `A_1_Subscribed_Capital `A_1_TP_Best_Estimate_Non_Life_Excluding_Health `A_1_Unpaid_Losses `A_1_a_Gross_Written_Premium `A_1_b_Change_in_Gross_Unearned_Premium `A_1a_Fixed_Income_HTM `A_1b_Fixed_Income_LAR `A_1c_Fixed_Income_AFS `A_1d_Fixed_Income_Trading `A_2_Assumed_Incurred_Premium `A_2_Called_Up_Ordinary_Share_Capital `A_2_Capital_Reserve `A_2_Real_Estate `A_2_Risk_Margin_Non_Life_Excluding_Health `A_2_Unpaid_LAE `A_2_a_Assumed_Paid_Premium `A_2_b_Change_in_Assumed_Accrued_Premium `A_3_1_Legal_Reserve `A_3_2_Other_Revenue_Reserves `A_3_Ceded_Earned_Premium `A_3_Mortgages `A_3_Policyholders_Account_Balances `A_3_Revenue_Reserve `A_3_a_Ceded_Written_Premium `A_3_b_Change_in_Ceded_Unearned_Premium `A_4_Ceded_Incurred_Premium `A_4_Equities `A_4_Net_Retained_Profit `A_4_Other_Policyholder_Funds_Payable `A_4_a_Ceded_Paid_Premium `A_4_b_Change_in_Ceded_Accrued_Premium `A_4a_Equities_Unaffiliated `A_4a_Equities_Unaffiliated_AFS `A_4b_Equities_Affiliated `A_4c_Equities_Unaffiliated_Trading `A_5_Derivatives `A_5_Future_Policy_Benefits `A_6_Other_Investments `A_6_Policy_Claims `A_7_Policyholder_Dividends_Payable `A_7_Short_Term_Investments `A_Goodwill `A_Gross_Technical_Provisions_Non_Life_Excluding_Health `A_Investments `A_Net_Earned_Premium `A_Ordinary_Share_Capital `A_Reserves_for_Benefits_Claims_Expenses `A_Shareholders_Equity `A_Subscribed_Capital_Unpaid `B_01_Income_from_Investments `B_01_Other_Income `B_02_Investment_Expenses `B_02_Other_Expenses `B_03_Ordinary_Result `B_03_Technical_Interest `B_04_Extraordinary_Income `B_04_Other_Income `B_05_Extraordinary_Expenses `B_05_Other_Expenses `B_06_Extraordinary_Result `B_06_Result_from_Ordinary_Business_Activities `B_07_Extraordinary_Income `B_07_Taxes_On_Income `B_08_Extraordinary_Expenses `B_08_Other_Taxes `B_09_Extraordinary_Result `B_09_Profit_Transfers `B_10_Net_Income `B_10_Taxes_on_Income `B_11_Other_Taxes `B_11_Retained_Profit_Carried_Forward `B_12_Net_Income `B_12_Withdrawal_from_Capital_Reserve `B_12_a_Withdrawal_from_Preferred_Stock `B_12_b_Withdrawal_from_Common_Stock `B_12_c_Withdrawal_from_Special_Surplus `B_12_d_Withdrawal_from_Capital_Reserve `B_13_Retained_Profit_Carried_Forward `B_13_Withdrawal_from_Revenue_Reserve `B_13_a_Withdrawal_from_Legal_Reserve `B_13_b_Withdrawal_from_Other_Revenue_Reserves `B_13_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_13_d_Withdrawal_from_Shareholder_Equity `B_14_Net_Retained_Profit `B_14_Withdrawal_from_Capital_Reserve `B_14_a_Withdrawal_from_Preferred_Stock `B_14_b_Withdrawal_from_Common_Stock `B_14_c_Withdrawal_from_Special_Surplus `B_14_d_Withdrawal_from_Capital_Reserve `B_15_Withdrawal_from_Revenue_Reserve `B_15_a_Withdrawal_from_Legal_Reserve `B_15_b_Withdrawal_from_Other_Revenue_Reserves `B_15_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_16_Net_Retained_Profit `B_1_Paid_Up_Initial_Fund `B_1_TP_Best_Estimate_Health_Similar_To_Non_Life `B_2_Called_Up_Initial_Fund `B_2_Risk_Margin_Health_Similar_To_Non_Life `B_3_Callable_Up_Initial_Fund `B_Cash `B_Equity_from_Profit_Participation_Rights `B_Fee_Income_UL_Annuity_Policies `B_Gross_Technical_Provisions_Health_Similar_To_Non_Life `B_Initial_Fund `B_Intangible_Assets `B_Other_Intangible_Assets `B_Unearned_Premiums `C_1_Net_Investment_Income `C_1_Property `C_1_TP_Best_Estimate_Health_Similar_To_Life `C_2_Investments_in_Affiliates `C_2_Realized_Investment_Gains `C_2_Risk_Margin_Health_Similar_To_Life `C_3_1_Shares `C_3_1_a_Directly_Held_Shares `C_3_1_b_Fonds `C_3_2_Bearer_Bonds `C_3_3_Mortgages `C_3_4_Other_Loans `C_3_5_Deposits_with_Banks `C_3_6_Miscellaneous_Other_Investments `C_3_Other_Investments_Total `C_Accrued_Investment_Income `C_Drafts_Outstanding `C_Gross_Technical_Provisions_Health_Similar_To_Life `C_Investments `C_Profit_from_Investments `C_Property_Plant_Equipment_Held_For_Own_Use `C_Share_Premium_Account `C_Subordinate_Liabilities `Change_in_Shareholders_Equity `D_10_Derivatives `D_11_Long_Term_Bank_Deposits `D_12_Other_Investments `D_1_Property_Other_Than_Own_Use `D_1_TP_Best_Estimate_Life_Excluding_Health_And_Unit_Linked `D_2_Participations `D_2_Risk_Margin_Life_Excluding_Health_And_Unit_Linked `D_3_Equities_Other_Than_Participations_Listed `D_4_Equities_Other_Than_Participations_Unlisted `D_5_Bonds_Government_And_Multilateral_Banks `D_6_Bonds_Corporate_Asset_Backed_Securities `D_7_Bonds_Corporate_Other `D_8_Structured_Notes `D_9_Investment_Funds `D_Deposits `D_Funds_Held `D_Gross_Technical_Provisions_Life_Excluding_Health_And_Unit_Linked `D_Investments_Other_Than_Assets_Held_For_Unit_Linked_Funds `D_Other_Income `D_Retained_Earnings `D_Separate_Account_Investments `D_Special_Items_with_Reserve_Character `E_1_Adjustments_To_Assets `E_1_Net_Unearned_Premium `E_1_Receivable_on_Direct_Insurance `E_1_TP_Best_Estimate_Unit_Linked_Funds `E_1_Underwriting_Expenses_Payable `E_1_a_Gross_Unearned_Premium `E_1_b_Ceded_Unearned_Premium `E_2_Accrued_Underwriting_Expenses `E_2_Adjustments_To_Technical_Provisions `E_2_Net_Premium_Reserves `E_2_Receivable_on_Reinsurance `E_2_Risk_Margin_Unit_Linked_Funds `E_2_a_Gross_Premium_Reserves `E_2_b_Ceded_Premium_Reserves `E_3_Expected_Profit_In_Future_Premiums `E_3_Investment_Expenses_Payable `E_3_Net_Provision_for_Outstanding_Claims `E_3_Other_Receivables `E_3_a_Gross_Provision_for_Outstanding_Claims `E_3_b_Ceded_Provision_for_Outstanding_Claims `E_3_c_Net_Drafts_Outstanding `E_4_Accrued_Investment_Expenses `E_4_Adjustments_To_Other_Liabilities `E_4_Net_Reserve_for_Premium_Refunds `E_4_a_Gross_Reserve_for_Premium_Refunds `E_4_b_Ceded_Reserve_for_Premium_Refunds `E_5_Claim_Equalization_Reserves `E_5_Other_Adjustments `E_6_Other_Insurance_Reserves `E_6_a_Other_Gross_Insurance_Reserves `E_6_b_Other_Ceded_Insurance_Reserves `E_Accrued_Expenses_and_Other `E_Assets_Held_For_Unit_Linked_Funds `E_Deferred_Policy_Acquisition_Costs `E_Gross_Technical_Provisions_Unit_Linked_Funds `E_Interest_Credited `E_Reconciliation_Reserve `E_Total_Amounts_Receivable `E_Underwriting_Reserves `F_1_Fixed_Assets_and_Inventories `F_1_Gross_Benefits_and_Losses_Paid `F_2_Ceded_Benefits_and_Losses_Paid `F_2_Current_Bank_Accounts `F_3_Miscellaneous_Other_Assets `F_Cash_Deposits_From_Reinsurers `F_Cash_Deposits_To_Cedants `F_Net_Benefits_and_Losses_Paid `F_Prepaid_Reinsurance_Premiums `F_Reinsurance_Balances_Payable `F_Reserves_For_Separate_Accounts `F_Surplus_Funds_Expected_Profit_In_Future_Premiums `F_Total_Other_Assets `G_1_Accrued_Interest_and_Rent `G_1_Change_in_Gross_Benefit_and_Loss_Reserves `G_1_Provision_for_Pension_Liabilities `G_1_Uncollateralized_Loans_Made `G_2_Change_in_Ceded_Benefit_and_Loss_Reserves `G_2_Collateralized_Loans_Made_Other_Than_Loans_On_Policies `G_2_Other_Prepaid_Expenses `G_2_Taxes_Payable `G_3_Ceded_Uncollectible_Loss_Accrual `G_3_Intra_Company_Liabilities `G_3_Loans_On_Policies `G_4_Assumed_Uncollectible_Loss_Accrual `G_Change_in_Net_Benefit_and_Loss_Reserves `G_Mortgages_And_Loans_Made `G_Other_Paid_In_Capital_Instruments `G_Other_Provisions `G_Premiums_Receivable `G_Reinsurance_Accounts_Payable `G_Shareholder_Dividends_Payable `G_Total_Prepaid_Expenses `H_1_Gross_LAE_Incurred `H_1_Reinsurance_Share_Of_TP_Non_Life_Excluding_Health `H_1_a_Gross_LAE_Paid `H_1_b_Change_in_Gross_LAE_Reserves `H_2_Ceded_LAE_Incurred `H_2_Reinsurance_Share_Of_TP_Health_Similar_To_Non_Life `H_2_a_Ceded_LAE_Paid `H_2_b_Change_in_Ceded_LAE_Reserves `H_2_c_Ceded_Uncollectible_LAE_Accrual `H_2_d_Assumed_Uncollectible_LAE_Accrual `H_3_Reinsurance_Share_Of_TP_Health_Similar_To_Life `H_4_Reinsurance_Share_Of_TP_Life_Excluding_Health_And_Unit_Linked `H_5_Reinsurance_Share_Of_TP_Life_Unit_Linked `H_6_Other_Reinsurance_Recoverables `H_Deferred_Tax_Liability `H_Derivatives `H_Net_LAE_Incurred `H_Preference_Shares `H_Reinsurance_Balances_Receivable `H_Reinsurance_Recoverables `H_Total_Assets `I_1_Amounts_Payable_on_Direct_Insurance `I_1_Policy_Acquisition_Costs_Paid `I_1_Unpaid_Benefits_and_Losses_and_LAE_Recoverable `I_1_a_Unpaid_Benefits_and_Losses_Recoverable `I_1_b_Unpaid_LAE_Recoverable `I_2_Amounts_Payable_on_Reinsurance `I_2_Change_in_DAC `I_2_Provision_for_Reinsurance `I_3_Contingent_Commissions `I_3_Liabilities_to_Banks `I_4_Debt_and_Notes `I_5_Miscellaneous_Liabilities `I_Debt `I_Deferred_Tax_Liabilities `I_Policy_Acquisition_Costs `I_Reinsurance_Recoverable `I_SPV_Recoverables `I_Subordinated_Liabilities `I_Total_Other_Liabilities `J_1_Capital_Notes `J_2_Surplus_Notes `J_Deferred_Tax_Asset `J_Financing_Costs `J_Intermediaries_Recoverables `J_Notes `J_Other_Expenses `J_Provisions_Other_Than_Technical_Provisions `J_Subordinated_Mutual_Member_Accounts `K_1_Dividends_to_Policyholders `K_2_Depreciation `K_3_Foreign_Exchange_Effect `K_Amounts_Owed_To_Credit_Institutions `K_Deferred_Income `K_Insurance_Recoverables_Excluding_Intermediaries `K_Other `K_Other_Items_Not_Specified_Above `K_Other_Liabilities `K_Property_Plant_and_Equipment `L01__Aggregate_Reserve_For_Life_Contracts `L01__Bonds `L01__Losses `L01__Premiums_And_Annuity_Considerations `L01__Premiums_Earned `L02__Aggregate_Reserve_For_AH_Contracts `L02__Considerations_For_Supplementary_Contracts_With_Life `L02__Losses_Incurred `L02__Reinsurance_Payable `L02a_Preferred_Stocks `L02b_Common_Stocks `L03__Liability_For_Deposit_Type_Contracts `L03__Loss_Adjustment_Expenses `L03__Loss_Expenses_Incurred `L03__Mortgages `L03__Net_Investment_Income `L03a_Investment_Income `L03b_Investment_Expenses `L03c_Interest_Paid `L03x_Losses_LAE `L04__Amortization_Of_IMR `L04__Commissions_Payable `L04__Contract_Claims `L04__Other_UW_Expenses `L04a_Occupied_Real_Estate `L04a__Life_Contract_Claims `L04b_Real_Estate_Held_For_Income `L04b__AH_Contract_Claims `L04c_Real_Estate_For_Sale `L05__AWI_UW_Deductions `L05__Cash `L05__Other_Expenses `L05__Policyholder_Dividends `L05__Separate_Accounts_Net_Operation_Gain `L06__Commissions_and_Expense_Allowances_On_Reinsurance_Ceded `L06__Contract_Loans `L06__Provision_For_Policyholder_Dividends_And_Coupons_Payable_In_Following_Year `L06__Taxes_Licenses_Fees `L06__Total_UW_Deductions `L07__Amount_Provisionally_Held_For_Deferred_Dividend_Policies_Not_Included_In_Line_6 `L07__Net_Income_of_Protected_Cells `L07__Other_Investments `L07__Reserve_Adjustments_On_Reinsurance_Ceded `L07a__Federal_Income_Taxes `L07b__Net_Deferred_Tax_Liability `L08__Borrowed_Money `L08__Miscellaneous_Income `L08__Net_UW_Gain `L08__Premiums_And_Annuity_Considerations_For_Life_And_AH_Contracts_Received_In_Advance `L08__Receivable_For_Securities `L08a__Income_From_Fees_From_Separate_Accounts `L08b__Charges_And_Fees_For_Deposit_Type_Contracts `L08c__AWI_For_Miscellaneous_Income `L09__AWI_Investments `L09__Contract_Liabilities_Not_Included_Elsewhere `L09__Investment_Income_Earned `L09__Total_Lines_1_To_8 `L09__Unearned_Premium `L09a_Net_Investment_Income_Earned `L09a__Surrender_Values_On_Canceled_Contracts `L09b_Investment_Expenses `L09b__Provision_For_Experience_Rating_Refunds `L09c_Interest_Paid `L09c__Other_Amounts_Payable_On_Reinsurance `L09d__IMR `L09x_Gross_Unearned_Premium `L09y_Deferred_Acquisition_Costs `L10__Advance_Premiums `L10__Cash_and_Investments_Subtotal `L10__Commissions_Due_And_Accrued `L10__Death_Benefits `L10__Realized_Capital_Gains `L11__Commissions_And_Expense_Allowances_Payable_On_reinsurance_Assumed `L11__Investment_Gain `L11__Matured_Endowments `L11__Title_Plants `L11a_Stockholder_Dividends `L11b_Policyholder_Dividends `L12__Annuity_Benefits `L12__Ceded_Premium_Payable `L12__General_Expenses_Due_and_Accrued `L12__Investment_Income_Due `L12__Net_Gain_PAB_Charged_Off `L13__Disability_Benefits_And_Benefits_Under_AH_Contracts `L13__Finance_Service_Charges `L13__Funds_Held `L13__Transfers_To_Separate_Accounts_Due_And_Accrued `L13a_PAB_In_Collection `L13b_PAB_Deferred `L13c_Accrued_Retro_Premium `L14__AWI_Misc_Income `L14__Amounts_Withheld `L14__Coupons_Guaranteed_Annual_Pure_Endowments `L14__Taxes_Licenses_Fees_Due_and_Accrued `L14a__Reinsurance_Recoverable `L14b__Funds_Deposited `L14c__Other_Reinsurance_Recoverable `L15__Amounts_Receivable_Relating_To_Uninsured_Plans `L15__Remittances `L15__Surrender_Benefits_And_Withdrawals_For_Life_Contracts `L15__Total_Other_Income `L15a__Current_Federal_And_Foreign_Income_Taxes_Including_Taxes_On_Realized_Capital_Gains `L15b__Net_Deferred_Tax_Liability `L16__Group_Conversions `L16__Income_B4_Divs_Taxes `L16__Provision_Reinsurance `L16__Unearned_Investment_Income `L16a__Tax_Recoverable `L16b__Net_Deferred_Tax_Asset `L17__Amounts_Withheld_By_Company `L17__Guarantee_Funds `L17__Interest_And_Adjustments_On_Contracts_Or_Deposit_Funds `L17__Net_FX_Adjustments `L17__Policyholder_Dividends `L18__Amounts_Held_For_Agents_Acount `L18__Drafts_Outstanding `L18__EDP_Equipment `L18__Income_B4_Taxes `L18__Payments_On_Supplementary_Contracts_With_Life_Contingencies `L19__Federal_Income_Taxes `L19__Furniture_and_Equipment `L19__Increase_In_Aggregate_Reserves_For_Life_And_AH `L19__Payable_PSA `L19__Remittances `L20__Net_Adj_Foreign_Exchange `L20__Net_FX_Adjustments `L20__Net_Income `L20__Payable_For_Securities `L20__Total_Lines_10_To_19 `L21__Amounts_Held_Under_Uninsured_Plans `L21__Commissions `L21__Liability_For_Benefits_For_Employees_And_Agents `L21__PP_Policyholder_Surplus `L21__Receivable_PSA `L22__A_H_Receivable `L22__Borrowed_Money `L22__Capital_Notes `L22__Commissions_And_Expense_Allowances_On_Reinsurance_Assumed `L22__Net_Income `L23_Stockholder_Dividends `L23__AWI `L23__AWI_Other `L23__General_Insurance_Expenses `L23__Other_Non_Admitted `L24__AWI_Other `L24__Assets_Total `L24__Ch_Unrealized_Capital_Gains `L24__Insurance_Taxes_Licenses_And_Fees `L24__Liabilities_Total `L24__Miscellaneous_Liabilities `L24a__AVR `L24b__Reinsurance_On_Unauthorized_Companies `L24c__Funds_Held_Under_Reinsurance_Treaties_With_Unauthorized_Reinsurers `L24d__Payable_To_Parent_Subsidiaries_And_Affiliates `L24e__Drafts_Outstanding `L24f__Liability_For_Amounts_Held_Under_Uninsured_Plans `L24g__Funds_Held_Under_Coinsurance `L24h__Payable_For_Securities `L24i__Capital_Notes `L24x_Assets_excluding_DTA `L25__AWI `L25__Assets_Total `L25__Ch_FX_Adjustment `L25__Increase_In_Loading_On_Deferred_And_Uncollected_Premiums `L25x_Assets_excluding_DTA `L26__Ch_Net_Deferred_Tax `L26__Net_Transfer_To_Separate_Accounts_Net_Of_Reinsurance `L26__Total_Liabilities_Excluding_Separate_Accounts `L27__AWI_For_Deductions `L27__AWI_Special_Surplus `L27__Ch_Non_Admitted_Assets `L27__From_Separate_Accounts `L28__Ch_Provision_Reinsurance `L28__Common_Capital_Stock `L28__Total_Liabilities `L28__Total_Lines_20_To_27 `L29__Ch_Surplus_Notes `L29__Common_Capital_Stock `L29__Net_Gain_Before_Dividends_To_Policyholders_And_Taxes `L29__Preferred_Capital_Stock `L30__AWI_Other `L30__Dividends_To_Policyholders `L30__Preferred_Capital_Stock `L31__AWI_Other `L31__Cumulative_Effect_Accounting_Changes `L31__Net_Gain_After_Dividends_To_Policyholders `L31__Surplus_Notes `L32__Federal_Income_Taxes `L32__Paid_In_Surplus `L32__Surplus_Notes `L32a_Ch_Capital_Paid_In `L32b_Capital_From_Surplus `L32c_Capital_To_Surplus `L33__Net_Gain_After_Dividends_To_Policyholders_And_Taxes `L33__Paid_In_Surplus `L33__Unassigned_Funds `L33a_Ch_Surplus_Paid_In `L33b_Surplus_To_Capital `L33c_Surplus_From_Capital `L34__AWI_Special_Surplus `L34__From_Home_Office `L34__Net_Realized_Capital_Gains `L34__Treasury_Stock `L35__Net_Income `L35__Policyholders_Surplus `L35__Stockholders_Dividends `L35__Unassigned_Funds `L36__Ch_Treasury_Stock `L36__PP_Capital_And_Surplus `L36__Treasury_Stock `L37__AWI_Ch_Surplus `L37__Net_Income `L37__Surplus `L38__Ch_Policyholders_Surplus `L38__Ch_Unrealized_Capital_Gains `L39__Ch_FX_Adjustment `L39__Policyholders_Surplus `L40__Ch_Net_Deferred_Tax `L41__Ch_Non_Admitted_Assets `L42__Ch_Provision_Reinsurance_In_Unauthorized_Companies `L43__Ch_Reserve_Due_To_Ch_Valuation_Basis `L44__Ch_in_AVR `L45__Ch_Treasury_Stock `L46__Surplus_Withdrawn_From_Separate_Accounts `L47__Other_Ch_Surplus_In_Separate_Accounts `L48__Ch_Surplus_Notes `L49__Cumulative_Effect_Accounting_Changes `L50a_Ch_Capital_Paid_In `L50b_Ch_Capital_Transferred_From_Surplus `L50c_Ch_Capital_Transferred_To_Surplus `L51a_Surplus_Adjustment_Paid_In `L51b_Surplus_Adjustment_Transferred_To_Capital `L51c_Surplus_Adjustment_Transferred_From_Capital `L51d_Surplus_Adjustment_Due_To_Reinsurance `L52__Stockholders_Dividends `L53__AWI_Ch_Surplus `L54__Net_Ch_Capital_And_Surplus `L55__Capital_And_Surplus `L_Deferred_Acquisition_Costs `L_Financial_Liabilities_Other_Than_Amounts_Owed_To_Credit_Institutions `L_Financing_Costs `L_Minority_Interests `L_Other_Assets `L_Separate_Account_Liabilities `L_Total_Capital_and_Surplus_and_Liabilities `M_1_Preferred_Stock_Par_Value `M_1_Tax_Paid `M_2_Change_in_Tax_Payable `M_2_Preferred_Stock_Additional_Paid_In `M_3_Change_in_Deferred_Tax `M_Payables_Trade_Not_Insurance `M_Preferred_Stock `M_Receivables_Trade_Not_Insurance `M_Tax_Incurred `N_1_Common_Stock_Par_Value `N_2_Common_Stock_Additional_Paid_In `N_Common_Stock `N_Pension_Benefit_Obligations `N_Pension_Benefit_Surplus `N_Shareholder_Dividends `Net_Benefits_and_Losses_Incurred `Net_Income `O_1_Change_in_Preferred_Stock `O_1_Deductible_Temporary_Differences `O_2_Change_in_Common_Stock `O_2_The_Carry_Forward_Of_Unused_Tax_Losses_And_Unused_Tax_Credits `O_3_Cannot_Be_Realised_In_A_Reasonable_Time_Frame `O_Change_in_Stock `O_Deferred_Tax_Assets `O_Special_Surplus `O_Uncalled_Investments `Operating_Result `Other_Net_Result `P_1_Change_in_Unrealized_Gain_on_Investments `P_2_Change_in_Unrealized_Gain_on_FOREX `P_3_Change_in_Unrealized_Gain_on_Derivatives `P_Cash_And_Cash_Equivalents `P_Change_in_Accumulated_Other_Comprehensive_Income `P_Change_in_Unrealized_Gain `P_Contingent_Liabilities `P_Other_Surplus `Profit_Before_Tax `Q_1_Change_in_Special_Surplus `Q_1_Unrealized_Gain_on_Investments `Q_2_Change_in_Other_Surplus `Q_2_Unrealized_Gain_on_FOREX `Q_3_Unrealized_Gain_on_Derivatives `Q_Accumulated_Other_Comprehensive_Income `Q_Change_in_Surplus `Q_Other_Liabilities `Q_Short_Term_Bank_Deposits `R_Amounts_Due_In_Respect_Of_Called_But_Unpaid_Capital `R_Retained_Earnings `R_Total_Other_Financial_Sector_Liabilities `S_Any_Other_Assets_Not_Elsewhere_Shown `Shareholders_Equity `Total_Assets `Total_Assets_Excluding_Other_Financial_Sector_Assets `Total_Basic_Own_Funds `Total_Capital_and_Surplus `Total_Liabilities `Total_Liabilities_Excluding_Other_Financial_Sector_Liabilities `Total_Liabilities_Including_Other_Financial_Sector_Liabilities `Total_Revenue `Total_Taxes `U_Other_Financial_Sector_Assets
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Entity;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_Accounting.html;)
            (`V;{[p;x]
            r::[#r:.L.V.user_value_list[{,/{x,/:y}'[!x;!:'x[]]}@.C[`Accounting;x`Standard];`Statement`Item;p;x];r;()]
            / se = Spanned Entities (boolean)
            e:.k.get_s (0;`A;`User;`Accounting;x`Standard;`by_Entity;:[se:`Any_Entity_=xe:x`Entity; _n; xe];`m)
            if[se
              if[|/eo:`off=e
                xe:!.k.get_s (0;`A;`User;`Accounting;x`Standard;`by_Entity)
                r,:,(1;("&0 Standard is not active for entities &1";$x`Standard;2_,/" ,",/:$xe@&eo);,`Standard`Entity)
                ] / if `off _in e
              ] / if se
            if[~se
              if[`off~e; r,:,(1;("&0 Standard is not active for entity &1";$x`Standard;$x`Entity);,`Standard`Entity)]]
            :[#r;r;_n]};)
            (`J
             .,(`Entity
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Entity;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Entity];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Entity];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Entity;,0#`];)
                  (`F
                   ,`Entity
                   ))
                )
             )
            (`U
             ,`Entity
             )
            (`XX
             `A_1_Fixed_Income `A_2_Real_Estate `A_3_Mortgages `A_4a_Equities_Unaffiliated `A_4b_Equities_Affiliated `A_4_Equities `A_5_Derivatives `A_6_Other_Investments `A_7_Short_Term_Investments `A_Investments `B_Cash `C_Accrued_Investment_Income `D_Deposits `E_Deferred_Policy_Acquisition_Costs `F_Prepaid_Reinsurance_Premiums `G_Premiums_Receivable `H_Reinsurance_Balances_Receivable `I_1_a_Unpaid_Benefits_and_Losses_Recoverable `I_1_b_Unpaid_LAE_Recoverable `I_1_Unpaid_Benefits_and_Losses_and_LAE_Recoverable `I_2_Provision_for_Reinsurance `I_Reinsurance_Recoverable `J_Deferred_Tax_Asset `K_Property_Plant_and_Equipment `L_Other_Assets `Total_Assets `A_1_Unpaid_Losses `A_2_Unpaid_LAE `A_3_Policyholders_Account_Balances `A_4_Other_Policyholder_Funds_Payable `A_5_Future_Policy_Benefits `A_6_Policy_Claims `A_7_Policyholder_Dividends_Payable `A_Reserves_for_Benefits_Claims_Expenses `B_Unearned_Premiums `C_Drafts_Outstanding `D_Funds_Held `E_1_Underwriting_Expenses_Payable `E_2_Accrued_Underwriting_Expenses `E_3_Investment_Expenses_Payable `E_4_Accrued_Investment_Expenses `E_Accrued_Expenses_and_Other `F_Reinsurance_Balances_Payable `G_Shareholder_Dividends_Payable `H_Deferred_Tax_Liability `I_Debt `J_1_Capital_Notes `J_2_Surplus_Notes `J_Notes `K_Other_Liabilities `L_Separate_Account_Liabilities `Total_Liabilities `Shareholders_Equity `M_Preferred_Stock `N_1_Common_Stock_Par_Value `N_2_Common_Stock_Additional_Paid_In `N_Common_Stock `O_Special_Surplus `P_Other_Surplus `Q_Accumulated_Other_Comprehensive_Income `R_Retained_Earnings `A_1_a_Gross_Written_Premium `A_1_b_Change_in_Gross_Unearned_Premium `A_1_Gross_Earned_Premium `A_2_a_Assumed_Paid_Premium `A_2_b_Change_in_Assumed_Accrued_Premium `A_2_Assumed_Incurred_Premium `A_3_a_Ceded_Written_Premium `A_3_b_Change_in_Ceded_Unearned_Premium `A_3_Ceded_Earned_Premium `A_4_a_Ceded_Paid_Premium `A_4_b_Change_in_Ceded_Accrued_Premium `A_4_Ceded_Incurred_Premium `A_Net_Earned_Premium `B_Fee_Income_UL_Annuity_Policies `C_1_Net_Investment_Income `C_2_Realized_Investment_Gains `C_Profit_from_Investments `D_Other_Income `Total_Revenue `E_Interest_Credited `F_1_Gross_Benefits_and_Losses_Paid `F_2_Ceded_Benefits_and_Losses_Paid `F_Net_Benefits_and_Losses_Paid `G_1_Change_in_Gross_Benefit_and_Loss_Reserves `G_2_Change_in_Ceded_Benefit_and_Loss_Reserves `G_3_Ceded_Uncollectible_Loss_Accrual `G_4_Assumed_Uncollectible_Loss_Accrual `G_Change_in_Net_Benefit_and_Loss_Reserves `Net_Benefits_and_Losses_Incurred `H_1_a_Gross_LAE_Paid `H_1_b_Change_in_Gross_LAE_Reserves `H_1_Gross_LAE_Incurred `H_2_a_Ceded_LAE_Paid `H_2_b_Change_in_Ceded_LAE_Reserves `H_2_c_Ceded_Uncollectible_LAE_Accrual `H_2_d_Assumed_Uncollectible_LAE_Accrual `H_2_Ceded_LAE_Incurred `H_Net_LAE_Incurred `I_1_Policy_Acquisition_Costs_Paid `I_2_Change_in_DAC `I_3_Contingent_Commissions `I_Policy_Acquisition_Costs `J_Other_Expenses `K_1_Dividends_to_Policyholders `K_2_Depreciation `K_3_Foreign_Exchange_Effect `K_Other `Operating_Result `L_Financing_Costs `Profit_Before_Tax `M_1_Tax_Paid `M_2_Change_in_Tax_Payable `M_3_Change_in_Deferred_Tax `M_Tax_Incurred `Net_Income `N_Shareholder_Dividends `O_1_Change_in_Preferred_Stock `O_2_Change_in_Common_Stock `O_Change_in_Stock `P_Change_in_Accumulated_Other_Comprehensive_Income `Q_1_Change_in_Special_Surplus `Q_2_Change_in_Other_Surplus `Q_Change_in_Surplus `Change_in_Shareholders_Equity `A_Goodwill `B_Other_Intangible_Assets `C_Property_Plant_Equipment_Held_For_Own_Use `D_1_Property_Other_Than_Own_Use `D_2_Participations `D_3_Equities_Other_Than_Participations_Listed `D_4_Equities_Other_Than_Participations_Unlisted `D_5_Bonds_Government_And_Multilateral_Banks `D_6_Bonds_Corporate_Asset_Backed_Securities `D_7_Bonds_Corporate_Other `D_8_Structured_Notes `D_9_Investment_Funds `D_10_Derivatives `D_11_Long_Term_Bank_Deposits `D_12_Other_Investments `D_Investments_Other_Than_Assets_Held_For_Unit_Linked_Funds `E_Assets_Held_For_Unit_Linked_Funds `F_Cash_Deposits_To_Cedants `G_1_Uncollateralized_Loans_Made `G_2_Collateralized_Loans_Made_Other_Than_Loans_On_Policies `G_3_Loans_On_Policies `G_Mortgages_And_Loans_Made `H_1_Reinsurance_Share_Of_TP_Non_Life_Excluding_Health `H_2_Reinsurance_Share_Of_TP_Health_Similar_To_Non_Life `H_3_Reinsurance_Share_Of_TP_Health_Similar_To_Life `H_4_Reinsurance_Share_Of_TP_Life_Excluding_Health_And_Unit_Linked `H_5_Reinsurance_Share_Of_TP_Life_Unit_Linked `H_6_Other_Reinsurance_Recoverables `H_Reinsurance_Recoverables `I_SPV_Recoverables `J_Intermediaries_Recoverables `K_Insurance_Recoverables_Excluding_Intermediaries `L_Deferred_Acquisition_Costs `M_Receivables_Trade_Not_Insurance `N_Pension_Benefit_Surplus `O_1_Deductible_Temporary_Differences `O_2_The_Carry_Forward_Of_Unused_Tax_Losses_And_Unused_Tax_Credits `O_3_Cannot_Be_Realised_In_A_Reasonable_Time_Frame `O_Deferred_Tax_Assets `P_Cash_And_Cash_Equivalents `Q_Short_Term_Bank_Deposits `R_Amounts_Due_In_Respect_Of_Called_But_Unpaid_Capital `S_Any_Other_Assets_Not_Elsewhere_Shown `Total_Assets_Excluding_Other_Financial_Sector_Assets `U_Other_Financial_Sector_Assets `A_1_TP_Best_Estimate_Non_Life_Excluding_Health `A_2_Risk_Margin_Non_Life_Excluding_Health `A_Gross_Technical_Provisions_Non_Life_Excluding_Health `B_1_TP_Best_Estimate_Health_Similar_To_Non_Life `B_2_Risk_Margin_Health_Similar_To_Non_Life `B_Gross_Technical_Provisions_Health_Similar_To_Non_Life `C_1_TP_Best_Estimate_Health_Similar_To_Life `C_2_Risk_Margin_Health_Similar_To_Life `C_Gross_Technical_Provisions_Health_Similar_To_Life `D_1_TP_Best_Estimate_Life_Excluding_Health_And_Unit_Linked `D_2_Risk_Margin_Life_Excluding_Health_And_Unit_Linked `D_Gross_Technical_Provisions_Life_Excluding_Health_And_Unit_Linked `E_1_TP_Best_Estimate_Unit_Linked_Funds `E_2_Risk_Margin_Unit_Linked_Funds `E_Gross_Technical_Provisions_Unit_Linked_Funds `F_Cash_Deposits_From_Reinsurers `G_Reinsurance_Accounts_Payable `H_Derivatives `I_Deferred_Tax_Liabilities `J_Provisions_Other_Than_Technical_Provisions `K_Amounts_Owed_To_Credit_Institutions `L_Financial_Liabilities_Other_Than_Amounts_Owed_To_Credit_Institutions `M_Payables_Trade_Not_Insurance `N_Pension_Benefit_Obligations `O_Uncalled_Investments `P_Contingent_Liabilities `Q_Other_Liabilities `Total_Liabilities_Excluding_Other_Financial_Sector_Liabilities `R_Total_Other_Financial_Sector_Liabilities `Total_Liabilities_Including_Other_Financial_Sector_Liabilities `Total_Basic_Own_Funds `A_1_Paid_Up_Ordinary_Share_Capital `A_2_Called_Up_Ordinary_Share_Capital `A_Ordinary_Share_Capital `B_1_Paid_Up_Initial_Fund `B_2_Called_Up_Initial_Fund `B_3_Callable_Up_Initial_Fund `B_Initial_Fund `C_Share_Premium_Account `E_1_Adjustments_To_Assets `E_2_Adjustments_To_Technical_Provisions `E_3_Expected_Profit_In_Future_Premiums `E_4_Adjustments_To_Other_Liabilities `E_5_Other_Adjustments `E_Reconciliation_Reserve `F_Surplus_Funds_Expected_Profit_In_Future_Premiums `G_Other_Paid_In_Capital_Instruments `H_Preference_Shares `I_Subordinated_Liabilities `J_Subordinated_Mutual_Member_Accounts `K_Other_Items_Not_Specified_Above `L_Minority_Interests `D_Retained_Earnings `A_1a_Fixed_Income_HTM `A_1b_Fixed_Income_LAR `A_1c_Fixed_Income_AFS `A_1d_Fixed_Income_Trading `A_4a_Equities_Unaffiliated_AFS `A_4c_Equities_Unaffiliated_Trading `M_1_Preferred_Stock_Par_Value `M_2_Preferred_Stock_Additional_Paid_In `Q_1_Unrealized_Gain_on_Investments `Q_2_Unrealized_Gain_on_FOREX `Q_3_Unrealized_Gain_on_Derivatives `P_1_Change_in_Unrealized_Gain_on_Investments `P_2_Change_in_Unrealized_Gain_on_FOREX `P_3_Change_in_Unrealized_Gain_on_Derivatives `P_Change_in_Unrealized_Gain `L01__Bonds `L02a_Preferred_Stocks `L02b_Common_Stocks `L03__Mortgages `L04a_Occupied_Real_Estate `L04b_Real_Estate_Held_For_Income `L04c_Real_Estate_For_Sale `L05__Cash `L06__Contract_Loans `L07__Other_Investments `L08__Receivable_For_Securities `L09__AWI_Investments `L10__Cash_and_Investments_Subtotal `L11__Title_Plants `L12__Investment_Income_Due `L13a_PAB_In_Collection `L13b_PAB_Deferred `L13c_Accrued_Retro_Premium `L14a__Reinsurance_Recoverable `L14b__Funds_Deposited `L14c__Other_Reinsurance_Recoverable `L15__Amounts_Receivable_Relating_To_Uninsured_Plans `L16a__Tax_Recoverable `L16b__Net_Deferred_Tax_Asset `L17__Guarantee_Funds `L18__EDP_Equipment `L19__Furniture_and_Equipment `L20__Net_Adj_Foreign_Exchange `L21__Receivable_PSA `L22__A_H_Receivable `L23__Other_Non_Admitted `L24__AWI_Other `L25x_Assets_excluding_DTA `L25__Assets_Total `L01__Losses `L02__Reinsurance_Payable `L03__Loss_Adjustment_Expenses `L04__Commissions_Payable `L05__Other_Expenses `L06__Taxes_Licenses_Fees `L07a__Federal_Income_Taxes `L07b__Net_Deferred_Tax_Liability `L08__Borrowed_Money `L09x_Gross_Unearned_Premium `L09y_Deferred_Acquisition_Costs `L09__Unearned_Premium `L10__Advance_Premiums `L11a_Stockholder_Dividends `L11b_Policyholder_Dividends `L12__Ceded_Premium_Payable `L13__Funds_Held `L14__Amounts_Withheld `L15__Remittances `L16__Provision_Reinsurance `L17__Net_FX_Adjustments `L18__Drafts_Outstanding `L19__Payable_PSA `L20__Payable_For_Securities `L21__Amounts_Held_Under_Uninsured_Plans `L22__Capital_Notes `L23__AWI `L24__Liabilities_Total `L03x_Losses_LAE `L27__AWI_Special_Surplus `L28__Common_Capital_Stock `L29__Preferred_Capital_Stock `L30__AWI_Other `L31__Surplus_Notes `L32__Paid_In_Surplus `L33__Unassigned_Funds `L34__Treasury_Stock `L35__Policyholders_Surplus `L01__Premiums_Earned `L02__Losses_Incurred `L03__Loss_Expenses_Incurred `L04__Other_UW_Expenses `L05__AWI_UW_Deductions `L06__Total_UW_Deductions `L07__Net_Income_of_Protected_Cells `L08__Net_UW_Gain `L09a_Net_Investment_Income_Earned `L09b_Investment_Expenses `L09c_Interest_Paid `L09__Investment_Income_Earned `L10__Realized_Capital_Gains `L11__Investment_Gain `L12__Net_Gain_PAB_Charged_Off `L13__Finance_Service_Charges `L14__AWI_Misc_Income `L15__Total_Other_Income `L16__Income_B4_Divs_Taxes `L17__Policyholder_Dividends `L18__Income_B4_Taxes `L19__Federal_Income_Taxes `L20__Net_Income `L21__PP_Policyholder_Surplus `L22__Net_Income `L24__Ch_Unrealized_Capital_Gains `L25__Ch_FX_Adjustment `L26__Ch_Net_Deferred_Tax `L27__Ch_Non_Admitted_Assets `L28__Ch_Provision_Reinsurance `L29__Ch_Surplus_Notes `L31__Cumulative_Effect_Accounting_Changes `L32a_Ch_Capital_Paid_In `L32b_Capital_From_Surplus `L32c_Capital_To_Surplus `L33a_Ch_Surplus_Paid_In `L33b_Surplus_To_Capital `L33c_Surplus_From_Capital `L34__From_Home_Office `L35__Stockholders_Dividends `L36__Ch_Treasury_Stock `L37__AWI_Ch_Surplus `L38__Ch_Policyholders_Surplus `L39__Policyholders_Surplus `L23__AWI_Other `L24x_Assets_excluding_DTA `L24__Assets_Total `L01__Aggregate_Reserve_For_Life_Contracts `L02__Aggregate_Reserve_For_AH_Contracts `L03__Liability_For_Deposit_Type_Contracts `L04a__Life_Contract_Claims `L04b__AH_Contract_Claims `L04__Contract_Claims `L05__Policyholder_Dividends `L06__Provision_For_Policyholder_Dividends_And_Coupons_Payable_In_Following_Year `L07__Amount_Provisionally_Held_For_Deferred_Dividend_Policies_Not_Included_In_Line_6 `L08__Premiums_And_Annuity_Considerations_For_Life_And_AH_Contracts_Received_In_Advance `L09a__Surrender_Values_On_Canceled_Contracts `L09b__Provision_For_Experience_Rating_Refunds `L09c__Other_Amounts_Payable_On_Reinsurance `L09d__IMR `L09__Contract_Liabilities_Not_Included_Elsewhere `L10__Commissions_Due_And_Accrued `L11__Commissions_And_Expense_Allowances_Payable_On_reinsurance_Assumed `L12__General_Expenses_Due_and_Accrued `L13__Transfers_To_Separate_Accounts_Due_And_Accrued `L14__Taxes_Licenses_Fees_Due_and_Accrued `L15a__Current_Federal_And_Foreign_Income_Taxes_Including_Taxes_On_Realized_Capital_Gains `L15b__Net_Deferred_Tax_Liability `L16__Unearned_Investment_Income `L17__Amounts_Withheld_By_Company `L18__Amounts_Held_For_Agents_Acount `L19__Remittances `L20__Net_FX_Adjustments `L21__Liability_For_Benefits_For_Employees_And_Agents `L22__Borrowed_Money `L23_Stockholder_Dividends `L24a__AVR `L24b__Reinsurance_On_Unauthorized_Companies `L24c__Funds_Held_Under_Reinsurance_Treaties_With_Unauthorized_Reinsurers `L24d__Payable_To_Parent_Subsidiaries_And_Affiliates `L24e__Drafts_Outstanding `L24f__Liability_For_Amounts_Held_Under_Uninsured_Plans `L24g__Funds_Held_Under_Coinsurance `L24h__Payable_For_Securities `L24i__Capital_Notes `L24__Miscellaneous_Liabilities `L25__AWI `L26__Total_Liabilities_Excluding_Separate_Accounts `L27__From_Separate_Accounts `L28__Total_Liabilities `L29__Common_Capital_Stock `L30__Preferred_Capital_Stock `L31__AWI_Other `L32__Surplus_Notes `L33__Paid_In_Surplus `L34__AWI_Special_Surplus `L35__Unassigned_Funds `L36__Treasury_Stock `L37__Surplus `L01__Premiums_And_Annuity_Considerations `L02__Considerations_For_Supplementary_Contracts_With_Life `L03a_Investment_Income `L03b_Investment_Expenses `L03c_Interest_Paid `L03__Net_Investment_Income `L04__Amortization_Of_IMR `L05__Separate_Accounts_Net_Operation_Gain `L06__Commissions_and_Expense_Allowances_On_Reinsurance_Ceded `L07__Reserve_Adjustments_On_Reinsurance_Ceded `L08a__Income_From_Fees_From_Separate_Accounts `L08b__Charges_And_Fees_For_Deposit_Type_Contracts `L08c__AWI_For_Miscellaneous_Income `L08__Miscellaneous_Income `L09__Total_Lines_1_To_8 `L10__Death_Benefits `L11__Matured_Endowments `L12__Annuity_Benefits `L13__Disability_Benefits_And_Benefits_Under_AH_Contracts `L14__Coupons_Guaranteed_Annual_Pure_Endowments `L15__Surrender_Benefits_And_Withdrawals_For_Life_Contracts `L16__Group_Conversions `L17__Interest_And_Adjustments_On_Contracts_Or_Deposit_Funds `L18__Payments_On_Supplementary_Contracts_With_Life_Contingencies `L19__Increase_In_Aggregate_Reserves_For_Life_And_AH `L20__Total_Lines_10_To_19 `L21__Commissions `L22__Commissions_And_Expense_Allowances_On_Reinsurance_Assumed `L23__General_Insurance_Expenses `L24__Insurance_Taxes_Licenses_And_Fees `L25__Increase_In_Loading_On_Deferred_And_Uncollected_Premiums `L26__Net_Transfer_To_Separate_Accounts_Net_Of_Reinsurance `L27__AWI_For_Deductions `L28__Total_Lines_20_To_27 `L29__Net_Gain_Before_Dividends_To_Policyholders_And_Taxes `L30__Dividends_To_Policyholders `L31__Net_Gain_After_Dividends_To_Policyholders `L32__Federal_Income_Taxes `L33__Net_Gain_After_Dividends_To_Policyholders_And_Taxes `L34__Net_Realized_Capital_Gains `L35__Net_Income `L36__PP_Capital_And_Surplus `L37__Net_Income `L38__Ch_Unrealized_Capital_Gains `L39__Ch_FX_Adjustment `L40__Ch_Net_Deferred_Tax `L41__Ch_Non_Admitted_Assets `L42__Ch_Provision_Reinsurance_In_Unauthorized_Companies `L43__Ch_Reserve_Due_To_Ch_Valuation_Basis `L44__Ch_in_AVR `L45__Ch_Treasury_Stock `L46__Surplus_Withdrawn_From_Separate_Accounts `L47__Other_Ch_Surplus_In_Separate_Accounts `L48__Ch_Surplus_Notes `L49__Cumulative_Effect_Accounting_Changes `L50a_Ch_Capital_Paid_In `L50b_Ch_Capital_Transferred_From_Surplus `L50c_Ch_Capital_Transferred_To_Surplus `L51a_Surplus_Adjustment_Paid_In `L51b_Surplus_Adjustment_Transferred_To_Capital `L51c_Surplus_Adjustment_Transferred_From_Capital `L51d_Surplus_Adjustment_Due_To_Reinsurance `L52__Stockholders_Dividends `L53__AWI_Ch_Surplus `L54__Net_Ch_Capital_And_Surplus `L55__Capital_And_Surplus `A_Subscribed_Capital_Unpaid `B_Intangible_Assets `C_1_Property `C_2_Investments_in_Affiliates `C_3_1_a_Directly_Held_Shares `C_3_1_b_Fonds `C_3_1_Shares `C_3_2_Bearer_Bonds `C_3_3_Mortgages `C_3_4_Other_Loans `C_3_5_Deposits_with_Banks `C_3_6_Miscellaneous_Other_Investments `C_3_Other_Investments_Total `C_Investments `D_Separate_Account_Investments `E_1_Receivable_on_Direct_Insurance `E_2_Receivable_on_Reinsurance `E_3_Other_Receivables `E_Total_Amounts_Receivable `F_1_Fixed_Assets_and_Inventories `F_2_Current_Bank_Accounts `F_3_Miscellaneous_Other_Assets `F_Total_Other_Assets `G_1_Accrued_Interest_and_Rent `G_2_Other_Prepaid_Expenses `G_Total_Prepaid_Expenses `H_Total_Assets `C_Subordinate_Liabilities `D_Special_Items_with_Reserve_Character `E_1_a_Gross_Unearned_Premium `E_1_b_Ceded_Unearned_Premium `E_1_Net_Unearned_Premium `E_2_a_Gross_Premium_Reserves `E_2_b_Ceded_Premium_Reserves `E_2_Net_Premium_Reserves `E_3_a_Gross_Provision_for_Outstanding_Claims `E_3_b_Ceded_Provision_for_Outstanding_Claims `E_3_c_Net_Drafts_Outstanding `E_3_Net_Provision_for_Outstanding_Claims `E_4_a_Gross_Reserve_for_Premium_Refunds `E_4_b_Ceded_Reserve_for_Premium_Refunds `E_4_Net_Reserve_for_Premium_Refunds `E_5_Claim_Equalization_Reserves `E_6_a_Other_Gross_Insurance_Reserves `E_6_b_Other_Ceded_Insurance_Reserves `E_6_Other_Insurance_Reserves `E_Underwriting_Reserves `F_Reserves_For_Separate_Accounts `G_1_Provision_for_Pension_Liabilities `G_2_Taxes_Payable `G_3_Intra_Company_Liabilities `G_Other_Provisions `J_Financing_Costs `I_1_Amounts_Payable_on_Direct_Insurance `I_2_Amounts_Payable_on_Reinsurance `I_3_Liabilities_to_Banks `I_4_Debt_and_Notes `I_5_Miscellaneous_Liabilities `I_Total_Other_Liabilities `K_Deferred_Income `L_Total_Capital_and_Surplus_and_Liabilities `A_1_1_Preferred_Stock `A_1_2_Common_Stock `A_1_3_Special_Surplus `A_1_Subscribed_Capital `A_2_Capital_Reserve `A_3_1_Legal_Reserve `A_3_2_Other_Revenue_Reserves `A_3_Revenue_Reserve `A_4_Net_Retained_Profit `A_Shareholders_Equity `B_Equity_from_Profit_Participation_Rights `Total_Capital_and_Surplus `A_01_a_Gross_Written_Premium `A_01_b_Ceded_Written_Premium `A_01_c_Change_in_Gross_Unearned_Premium `A_01_d_Change_in_Ceded_Unearned_Premium `A_01_Net_Earned_Premium `A_02_Technical_Interest `A_03_Other_Underwriting_Income `A_04_a_aa_Gross_Claims_Paid `A_04_a_bb_Ceded_Claims_Paid `A_04_a_Net_Claims_Paid `A_04_b_aa_Change_in_Gross_Loss_and_LAE_Reserves `A_04_b_bb_Change_in_Ceded_Loss_and_LAE_Reserves `A_04_b_Change_in_Net_Loss_and_LAE_Reserves `A_04_Net_Incurred_Claims `A_05_Change_in_Other_Net_Underwriting_Provisions `A_06_Payments_to_Reserve_for_Premium_Refunds `A_07_a_Gross_Underwriting_Expenses `A_07_b_Ceded_Underwriting_Expenses `A_07_Underwriting_Expenses `A_08_Other_Underwriting_Expenses `A_09_Subtotal `A_10_Change_in_Claim_Equalization_Reserves `A_11_Underwriting_Result `B_01_Income_from_Investments `B_02_Investment_Expenses `B_03_Technical_Interest `B_04_Other_Income `B_05_Other_Expenses `B_06_Result_from_Ordinary_Business_Activities `B_07_Extraordinary_Income `B_08_Extraordinary_Expenses `B_09_Extraordinary_Result `B_10_Taxes_on_Income `B_11_Other_Taxes `B_12_Net_Income `B_13_Retained_Profit_Carried_Forward `B_14_a_Withdrawal_from_Preferred_Stock `B_14_b_Withdrawal_from_Common_Stock `B_14_c_Withdrawal_from_Special_Surplus `B_14_d_Withdrawal_from_Capital_Reserve `B_14_Withdrawal_from_Capital_Reserve `B_15_a_Withdrawal_from_Legal_Reserve `B_15_b_Withdrawal_from_Other_Revenue_Reserves `B_15_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_15_Withdrawal_from_Revenue_Reserve `B_16_Net_Retained_Profit `A_02_Premiums_from_Reserve_for_Premium_Refunds `A_03_a_Income_from_Affiliates `A_03_b_Realized_Gains `A_03_c_Other_Investment_Income `A_03_Income_from_Investments `A_04_Non_Realized_Gain_from_Investments `A_05_Other_Underwriting_Income `A_06_a_Net_Claims_Paid `A_06_b_Change_in_Net_Provision_for_Outstanding_Claims `A_06_Net_Claims_Incurred `A_07_Change_in_Other_Net_Underwriting_Provisions `A_08_Payments_to_Reserve_for_Premium_Refunds `A_09_Underwriting_Expenses `A_10_Investment_Expenses `A_11_Non_Realized_Loss_from_Investments `A_12_Other_Underwriting_Expenses `A_13_Underwriting_Result `B_01_Other_Income `B_02_Other_Expenses `Other_Net_Result `B_03_Ordinary_Result `B_04_Extraordinary_Income `B_05_Extraordinary_Expenses `B_06_Extraordinary_Result `B_07_Taxes_On_Income `B_08_Other_Taxes `Total_Taxes `B_09_Profit_Transfers `B_10_Net_Income `B_11_Retained_Profit_Carried_Forward `B_12_a_Withdrawal_from_Preferred_Stock `B_12_b_Withdrawal_from_Common_Stock `B_12_c_Withdrawal_from_Special_Surplus `B_12_d_Withdrawal_from_Capital_Reserve `B_12_Withdrawal_from_Capital_Reserve `B_13_a_Withdrawal_from_Legal_Reserve `B_13_b_Withdrawal_from_Other_Revenue_Reserves `B_13_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_13_d_Withdrawal_from_Shareholder_Equity `B_13_Withdrawal_from_Revenue_Reserve `B_14_Net_Retained_Profit
             )))
         (`Regulatory
          .((`Entity
             `Entity_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Entity;0#`];))
            (`Regulator
             `BCAR
             .,(`V;{[p;x].L.V.active_module["Regulator or Rating Agency";p;:[x~`SaP;`Standard_and_Poors;x~`BCAR;`AM_Best;x]]};))
            (`Timing;`Final;.())
            (`Item;`Surplus;.())
            (`Period;`Current;.()))
          .((`X;`UserValues_Arguments_Source_Regulatory.html;)
            (`j
             .((`c;`Slot;)
               (`cell
                .((`Entity
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Entity_ `Any_Entity_ `Entity_1
                      ))
                   )
                  (`Regulator
                   .((`c;`combo;)
                     (`o
                      `BCAR `EU_Solvency_I
                      )
                     (`ol
                      (`BCAR `EU_Solvency_I
                       `AM_Best `EU_Solvency_I)
                      ))
                   )
                  (`Timing
                   .((`c;`combo;)
                     (`o
                      `Pre_Trade `Final
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Adjusted_Surplus `Annual_Gross_Incurred_Losses `Annual_Gross_Premium `Annual_Net_Incurred_Losses `Average_Gross_Incurred_Losses `B1_Investment_Risk_Fixed_Income_Securities `B3_Interest_Rate_Risk `B4_Credit_Risk `B5_Reserve_Risk `B6_Premium_Risk `B7_Business_Risk `Capital_Adequacy_Ratio `Deferred_Acquisition_Costs `Gross_Incurred_Loss_LAE_Net_SS `Gross_Loss_Threshold `Gross_Premium `Gross_Premium_Threshold `Hidden_Reserves `Inflation_Since_Last_Adjustment `Loss_Reserve_Equity `Losses_Two_Step_Sum `Min_Loss_Ratio_Net_To_Gross `Net_Incurred_Loss_LAE_Net_SS `Net_Required_Capital `Premium_Two_Step_Sum `Solvency_Debit `Solvency_Debit_Losses `Solvency_Debit_Premium `Solvency_Margin `Solvency_Surplus `Spread_of_Risk_Factor_B1_B2 `Subordinate_Liabilities_Disallowed `Sum_of_Capital_and_Reserves `Surplus
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   )
                  (`Transformation
                   .((`c;`combo;)
                     (`o
                      `Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN `Transform_1
                      ))
                   ))
                )
               (`editor;1;)
               (`rl
                .,(`Regulator;`"Regulator or Rating Agency";)
                )
               (`u
                .,(`Entity;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`V;{[p;x]
            r::[#r:.L.V.user_value_list[.C`Regulatory_List;`Regulator`Timing`Item;p;x];r;()]
            e:.k.get_s (0;`A;`User;`Regulatory;x`Regulator;`Entity_Specific_Parameters;:[se:`Any_Entity_=xe:x`Entity; _n; xe];`m)
            if[se
              if[|/eo:`off=e
                xe:!.k.get_s (0;`A;`User;`Regulatory;x`Regulator;`Entity_Specific_Parameters)
                r,:,(1;("&0 Standard is not active for entities &1";$x`Standard;2_,/" ,",/:$xe@&eo);,`Standard`Entity)
                ] / if `off _in e
              ] / if se
            if[~se
              if[`off~e; r,:,(1;("&0 regulatory is not active for entity &1";$x`Regulator;$x`Entity);,`Regulatory`Entity)]]
            :[#r;r;_n]};)
            (`J
             .,(`Entity
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Entity;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Entity];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Entity];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Entity;,0#`];)
                  (`F
                   ,`Entity
                   ))
                )
             )
            (`U
             ,`Entity
             )
            (`XX
             `Surplus `Deferred_Acquisition_Costs `Adjusted_Surplus `Loss_Reserve_Equity `Spread_of_Risk_Factor_B1_B2 `B1_Investment_Risk_Fixed_Income_Securities `B3_Interest_Rate_Risk `B4_Credit_Risk `B5_Reserve_Risk `B6_Premium_Risk `B7_Business_Risk `Net_Required_Capital `Capital_Adequacy_Ratio `Gross_Loss_Threshold `Gross_Premium_Threshold `Inflation_Since_Last_Adjustment `Gross_Premium `Gross_Incurred_Loss_LAE_Net_SS `Net_Incurred_Loss_LAE_Net_SS `Average_Gross_Incurred_Losses `Annual_Gross_Incurred_Losses `Annual_Net_Incurred_Losses `Annual_Gross_Premium `Premium_Two_Step_Sum `Min_Loss_Ratio_Net_To_Gross `Solvency_Debit_Premium `Losses_Two_Step_Sum `Solvency_Debit_Losses `Solvency_Debit `Sum_of_Capital_and_Reserves `Subordinate_Liabilities_Disallowed `Hidden_Reserves `Solvency_Surplus `Solvency_Margin
             )))
         (`Generic
          .((`Controls
             .((`Confidence;1;.())
               (`Period;`Current;.())
               (`Summary;`sum;.()))
             .,(`j
                .((`c;`Slot;)
                  (`cell
                   .((`Confidence
                      .,(`c;`check;)
                      )
                     (`Period
                      .((`c;`combo;)
                        (`o
                         `Current `Previous
                         ))
                      )
                     (`Summary
                      .((`c;`combo;)
                        (`o
                         `sum `min `max `count `average `stdev
                         )
                        (`ol
                         (`sum `min `max `count `average `stdev
                          `Sum `Minimum `Maximum `Count `Average `"Standard Deviation")
                         ))
                      ))
                   )
                  (`rl
                   .((`Confidence;`"Validation Warning";)
                     (`Period;`Period;)
                     (`Summary;`Summarization;))
                   )
                  (`rltip
                   .((`Confidence;`"<html>If checked (default), use of generic user value creates a validation warning.</html>";)
                     (`Period;`"<html>Use current or previous value as input?</html>";)
                     (`Summary;`"<html>Summarization method for aggregating shapes</html>";))
                   ))
                ))
            (`Source
             .((`Axis
                ,`
                .,(`V;{[p;x]r:{:[x~_n;x;x,,,,y]}'[axis_list[p]'x;!#x]; :[#r:r _dv _n;r;_n]};))
               (`Summary
                ,`sum
                .()))
             .,(`j
                .((`c;`Table;)
                  (`l;`"Tree-Structure Source of Data";)
                  (`cell
                   .,(`Summary
                      .((`c;`combo;)
                        (`o
                         `sum `min `max `count `average `stdev
                         )
                        (`ol
                         (`sum `min `max `count `average `stdev
                          `Sum `Minimum `Maximum `Count `Average `"Standard Deviation")
                         ))
                      )
                   )
                  (`cl
                   .((`Summary;`Summarization;)
                     (`Axis;`Variable;))
                   )
                  (`p
                   .((`Summary;`sum;)
                     (`Axis;`;))
                   )
                  (`cltip
                   .,(`Summary;`"<html>Summarization method for aggregating axes with multiple items</html>";)
                   )
                  (`g
                   .,(`Axis;{while[#x _ss ", ";x:_ssr[x;", ";","]];`$@[x;&" "~'x;:;"_"]};)
                   )
                  (`u
                   .,(`Axis;{if[~#Y:$y;:("";y)]; Y:1_'(Y _ss ",") _ Y:",",Y
		:[|/{*@[.:;,(`$$x;);:]}'[Y];	("Each item in the input list must begin with a-z, A-Z and contain only a-z, A-Z, 0-9, and space";x)
					("";y)]};)
                   )
                  (`f
                   .,(`Axis;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
                   ))
                )))
          .((`j
             .,(`c;`panel;)
             )
            (`X;`UserValues_Arguments_Source_Generic.html;)
            (`V;{[p;x]:[x.Controls.Confidence;,(0;"Generic User Values should be used in consultation with the professional services staff of Conning")]};)))
         (`User_Value
          .((`User_Value
             `Zero
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`User_Value;`Zero `One `Period];))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`l;`"User Values";)
               (`cltip
                .,(`User_Value;`"<html>&nbsp;User Value (avoiding circularities) or Zero, One or Period&nbsp;</html>";)
                )
               (`cell
                .((`User_Value
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_User_Value_ `Zero `One `Period `User_Value_1
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`User_Value;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_UserValues.html;)
            (`J
             .,(`User_Value
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`User_Value;,`Zero `One `Period];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`User_Value];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`User_Value];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`User_Value;,`Zero `One `Period];)
                  (`F
                   ,`User_Value
                   ))
                )
             )
            (`U
             ,`User_Value
             )))
         (`Reference
          .((`display
             ,`".."
             .((`j
                .((`c;`vector;)
                  (`p;`;)
                  (`l;`"Input Reference";)
                  (`cell
                   .((`c;`combo;)
                     (`ol;{ / Reference.display..j.cell.ol
/          `0:"call: ",(5:x),"\n" / used to guess patterns of calls
          if[~x~_n; ::[-3=tx:4:x; `$x
                       0=tx; (.k`get_path_of_labels)@`$x
                         x]]
          if[~t:4:.j.i_ / if list of values available
            h:*.j.i_
            .j.i_:1_ .j.i_
            if[~#.j.i_; .j.i_:_n]
            :h] / return first (next) result
          v:`. .j.v
          if[`. du:(.k.attr .j.v),`du / if Display Uninitialized
            vv:`.(-1_.j.v),`value
            v:(.k`path_to_labels)@vv.s / Screen Value
            if[2<#vv.si
              v:(-1_ v),`$.u.dws'$vv.si@2
              ] / if 2<#vv.si
            .[`;.j.v;:[;v]] / should be a trigger interaction, here
            .[`;du;:;0]
            ] / if `. du:(.k.attr .j.v),`du / if Display Uninitialized
          h:(.k`get_path_of_labels)[v]
          h:h[;;0] / retain just the labels
          v:@[v;i:&~v _in'(#v)#h;:[;`".."]]
          if[#i; .[`;.j.v;:[;v]]] / if vector has changed, store the updated version
          if[(#v)<#h; h:(#v)#h]
          i:&v=`".." / indices where blank required
          i:i@&~`".."_in/:h@i / only those where blank not already available
          h:@[h;i;`"..",]
          if[t=1 / if just completed call to j.u
            if[~.j.i_<0; c:h@.j.i_; .j.i_:1_ h,,c; :*h]
            if[ .j.i_<0; c:h@-.j.i_+1; .j.i_:_n; :c]
            ] / if t=1
          / assumed to be initial display call from here on
          .j.i_::[1<#h; 1_ h; _n]
          *h};)
                     (`o;;))
                   )
                  (`u;{ / Reference.display..j.u
         if[x~y; .j.i_:-1-*.j.i; :x] / signal value
         .j.i_:*.j.i
         lp:(.k`get_path_of_labels)[v:.[`. .j.v;.j.i;:[;y]]]
         pc:#lp / Path Count
         v:(+/&\(pc#v)_lin'lp[;;0])#v / keep only those elements of current value that are in the path
         if[pc>#v / can never happen if last element of v was already a blank
           v,:`".." ]
         .[`;ts:(.k.attr .j.v),`ts;:;0] / turn trigger off
         .[`;.j.v;:[;v]]
         .[`;ts;:;1] / turn trigger on
         y};))
                )
               (`editor;1;)
               (`t;"if[display..ts&~value.o~display\n         value.o:display\n         value.s:(.k`labels_to_path)[display]\n         if[value.a:`\"..\"_in value.s; value[`a`ai`si]:_n]\n         if[~value.a~_n\n           value.si:{(&~=':4::'\"|\",x)_ x}[value.s] / temp storage\n           value.a:1_.k.tag[.S;0,`A,*value.si]\n           if[2=#value.si; value.a:value.a,value.si@1] / simple index present\n           if[3>#value.si; value[`ai`si]:_n] / extended data not present\n           if[2<#value.si / extended data present\n             value.s:*value.si\n             value.ai:1_.k.tag[.S;0,`A,(-1_ value.s),`label] / only `label currently supported by get_paths_into_structure\n             value.si[0]:(-1_ value.si[0]),-1#value.ai\n             ] / if 2<#value.si\n           ] / if not invalid path\n         ]";)
               (`ts;1;)
               (`du;1;)
               (`H_t;"if[display..ts&~value.o~display\n         value.o:display\n         value.s:(.k`labels_to_path)[display]\n         if[value.a:`\"..\"_in value.s; value[`a`ai`si]:_n]\n         if[~value.a~_n\n           value.si:{(&~=':4::'\"|\",x)_ x}[value.s] / temp storage\n           value.a:1_.k.tag[.S;0,`A,*value.si]\n           if[2=#value.si; value.a:value.a,value.si@1] / simple index present\n           if[3>#value.si; value[`ai`si]:_n] / extended data not present\n           if[2<#value.si / extended data present\n             value.s:*value.si\n             value.ai:1_.k.tag[.S;0,`A,(-1_ value.s),`label] / only `label currently supported by get_paths_into_structure\n             value.si[0]:(-1_ value.si[0]),-1#value.ai\n             ] / if 2<#value.si\n           ] / if not invalid path\n         ]";)))
            (`value
             .((`s
                ,`".."
                )
               (`o;;)
               (`a;;)
               (`ai;;)
               (`si;;))
             .,(`B;`Hidden;)))
          .((`j
             .((`c;`panel;)
               (`border;0;)
               (`a;{(!x)@&test'x[.;`B]};))
             )
            (`V;{[p;x] / reference_vector..V
    r::[`".."_in x.display
          (1;"incomplete reference argument")
        `".."_in t:(.k`labels_to_path)@x.display
          (1;"User Value refers to a missing input (path may be truncated)")
        ~(4:.k.get_s (.C`get_mod_s_path)0,`A,t)_in 1 2 / can't use value.si: removed prior to validation
          (1;"Non-scalar argument")
        ()]
    :[#r;,r;_n]};)
            (`X;`UserValues_Arguments_Source_InputReference.html;)
            (`J
             .((`Asset_Class
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Claim_Cost_Index
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Compression
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Consolidation
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Counterparty
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Entity
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Financing_Instrument
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Function
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Greek
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`HGB_Equalization_Line
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Inner_Loop
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Library_Pattern
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Life_Product
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Life_Table
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Lookup
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Market_Index
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Peril
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Plan
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Portfolio
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Product
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Product_Group
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`QIS5_Line
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`QIS5_Region
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Return_Class
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Risk_Class
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`State
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Supplemental_Model
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Transform
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Transition
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Treaty
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Treaty_Group
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`User_Relative_Value
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`User_Value
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                ))
             )
            (`U
             `Asset_Class `Claim_Cost_Index `Compression `Consolidation `Counterparty `Entity `Financing_Instrument `Function `Greek `HGB_Equalization_Line `Inner_Loop `Library_Pattern `Life_Product `Life_Table `Lookup `Market_Index `Peril `Plan `Portfolio `Product `Product_Group `QIS5_Line `QIS5_Region `Return_Class `Risk_Class `State `Supplemental_Model `Transform `Transition `Treaty `Treaty_Group `User_Relative_Value `User_Value
             )))
         (`Prior_Arguments
          .((`value
             `x
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{!.k.get_s (6#x),`Arguments`Source}];))
            (`initial
             `"0."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .,(`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`value;`"Current Value";)
                  (`initial;`"Initial Value";))
                ))
             ))
         (`Combination
          .((`m
             `pseudo
             .((`C;`model;)
               (`j
                .((`l;`"Combination Type";)
                  (`o
                   `pseudo `Spline `Function `Transform
                   )
                  (`ol
                   (`pseudo `Spline `Function `Transform
                    `"Formulaic Expression" `"Piecewise Linear" `"Library Function" `"Library Transform")
                   )
                  (`fill;`h;)
                  (`c;`combo;)
                  (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};))
                )
               (`M;();)
               (`P;;)))
            (`pseudo
             ,"x"
             .((`j
                .((`c;`Text;)
                  (`l;`"Formulaic Expression";)
                  (`wy;0.7;)
                  (`f;{ / to_local[]
  if[(x~_n)|~#x; :x] / if no string to translate
  as:sfsm.split x / Alternating Segments - data,string,data,etc
  if[~#as; :x]  / no modification if no text
  ,/@[as;2*!-_-(#as)%2;decode_source]};)
                  (`g;{ / to_canon[]
  if[(x~_n)|~#x; :x] / if no string to translate
  as:sfsm.split x / Alternating Segments - data,string,data,etc
  if[~#as; :x]  / no modification if no text
  ,/@[as;2*!-_-(#as)%2;encode_source]};))
                )
               (`Y;`formulaic_expression;)
               (`M
                ,`pseudo
                )))
            (`Spline
             .((`Input
                0 1.0
                .,(`V;{[p;x]:[~(x~x@<x)&/~x<0.;(1;"Must be a sorted vector of non-negative values")]};))
               (`Output
                0 0.0
                .()))
             .((`j
                .((`c;`Table;)
                  (`cltip
                   .,(`Input;`"Input values must be sorted from smallest to biggest";)
                   )
                  (`f
                   .((`Output;18.6;)
                     (`Input;18.6;))
                   )
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`p
                   .((`Input;1.0;)
                     (`Output;0.0;))
                   )
                  (`l;`"Spline (with linear interpolation)";))
                )
               (`P;1;)
               (`F
                .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`Input `Output;0#`;0 0.0;();0;0];)
                )
               (`V;{[p;x]:[~#x.Input;(1;"Must contain at least one row")]};)
               (`M
                ,`Spline
                )))
            (`Function
             `Zero
             .((`U;`Function;)
               (`j
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Function_ `Zero `One `Pi `NA `If `Function_1
                   )
                  (`u;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
                )
               (`J
                .((`C;{[c;x;d;e;a;u]	d::[d~_n;*x,u;d]
 			e:.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u]
 			e:.[e;(`j;`u);:[;c]]
 			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};`Zero `One `Pi `NA `If];)
                  (`D;{  [d;e;a;u]	if[d _in u;d:`Unspecified_];(d;e)};)
                  (`R;{  [d;e;a;u]	(:[d _in !u;u@d;d];e)};)
                  (`A;{  [d;e;a;u]	(d;e)};)
                  (`L;{[x;d;e;a;u]	(d;.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u])}[`Zero `One `Pi `NA `If];))
                )
               (`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Function;`Zero `One `Pi `NA `If];)
               (`M
                ,`Function
                )))
            (`Transform
             `Linear
             .((`U;`Transform;)
               (`j
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Transform_ `Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN `Transform_1
                   )
                  (`u;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
                )
               (`J
                .((`C;{[c;x;d;e;a;u]	d::[d~_n;*x,u;d]
 			e:.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u]
 			e:.[e;(`j;`u);:[;c]]
 			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];)
                  (`D;{  [d;e;a;u]	if[d _in u;d:`Unspecified_];(d;e)};)
                  (`R;{  [d;e;a;u]	(:[d _in !u;u@d;d];e)};)
                  (`A;{  [d;e;a;u]	(d;e)};)
                  (`L;{[x;d;e;a;u]	(d;.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u])}[`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];))
                )
               (`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Transform;`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];)
               (`M
                ,`Transform
                )))
            (`Single_Argument
             `x
             .((`j
                .((`c;`scalar;)
                  (`f;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`fill;`h;))
                )
               (`M
                `Spline `Transform
                )
               (`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
            (`Argument_List
             ,`x
             .((`j
                .((`c;`Vector;)
                  (`f;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`p;`x;)
                  (`fill;`b;))
                )
               (`M
                ,`Function
                )
               (`V;{[p;x]r:();r,:(,/function_validation[(!.k.get_s (6#p),`Arguments`Source)_dv p@8;p]'x)_dv _n;:[#r;r;_n]};)))
            (`Initial
             .((`m
                `func
                .((`C;`model;)
                  (`j
                   .((`l;`"Initial Value";)
                     (`o
                      `func `value
                      )
                     (`ol
                      (`func `value
                       `"Apply Function" `"Fixed Initial Value")
                      )
                     (`fill;`h;)
                     (`c;`combo;)
                     (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};))
                   )
                  (`M;();)
                  (`P;;)))
               (`func

                .((`j
                   .((`c;`panel;)
                     (`l;`;)
                     (`border;0;))
                   )
                  (`M
                   ,`func
                   )))
               (`value
                0.0
                .((`j
                   .((`c;`Scalar;)
                     (`f;18.6;)
                     (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`l;`"Fixed Initial Value";)
                     (`fill;`h;))
                   )
                  (`M
                   ,`value
                   ))))
             .((`j
                .((`c;`panel;)
                  (`border;0;)
                  (`l;`;)
                  (`wy;1e-010;)
                  (`a
                   `m `func
                   ))
                )
               (`M
                `pseudo `Spline `Function `Transform
                )
               (`L;0;))))
          .((`j
             .((`c;`panel;)
               (`wy;0.5;)
               (`a
                `m `pseudo `Initial
                ))
             )
            (`P;1;)
            (`X;`UserValues_Arguments.html;))))
       )
      (`a
       .((`P;1;)
         (`j
          .((`c;`panel;)
            (`a
             ,`Fixed
             ))
          ))
       ))
    )))

randomDraw: (.,(`x
    .((`Path_Number

       .,(`X;`UserValues_Arguments_Source_PathNumber.html;))
      (`Fixed
       .((`Period
          ,`"2011 +"
          .,(`T;;))
         (`Value
          ,0.0
          .,(`T;;)))
       .((`j
          .((`l;`"User Time Series";)
            (`c;`table;)
            (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
            (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
            (`p
             .((`Value;0.0;)
               (`Period;`;))
             )
            (`f;18.6;)
            (`e
             .,(`Period;0;)
             )
            (`bg
             .,(`Period;`e;)
             )
            (`b
             .,(`Period;`n;)
             )
            (`fixed;1;)
            (`popup
             .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
               (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
               (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
               (`Append_Years
                .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                  (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                  (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                  (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                )
               (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
               (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
               (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
               (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
             .()))
          )
         (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
         (`C;`Future;)
         (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
         (`X;`UserValues_Arguments_Source_UserTimeSeries.html;)))
      (`by_Path
       .((`Mechanics
          .((`Type;`Stock;.())
            (`Repeats;`All;.()))
          .,(`j
             .((`c;`Slot;)
               (`cell
                .((`Type
                   .((`c;`combo;)
                     (`o
                      `Stock `Flow `Rate
                      ))
                   )
                  (`Repeats
                   .((`c;`combo;)
                     (`o
                      `Last `All `None
                      )
                     (`ol
                      (`Last `All `None
                       `"Repeat Last Path" `"Repeat All Paths" `"Unspecified Paths are Zero")
                      ))
                   ))
                )
               (`popup
                .((`Cut;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`cut;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy_All;{[f;junk]c:name.c v:f .j.v;of[c;`copy_all;(v;)]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`s99;" ";)
                  (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                .,(`j
                   .,(`ne
                      ((,`Cut
                        ,`Copy
                        ,`Copy_All
                        ,`Paste
                        ,`s99
                        ,`Copy_Location)
                       0 0 1 0 0 0)
                      )
                   ))
               (`krd;{
 c:cl v:.j.v;p:!att[v;`popup]
 if[(~1~the[c;`alwaysSel])&empty s:att[v;`s]
  k:(+,p;-1_@[&q,(1+#p)-q:p?`s99;p?`Append;:;1])
  if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
  .[`;jd[v],`popup.`j`ne;:;]
  :_n]
 k:++(+,p;:[(~name.rank v)|#s   ;:[#b:&(o:`Paste`Paste_Transpose)_lin p
                                   @[&0,#p;p?/:o b;:;|/((),the[cl v;`cbformats])_lin .w.cbformats[]]
                                   &0,#p]
                                 0])
 if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
 if[`Append _in,/*k;k[1;(,/*k)?`Append]:1]
 k:.[k;(1;((,/*k)?`s99)_!#*k);:;1]
 .[`;jd[v],`popup.`j`ne;:;k]
};))
             ))
         (`Data
          .((`m
             `Internal
             .((`C;`model;)
               (`j
                .((`o
                   `Internal `External
                   )
                  (`l;`"Data Source";)
                  (`ol
                   (`Internal `External
                    `"Internal Data" `"Batch Import File")
                   )
                  (`fill;`h;)
                  (`c;`combo;)
                  (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
                  (`popup
                   .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                   .()))
                )
               (`M;();)
               (`P;;)))
            (`Internal
             .((`Path;!0;.())
               (`Date
                !0
                .,(`V;{[p;x]:[#a:&(x~\:0I)|~1=4::'x;(1;"Not a valid date";,a)]};))
               (`Value;0#0.0;.()))
             .((`V;{[p;x]:[#a:,/a@&0<#:'a:1_'=+x`Path`Date;(0;"Duplicate path/date pairs are ignored";,(`Path`Date;a))]};)
               (`j
                .((`c;`Table;)
                  (`f
                   .((`Value;9.6;)
                     (`Path;{9$_ x};)
                     (`Date;{ / .r.date.f
 if[(~1=4:x)|(x<0)|x~0I; :"Invalid date"]
 d:0 100 100 _vs x                                / separate date into components
 s:date.format_string[]                           / separate format string into components
 i:&s _lin !date.fparts                           / which format components represent parts of the date
 s[i]:{date.fparts[y]x}[d]'s i                    / replace format components with date components
 ,/$s};))
                   )
                  (`g
                   .((`Value;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`Path;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`Date;{:[*r:.[date.g_;,x;:];0I;r 1]};))
                   )
                  (`u
                   .((`Value;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`Path;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`Date;{:[~y=0I;		("";y);	(("Input should be of the form &0";.r.sshortdateexample[]);x)]};))
                   )
                  (`p
                   .((`Path;0;)
                     (`Date;20121231;)
                     (`Value;0.0;))
                   )
                  (`popup
                   .((`Insert;{if[#s:of[c:name.c v;`Rows;,v:ad -2_.j.v];of[c;`ins`row;(v;*s;#s)];fire_f[`Insert;`t;v;()]]};)
                     (`Append;{of[c;`app`row;(v;1|#of[c:name.c v;`Rows;,v:ad -2_.j.v])];fire_f[`Append;`t;v;()];};)
                     (`Delete;{if[#s:of[c:name.c v;`Rows;,v:ad -2_.j.v];of[c;`del`row;(v;s)];fire_f[`Delete;`t;v;()]]};)
                     (`s;" ";)
                     (`Cut;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`cut;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Copy_All;{[f;junk]c:name.c v:f .j.v;of[c;`copy_all;(v;)]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste_Transpose;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste_transpose;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`s99;" ";)
                     (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                   .,(`j
                      .,(`ne
                         ((,`Insert
                           ,`Append
                           ,`Delete
                           ,`s
                           ,`Cut
                           ,`Copy
                           ,`Copy_All
                           ,`Paste
                           ,`Paste_Transpose
                           ,`s99
                           ,`Copy_Location)
                          0 1 0 0 0 0 1 0 0 0 0)
                         )
                      ))
                  (`krd;{
 c:cl v:.j.v;p:!att[v;`popup]
 if[(~1~the[c;`alwaysSel])&empty s:att[v;`s]
  k:(+,p;-1_@[&q,(1+#p)-q:p?`s99;p?`Append;:;1])
  if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
  .[`;jd[v],`popup.`j`ne;:;]
  :_n]
 k:++(+,p;:[(~name.rank v)|#s   ;:[#b:&(o:`Paste`Paste_Transpose)_lin p
                                   @[&0,#p;p?/:o b;:;|/((),the[cl v;`cbformats])_lin .w.cbformats[]]
                                   &0,#p]
                                 0])
 if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
 if[`Append _in,/*k;k[1;(,/*k)?`Append]:1]
 k:.[k;(1;((,/*k)?`s99)_!#*k);:;1]
 .[`;jd[v],`popup.`j`ne;:;k]
};))
                )
               (`M
                ,`Internal
                )))
            (`External
             .((`File
                ""
                .((`j
                   .((`c;`string;)
                     (`l;`"Batch Import File Location";)
                     (`fill;`h;)
                     (`popup
                      .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                      ))
                   )
                  (`V;{[p;x]:[~.f.exists x; (1;"File does not exist")]};)))
               (`Browse
                {[x]
  vpath:(-1_ .j.v),`File
  spath:(`. `k`Main`split`right.`II),(-1_ 5_ .j.v),`File
  if[~(f:.f.getNetPath .j.Open`.k.CSV)_in (_n;"")
    .k.set_s[spath;f]
    .[`;vpath;:;f];
    .k.activate .k.add .k.ACTIVE
    ]
  }
                .((`j
                   .((`c;`button;)
                     (`async;2;)
                     (`wx;0.2;)
                     (`l;`"<html>Browse<br>for File</html>";)
                     (`fill;`h;)
                     (`hpos;`r;)
                     (`vpos;`c;)
                     (`anchor;`c;)
                     (`image;"Open_32.png";))
                   )
                  (`Y;`null;))))
             .((`j
                .((`c;`panel;)
                  (`a
                   ,`File `Browse
                   )
                  (`wy;1e-010;))
                )
               (`M
                ,`External
                ))))
          .,(`j
             .((`c;`panel;)
               (`a
                `m `Internal
                ))
             )))
       .((`j
          .((`c;`panel;)
            (`l;`"User Time Series by Path";))
          )
         (`V;{[p;x]if[`External~x`m; if[.f.exists f:x[`External;`File]; :.L.V.external_data[`Path`Date`Value;f] ]]};)
         (`X;`UserValues_Arguments_Source_UserTimeSeriesbyPath.html;)))
      (`Random_Draw
       .((`m
          `Normal
          .((`C;`model;)
            (`j
             .((`l;`Distribution;)
               (`fill;`h;)
               (`c;`combo;)
               (`o
                `Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                )
               (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
               (`ol
                (`Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                 `Beta `Binomial `Chi_Squared `"Discrete Distribution" `Gamma `"Linear Distribution Function" `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                .()))
             )
            (`M;();)
            (`P;;)))
         (`Hash
          -1
          .((`M
             `Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
             )
            (`j
             .((`c;`scalar;)
               (`f;{:[0>4:x;_f'x;x<0;"Default";9$_ x]};)
               (`g;{:[~&/x _lin"0123456789,.";-1;.C[`G;`integer] x]};)
               (`u;{:[y~0n;		("Input should be numeric";x)
                   y~0N;		("Input should be integer-valued";x)
                   y>max:65536;		(("Input must be at most &0";$max);max)
					("";y)]};)
               (`fill;`h;)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                .()))
             )))
         (`Beta
          .((`alpha
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`beta
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`alpha;`"Shape Parameter (alpha)";)
                  (`beta;`"Shape Parameter (beta)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Beta
             )))
         (`Binomial
          .((`n
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`p
             `"0.5"
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`n;`"n parameter (number of trials)";)
                  (`p;`"p parameter (prob. of success)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Binomial
             )))
         (`Chi_Squared
          .,(`df
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .,(`df;`"Degrees of freedom";)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Chi_Squared
             )))
         (`Discrete_Distribution
          .((`probability
             ,1.0
             .())
            (`value
             ,0.0
             .()))
          .((`j
             .((`l;`"Discrete Distribution";)
               (`c;`Table;)
               (`cl
                .((`probability;`"Cumulative\nProbabilities";)
                  (`value;`"Sorted\nDiscrete\nValues";))
                )
               (`cltip
                .((`probability;`"Cumulative probabilities for discrete distribution";)
                  (`value;`"Discrete values must be sorted from smallest to largest";))
                )
               (`p
                .((`probability;0.0;)
                  (`value;0.0;))
                )
               (`f
                .((`probability;9.6;)
                  (`value;18.6;))
                )
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`P;1;)
            (`T;;)
            (`F
             .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`probability `value;0#`;0 0.0;();0;0];)
             )
            (`V;{[p;x]
  r:()
  if[{(~x~x@<x)|(0.>*x)|~1.=*|x}@x.probability
   r,:,(1;"Probabilities must be a sorted vector of cumulative probabilities ending with 1")]
  if[{(~x~x@<x)}@x.value
   r,:,(1;"Values must be sorted in acsending order")]
  :[0=#r;_n;r]};)
            (`M
             ,`Discrete_Distribution
             )))
         (`Gamma
          .((`a
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`b
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`a;`"Shape Parameter (a)";)
                  (`b;`"Rate Parameter (b)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Gamma
             )))
         (`Linear_Function
          .((`probability
             0 1.0
             .())
            (`value
             0 0.0
             .()))
          .((`j
             .((`l;`"Linear Distribution Function";)
               (`c;`Table;)
               (`cl
                .((`probability;`"Cumulative\nProbabilities";)
                  (`value;`"Sorted\nCutpoints";))
                )
               (`cltip
                .((`probability;`"Cumulative probabilities at cutpoints of piece-wise linear distribution (uniform distribution between cutpoints)";)
                  (`value;`"Values (at cutpoints) must be sorted from smallest to largest";))
                )
               (`p
                .((`probability;0.0;)
                  (`value;0.0;))
                )
               (`f
                .((`probability;9.6;)
                  (`value;18.6;))
                )
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`P;1;)
            (`T;;)
            (`F
             .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`probability `value;0#`;0 0.0;();0;0];)
             )
            (`V;{[p;x]
  r:()
  if[{(~x~x@<x)|(~0.=*x)|~1.=*|x}@x.probability
   r,:,(1;"Probabilities must be a sorted vector of cumulative probabilities starting with 0 and ending with 1")]
  if[{(~x~x@<x)}@x.value
   r,:,(1;"Values must be sorted in acsending order")]
  :[0=#r;_n;r]};)
            (`M
             ,`Linear_Function
             )))
         (`Loggamma
          .((`a
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`b
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`a;`"Shape Parameter (a) of underlying Gamma";)
                  (`b;`"Rate Parameter (b) of underlying Gamma";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Loggamma
             )))
         (`Lognormal
          .((`mean
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`stdev
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`mean;`Mean;)
                  (`stdev;`"Standard Deviation";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Lognormal
             )))
         (`Negative_Binomial
          .((`r
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`p
             `"0.5"
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`r;`"r parameter";)
                  (`p;`"p parameter (prob. of success)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Negative_Binomial
             )))
         (`Negative_Binomial_from_Moments
          .((`mean
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`stdev
             `"2."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`mean;`Mean;)
                  (`stdev;`"Standard Deviation";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Negative_Binomial_from_Moments
             )))
         (`Normal
          .((`mean
             `"0."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`stdev
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`mean;`Mean;)
                  (`stdev;`"Standard Deviation";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                .()))
             )
            (`M
             ,`Normal
             )))
         (`Pareto
          .((`alpha
             `"2."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`min
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`alpha;`"Shape Parameter (alpha)";)
                  (`min;`"Location Parameter (minimum value)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Pareto
             )))
         (`Poisson
          .,(`lambda
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .,(`lambda;`Lambda;)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Poisson
             )))
         (`Resampling
          .,(`value
             ,0.0
             .())
          .((`j
             .((`l;`Resampling;)
               (`c;`Table;)
               (`cl
                .,(`value;`"Equally\nProbable\nValues";)
                )
               (`p
                .,(`value;0.0;)
                )
               (`f
                .,(`value;18.6;)
                )
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`P;1;)
            (`T;;)
            (`F
             .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[,`value;0#`;,0.0;();0;0];)
             )
            (`M
             ,`Resampling
             )))
         (`T_Distribution
          .,(`df
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .,(`df;`"Degrees of freedom";)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`T_Distribution
             )))
         (`Uniform
          .((`min
             `"0."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`max
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`min;`Minimum;)
                  (`max;`Maximum;))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Uniform
             )))
         (`Weibull
          .((`alpha
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
            (`beta
             `"1."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .((`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`alpha;`"Shape Parameter (alpha)";)
                  (`beta;`"Scale Parameter (beta)";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Weibull
             ))))
       .((`j
          .((`c;`panel;)
            (`a
             `m `Hash `Normal
             ))
          )
         (`X;`UserValues_Arguments_Source_RandomDraw.html;)))
      (`External_Rate
       .((`m
          `Bond_Yield
          .((`C;`model;)
            (`j
             .((`l;`"Model Choice";)
               (`fill;`h;)
               (`c;`combo;)
               (`o
                `Bond_Yield `FX `Inflation
                )
               (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
               (`ol
                (`Bond_Yield `FX `Inflation
                 `"Factor of Bond Yields" `"Factor of Foreign Exchange Rate" `"Factor of Inflation")
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M;();)
            (`P;;)))
         (`Bond_Yield
          .((`Period
             ,`"2011 +"
             .,(`T;{[nn;x;y]x,nn}[`future_period];))
            (`mrkt
             ,`Treasury
             .())
            (`econ
             ,`US
             .,(`V;{[p;x]
  :[1=#e:?x a:&~x _lin `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
         (1;("Economy &0 is not in the list of economies to run for this simulation";$e);,,a)
    1<#e;(1;("Economies &0 are not in the list of economies to run for this simulation";,/" ",/:$:'e);,,a)]};))
            (`year
             ,`"10."
             .,(`V;{[p;x]r:();r,:(,/function_validation[!.k.get_s (6#p),`Arguments`Source;p]'x)_dv _n;:[#r;r;_n]};))
            (`lags
             ,0
             .,(`V;{[p;x]:[#a:&~(x>-1)&1=4::'x;(1;"Must be non-negative integers";,,a)]};))
            (`avgp
             ,1
             .,(`V;{[p;x]:[#a:&~(x>0)&1=4::'x;(1;"Must be positive integers";,,a)]};))
            (`mult
             ,1.0
             .())
            (`sprd
             ,0.0
             .()))
          .((`j
             .((`l;`"Factor of Bond Yields";)
               (`c;`table;)
               (`p
                .((`Period;`;)
                  (`mrkt;`Treasury;)
                  (`econ;`US;)
                  (`year;`"10.";)
                  (`lags;0;)
                  (`avgp;1;)
                  (`mult;1.0;)
                  (`sprd;0.0;)
                  (`round;`Nearest;))
                )
               (`f
                .((`lags;{9$_ x};)
                  (`avgp;{9$_ x};)
                  (`mult;9.6;)
                  (`sprd;9.6;))
                )
               (`e
                .,(`Period;0;)
                )
               (`bg
                .,(`Period;`e;)
                )
               (`b
                .,(`Period;`n;)
                )
               (`fixed;1;)
               (`popup
                .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                  (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                  (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                  (`Append_Years
                   .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                     (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                     (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                     (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                   )
                  (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                )
               (`cl
                .((`mrkt;`Rating;)
                  (`econ;`Economy;)
                  (`year;`"Maturity\n(in Years)";)
                  (`lags;`"Lag\n(in periods)";)
                  (`avgp;`"Number of\nPeriods to\nAverage";)
                  (`mult;`"Multiplicative\nFactor\non Yield";)
                  (`sprd;`"Additive Factor\nto Yield\n(Spread)";))
                )
               (`cltip
                .((`econ;`"<html>US:  United States&nbsp;<br>&nbsp;DE:  Germany&nbsp;<br>&nbsp;GB:  Great Britain&nbsp;<br>&nbsp;CH:  Switzerland&nbsp;<br>&nbsp;AU:  Australia&nbsp;<br>&nbsp;CA:  Canada&nbsp;<br>&nbsp;JP:  Japan&nbsp;<br>&nbsp;DK:  Denmark&nbsp;<br>&nbsp;NO:  Norway&nbsp;<br>&nbsp;SE:  Sweden&nbsp;<br>&nbsp;BR:  Brazil&nbsp;<br>&nbsp;PL:  Poland&nbsp;<br>&nbsp;KR:  South Korea&nbsp;<br>&nbsp;TW:  Taiwan&nbsp;<br>&nbsp;HK:  Hong Kong&nbsp;<br>&nbsp;CN:  China&nbsp;<br>&nbsp;</html>";)
                  (`year;`"<html>Maturity expressed in years.&nbsp;<br>&nbsp;May be a function of other arguments&nbsp;<br>&nbsp;</html>";)
                  (`lags;`"<html>&nbsp;The lag in periods (e.g. 0 for no lag,&nbsp;<br>&nbsp;1 to use bond yield from one period ago, etc.)&nbsp;</html>";)
                  (`avgp;`"<html>&nbsp;Use values greater than 1 to smooth bond yields&nbsp;<br>&nbsp;by averaging a number of historical periods&nbsp;</html>";)
                  (`mult;`"<html>&nbsp;The bond yield (after lagging and smoothing)&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;</html>";)
                  (`sprd;`"<html>&nbsp;This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the bond yield (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;</html>";)
                  (`round;`"<html>Rounding method for Maturity&nbsp;<br>&nbsp;Up, Down, and Nearest move to the relative simulation-frerquency point on the yield curve.&nbsp;<br>&nbsp;Interpolate does a linear interpolation based on the two nearest points.&nbsp;<br>&nbsp;</html>";))
                )
               (`cell
                .((`mrkt
                   .((`c;`combo;)
                     (`o
                      `Treasury `Pfandbriefe `AAA `AA `A `BBB `High_Yield
                      ))
                   )
                  (`econ
                   .((`c;`combo;)
                     (`o
                      `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                      ))
                   )
                  (`round
                   .((`c;`combo;)
                     (`o
                      `Up `Down `Nearest `Interpolate
                      ))
                   ))
                )
               (`editor
                .((`mrkt;1;)
                  (`econ;1;)
                  (`round;1;))
                )
               (`g
                .((`lags;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`avgp;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`year;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};))
                )
               (`u
                .((`lags;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`avgp;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`year;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};))
                ))
             )
            (`T;;)
            (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
            (`C;`External_Rate_Bond_Yield;)
            (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
            (`X;`UserValues_Arguments_Source_ExternalRate_FactorofBondYields.html;)
            (`V;{[p;x] r:()
            hist_ylds:.k.get_s (0;`A;`System;`Historical_Yields)
            if[#a:&{[h;p;e;y]p>-2+#h[e;y;`Period]}[hist_ylds]'[(-1+x.lags+x.avgp)*12%.G`pdy;x.econ;x.mrkt]
              r,:,(0;("There is inadequate historical yield data for economy &0 and market &1.  The necessary additional history is assumed to be the earliest available data.";$x.econ a;$x.mrkt a))]
            :[#r;r;_n]};)
            (`M
             ,`Bond_Yield
             )))
         (`FX
          .((`Period
             ,`"2011 +"
             .,(`T;{[nn;x;y]x,nn}[`future_period];))
            (`econ
             ,`USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[1=#e:?x a:&~x _lin c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$e);,,a)
    1<#e;(1;("Currencies &0 are not in the list of currencies to run for this simulation";,/" ",/:$:'e);,,a)]};))
            (`curr
             ,`USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[1=#e:?x a:&~x _lin c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$e);,,a)
    1<#e;(1;("Currencies &0 are not in the list of currencies to run for this simulation";,/" ",/:$:'e);,,a)]};))
            (`lags
             ,0
             .,(`V;{[p;x]:[#a:&~(x>-1)&1=4::'x;(1;"Must be non-negative integers";,,a)]};))
            (`avgp
             ,1
             .,(`V;{[p;x]:[#a:&~(x>0)&1=4::'x;(1;"Must be positive integers";,,a)]};))
            (`mult
             ,1.0
             .())
            (`sprd
             ,0.0
             .()))
          .((`j
             .((`l;`"Factor of Foreign Exchange Rate";)
               (`c;`table;)
               (`p
                .((`Period;`;)
                  (`lags;0;)
                  (`avgp;1;)
                  (`mult;1.0;)
                  (`sprd;0.0;)
                  (`econ;`USD;)
                  (`curr;`USD;))
                )
               (`f
                .((`lags;{9$_ x};)
                  (`avgp;{9$_ x};)
                  (`mult;9.6;)
                  (`sprd;9.6;))
                )
               (`e
                .,(`Period;0;)
                )
               (`bg
                .,(`Period;`e;)
                )
               (`b
                .,(`Period;`n;)
                )
               (`fixed;1;)
               (`popup
                .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                  (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                  (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                  (`Append_Years
                   .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                     (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                     (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                     (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                   )
                  (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                )
               (`cl
                .((`econ;`"Numerator\nCurrency";)
                  (`curr;`"Denominator\nCurrency";)
                  (`lags;`"Lag\n(in periods)";)
                  (`avgp;`"Number of\nPeriods to\nAverage";)
                  (`mult;`"Multiplicative\nFactor\non Rate";)
                  (`sprd;`"Additive Factor\nto Rate\n(Spread)";))
                )
               (`cltip
                .((`econ;`"<html>Home currency whose rate is used as the basis&nbsp;<br>&nbsp;for the external rate calculation&nbsp;<br>&nbsp;USD:  US Dollar&nbsp;<br>&nbsp;EUR:  Euro&nbsp;<br>&nbsp;GBP:  British Pound&nbsp;<br>&nbsp;CHF:  Swiss Franc&nbsp;<br>&nbsp;AUD:  Australian Dollar&nbsp;<br>&nbsp;CAD:  Canadian Dollar&nbsp;<br>&nbsp;JPY:  Japanese Yen&nbsp;<br>&nbsp;DKK:  Danish Krone&nbsp;<br>&nbsp;NOK:  Norwaegian Krone&nbsp;<br>&nbsp;SEK:  Swedish Krona&nbsp;<br>&nbsp;BRL:  Brazilian Real&nbsp;<br>&nbsp;PLN:  Polish Zloty&nbsp;<br>&nbsp;KRW:  South Korean Won&nbsp;<br>&nbsp;TWD:  Taiwan Dollar&nbsp;<br>&nbsp;HKD:  Hong Kong Dollar&nbsp;<br>&nbsp;CNY:  Chinese Yuan&nbsp;<br>&nbsp;</html>";)
                  (`curr;`"<html>Foreign currency whose exchange rate is used as the starting point&nbsp;<br>&nbsp;for the external rate calculation&nbsp;<br>&nbsp;USD:  US Dollar&nbsp;<br>&nbsp;EUR:  Euro&nbsp;<br>&nbsp;GBP:  British Pound&nbsp;<br>&nbsp;CHF:  Swiss Franc&nbsp;<br>&nbsp;AUD:  Australian Dollar&nbsp;<br>&nbsp;CAD:  Canadian Dollar&nbsp;<br>&nbsp;JPY:  Japanese Yen&nbsp;<br>&nbsp;DKK:  Danish Krone&nbsp;<br>&nbsp;NOK:  Norwaegian Krone&nbsp;<br>&nbsp;SEK:  Swedish Krona&nbsp;<br>&nbsp;BRL:  Brazilian Real&nbsp;<br>&nbsp;PLN:  Polish Zloty&nbsp;<br>&nbsp;KRW:  South Korean Won&nbsp;<br>&nbsp;TWD:  Taiwan Dollar&nbsp;<br>&nbsp;HKD:  Hong Kong Dollar&nbsp;<br>&nbsp;CNY:  Chinese Yuan&nbsp;<br>&nbsp;</html>";)
                  (`lags;`"<html>The lag in periods (e.g. 0 for no lag,&nbsp;<br>&nbsp;1 to use rate from one period ago, etc.)&nbsp;<br>&nbsp;</html>";)
                  (`avgp;`"<html>Use values greater than 1 to smooth rates&nbsp;<br>&nbsp;by averaging a number of historical periods&nbsp;<br>&nbsp;</html>";)
                  (`mult;`"<html>The rate (after lagging and smoothing)&nbsp&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;<br>&nbsp;</html>";)
                  (`sprd;`"<html>This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the rate (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;<br>&nbsp;</html>";))
                )
               (`cell
                .((`econ
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   )
                  (`curr
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   ))
                )
               (`editor
                .((`econ;1;)
                  (`curr;1;))
                )
               (`g
                .((`lags;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`avgp;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};))
                )
               (`u
                .((`lags;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`avgp;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                ))
             )
            (`T;;)
            (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
            (`C;`External_Rate_FX;)
            (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
            (`X;`UserValues_Arguments_Source_ExternalRate_FactorofForeignExchangeRate.html;)
            (`M
             ,`FX
             )))
         (`Inflation
          .((`Period
             ,`"2011 +"
             .,(`T;{[nn;x;y]x,nn}[`future_period];))
            (`econ
             ,`US
             .,(`V;{[p;x]
  :[1=#e:?x a:&~x _lin `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
         (1;("Economy &0 is not in the list of economies to run for this simulation";$e);,,a)
    1<#e;(1;("Economies &0 are not in the list of economies to run for this simulation";,/" ",/:$:'e);,,a)]};))
            (`mult
             ,1.0
             .())
            (`sprd
             ,0.0
             .()))
          .((`j
             .((`l;`"Factor of Inflation";)
               (`c;`table;)
               (`p
                .((`Period;`;)
                  (`mult;1.0;)
                  (`sprd;0.0;)
                  (`econ;`US;))
                )
               (`f
                .((`mult;9.6;)
                  (`sprd;9.6;))
                )
               (`e
                .,(`Period;0;)
                )
               (`bg
                .,(`Period;`e;)
                )
               (`b
                .,(`Period;`n;)
                )
               (`fixed;1;)
               (`popup
                .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                  (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                  (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                  (`Append_Years
                   .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                     (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                     (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                     (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                   )
                  (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
                )
               (`cl
                .((`econ;`Economy;)
                  (`mult;`"Multiplicative\nFactor\non Rate";)
                  (`sprd;`"Additive Factor\nto Rate\n(Spread)";))
                )
               (`cltip
                .((`econ;`"<html>&nbsp;Home economy whose inflation is used as the basis&nbsp;<br>&nbsp;for the external rate calculation&nbsp;</html>";)
                  (`mult;`"<html>&nbsp;The rate (after lagging and averaging)&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;</html>";)
                  (`sprd;`"<html>&nbsp;This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the rate (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;</html>";))
                )
               (`cell
                .,(`econ
                   .((`c;`combo;)
                     (`o
                      `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                      ))
                   )
                )
               (`editor
                .,(`econ;1;)
                )
               (`g
                .((`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};))
                )
               (`u
                .((`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                ))
             )
            (`T;;)
            (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
            (`C;`External_Rate_Inflation;)
            (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
            (`X;`UserValues_Arguments_Source_ExternalRate_FactorofInflation.html;)
            (`M
             ,`Inflation
             ))))
       .((`j
          .((`c;`panel;)
            (`a
             `m `Bond_Yield
             ))
          )
         (`X;`UserValues_Arguments_Source_ExternalRate.html;)))
      (`Treasury_Curve
       .((`Economy
          `US
          .,(`V;{[p;x]
  :[~x _in `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
    (1;("Economy &0 is not in the list of economies to run for this simulation";$x))]};))
         (`Maturity
          1.0
          .,(`V;{[p;x]:[x<0;(1;"Must be a non-negative number")]};))
         (`Item;`Continuous_Nominal_Yield;.())
         (`Period;`Current;.()))
       .,(`j
          .((`c;`Slot;)
            (`l;`"Treasury Curve";)
            (`cell
             .((`Economy
                .((`c;`combo;)
                  (`o
                   `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Continuous_Nominal_Yield `Annual_Nominal_Yield `Continuous_Real_Yield `Annual_Real_Yield `Nominal_Price `Real_Price
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          ))
      (`Market_Index
       .((`Index
          `Market_Index_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Market_Index;0#`];))
         (`Item;`Dividend_Yield;.())
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`l;`"Market Index";)
            (`cell
             .((`Index
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Market_Index_ `Market_Index_1
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Dividend_Yield `"Price/Level" `Modeled_Level `Modeled_Dividend_Yield `Variance `Volatility
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`p
             .((`Index;`Market_Index_1;)
               (`Item;`Dividend_Yield;)
               (`Period;`Current;)
               (`Economy;`US;))
             )
            (`u
             .,(`Index;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`V;{[p;x]
            r:()
            t:.k.get_s@0,`A`User`Investments`Existing_and_New_Issues`Market_Indices`Definitions,x.Index,`m
            if[`Unspecified_=x.Index
              r,:,(1;"A valid input must be specified:";,,`Index)
              t:`
              ] / if #bad:&`Unspecified_=x.Index
            if[(~t=`Modeled_Market_Index)&x.Item _lin`Modeled_Level`Modeled_Dividend_Yield
              r,:,(1;"\"Modeled Level\" and \"Modeled Dividend Yield\" are available only in Modeled Market Indices";,`Item`Index)
              ] / if #bad:&(~t=`Modeled_Market_Index)&x.Item _lin`Modeled_Level`Modeled_Dividend_Yield
            if[(~t=`Copy_of_Common_Stock_Index)&x.Item _lin`Variance`Volatility
              r,:,(1;"\"Variance\" and\"Volatility\" are available only in Copies of Common Stock Indices";,`Item`Index)
              ] / if #bad:&(~t=`Copy_of_Common_Stock_Index)&x.Item _lin`Variance`Volatility
            :[#r;r;_n]};)
         (`J
          .,(`Market_Index
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Index;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Index];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Index];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Index;,0#`];)
               (`F
                ,`Index
                ))
             )
          )
         (`U
          ,`Market_Index
          )))
      (`Common_Stock_Index
       .((`Economy
          `US
          .,(`V;{[p;x]
  :[~x _in `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
    (1;("Economy &0 is not in the list of economies to run for this simulation";$x))]};))
         (`Index;`Large_Cap;.())
         (`Item;`Price;.())
         (`Period;`Current;.()))
       .,(`j
          .((`c;`Slot;)
            (`l;`"Common Stock Index";)
            (`cell
             .((`Economy
                .((`c;`combo;)
                  (`o
                   `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                   ))
                )
               (`Index
                .((`c;`combo;)
                  (`o
                   `Large_Cap `Mid_Cap `Broad_Cap `Small_Cap `Other_Sector
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Price `Volatility `Dividend_Yield
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          ))
      (`Return_Class_Return
       .((`Class
          `Return_Class_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Return_Class;0#`];))
         (`Component;`Total;.())
         (`Frequency;`Simulation;.())
         (`Currency
          `USD
          .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cl
             .,(`Currency;`"Return\nCurrency";)
             )
            (`cell
             .((`Class
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Return_Class_ `Return_Class_1
                   ))
                )
               (`Component
                .((`c;`combo;)
                  (`o
                   `Total `Income `Price
                   ))
                )
               (`Frequency
                .((`c;`combo;)
                  (`o
                   `Simulation `Annualized `YY_Annual `Cumulative
                   ))
                )
               (`Currency
                .((`c;`combo;)
                  (`o
                   `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_ReturnClassReturn.html;)
         (`J
          .,(`Return_Class
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
               (`F
                ,`Class
                ))
             )
          )
         (`U
          ,`Return_Class
          )))
      (`Asset_Class_Return
       .((`Class
          `Asset_Class_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;0#`];))
         (`Component;`Total;.())
         (`Frequency;`Simulation;.())
         (`Currency
          `USD
          .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cl
             .((`Currency;`"Return\nCurrency";)
               (`Class;`"Asset Class";))
             )
            (`cell
             .((`Class
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                   ))
                )
               (`Component
                .((`c;`combo;)
                  (`o
                   `Total `Income `Price
                   ))
                )
               (`Frequency
                .((`c;`combo;)
                  (`o
                   `Simulation `Annualized `YY_Annual `Cumulative `Index
                   ))
                )
               (`Currency
                .((`c;`combo;)
                  (`o
                   `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_AssetClassReturn.html;)
         (`J
          .,(`Asset_Class
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
               (`F
                ,`Class
                ))
             )
          )
         (`U
          ,`Asset_Class
          )
         (`V;{[p;x]r:()
          if[(`Index~x`Frequency)&~(x`Component) _in`Price`Total
            r,:,(1;"Component must be Price or Total for Frequency=Index") ]
          if[(`Index~x`Frequency)&~(x`Currency)~acb:.k.get_s (0;`A;`User;`Investments;`Asset_Classes;x`Class;`Basis)
            r,:,(1;("Currency must be the Index basis of &0";$acb)) ]
          :[#r;r;_n]};)))
      (`Portfolio_Return
       .((`Class
          `Asset_Class_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;0#`];))
         (`Component;`Total;.())
         (`Frequency;`Simulation;.())
         (`Currency
          `USD
          .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
         (`Period;`Current;.())
         (`Return_Portfolio
          `All
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Portfolio;,`All];)))
       .((`j
          .((`c;`Slot;)
            (`cl
             .((`Currency;`"Return\nCurrency";)
               (`Return_Portfolio;`Portfolio;)
               (`Class;`"Asset Class";))
             )
            (`cell
             .((`Class
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                   ))
                )
               (`Component
                .((`c;`combo;)
                  (`o
                   `Total `Income `Price
                   ))
                )
               (`Frequency
                .((`c;`combo;)
                  (`o
                   `Simulation `Annualized `YY_Annual `Cumulative
                   ))
                )
               (`Currency
                .((`c;`combo;)
                  (`o
                   `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                )
               (`Return_Portfolio
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Portfolio_ `All `Portfolio_1
                   ))
                ))
             )
            (`editor;1;)
            (`a
             `Return_Portfolio `Class `Component `Frequency `Currency `Period
             )
            (`u
             .((`Return_Portfolio;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
               (`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_PortfolioReturn.html;)
         (`J
          .((`Asset_Class
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
               (`F
                ,`Class
                ))
             )
            (`Portfolio
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Return_Portfolio;,,`All];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Return_Portfolio];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Return_Portfolio];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Return_Portfolio;,,`All];)
               (`F
                ,`Return_Portfolio
                ))
             ))
          )
         (`U
          `Asset_Class `Portfolio
          )))
      (`Life_Insurance
       .((`Product_Group
          `Product_Group_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Product_Group;0#`];))
         (`Category;`Income_Statement;.())
         (`Type;`Benefits;.())
         (`Item;`Total;.())
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`l;`"Life Insurance";)
            (`cl
             .,(`Product_Group;`"Product\nGroup";)
             )
            (`cell
             .((`Product_Group
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Product_Group_ `Product_Group_1
                   ))
                )
               (`Category
                .((`c;`combo;)
                  (`o
                   `BaFin `Basis_Post `Basis_Pre `Benefit `Bonus_Post `Bonus_Pre `Cashflow `Change `Dividend `Expense `Income_Post `Income_Pre `Income_Statement `Participation `Reserve_Post `Reserve_Pre `Reserves `Reserves_Post `Scaled `Surplus_Post `Surplus_Pre `Tax `Volume
                   ))
                )
               (`Type
                .((`c;`combo;)
                  (`o
                   `Acquisition `Adjustment `Amount `Base `Basis `Benefits `Convexity_Fisher_Weil `Convexity_Modified `Declared `Direct `Dividend `Duration_Fisher_Weil `Duration_Modified `Dynamic_Interest `Economic `Expenses `Face_Amount `Final `Free `Gain `HGB `HGB_Life `IFRS `Income `Interest `Investment `Maintenance `Negative `Net_Present_Value `On_Deposit `Other `Other_Exp `Paid `Policyholder `Pre_Dividend `Pre_Trade `Premium `Premium_from_Equity `Required `Reversionary `Separate `Shareholder `Solvency_II `Tax `Terminal `Terminal_Prev_Decl `Total `US `US_GAAP `US_Statutory_Life `Underwriting `VTRUE
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Acquisition `Adjusted_Premium `Adjustments `Advanced_Premium `Allocated `Allocated_Dynamic `Allocated_Fixed `Amount `Annuity `Annuity_Allocated `Annuity_Allocated_Fixed `Annuity_Declaration `Annuity_Declaration_Difference `Annuity_Earned `Annuity_Extra_Fixed `Annuity_Maturing `Annuity_Non_Interest `Annuity_Premium `Annuity_Projected `Annuity_Required `Annuity_Total_Dynamic `Annuity_Total_Fixed `Annuity_Unallocated `Base `Basis `Benefit `Cash_Value `Commission `Committed `Credit `DAC_Asset `DAC_Balance `Death `Death_Benefits `Declaration `Declaration_Difference `Deposit `Dir_or_Ind_Dist `Direct `Disability_AH `Div_Accum `Dividend `Divs_on_Def_Annuities `Dynamic_Interest `Earned `Earned_Reduction `Excess_Interest `Expense `Experience_Rated_Refunds `Extra_Fixed `Factor `Fees_Charged `Free `Future `General_Deductions `Gross `Group_Life_Premium `Income `Increase `Inforce `Interest `Interest_Credited `Interest_Extra `Interest_NonExtra `Interest_on_Deposit `Investment `Lapse `Life `Maintenance `Maturing `Maturity `Miscellaneous `NAR `Negative `Net `Net_Amount_at_Risk `Non_Annuity_Allocated `Non_Annuity_Allocated_Fixed `Non_Annuity_Declaration `Non_Annuity_Declaration_Difference `Non_Annuity_Earned `Non_Annuity_Extra_Fixed `Non_Annuity_Maturing `Non_Annuity_Non_Interest `Non_Annuity_Projected `Non_Annuity_Required `Non_Annuity_Total_Dynamic `Non_Annuity_Total_Fixed `Non_Annuity_Unallocated `Non_Exit `Non_Interest `Non_Interest_Dynamic `Non_Premium `Non_Terminal `On_Deposit `Operations_Loss_Deduction `Other `Overhead `PH_Surplus `Payable `Payout `Policy `Policyholder_Divs_Paid `Positive `Premium `Premium_Adjustments `Premium_Mortality `Premium_Reserve `Projected `Rebates `Received `Req_Add_Reserve `Required `Required_Interest `Reserve `Reserve_Payout `Reserve_Str_Account `Reserve_Str_Bonus `Risk `SGA_Base `SGA_Benefit `Separate `Special_Reserve `Supplementary_Contracts `Surrender `Terminal `Tied `Total `Total_Dynamic `Total_Fixed `Transfer `Unallocated `Unallocated_Dynamic `Unallocated_Fixed `User_Data_1 `User_Data_2
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Product_Group;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_LifeInsurance.html;)
         (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Basis_Pre `Terminal `Annuity_Declaration
           `Basis_Pre `Terminal `Non_Annuity_Declaration
           `Basis_Pre `Terminal `Declaration
           `Basis_Pre `Terminal `SGA_Base
           `Basis_Pre `Terminal_Prev_Decl `SGA_Benefit
           `Basis_Pre `Terminal_Prev_Decl `Earned
           `Benefit `Total `Death
           `Benefit `Total `Surrender
           `Benefit `Total `Maturity
           `Benefit `Total `Annuity
           `Benefit `Total `Total
           `Benefit `Base `Death
           `Benefit `Base `Surrender
           `Benefit `Base `Maturity
           `Benefit `Base `Annuity
           `Benefit `Base `Total
           `Benefit `Dynamic_Interest `Death
           `Benefit `Dynamic_Interest `Surrender
           `Benefit `Dynamic_Interest `Maturity
           `Benefit `Dynamic_Interest `Annuity
           `Benefit `Dynamic_Interest `Total
           `Benefit `Terminal `Death
           `Benefit `Terminal `Surrender
           `Benefit `Terminal `Maturity
           `Benefit `Terminal `Annuity
           `Benefit `Terminal `Total
           `Benefit `Terminal `Transfer
           `Benefit `Interest `Total
           `Benefit `Declared `Total
           `Benefit `Adjustment `Reserve
           `Benefit `Adjustment `Terminal
           `Benefit `Adjustment `Non_Interest
           `Benefit `Adjustment `Total
           `Benefit `Declared `Direct
           `Benefit `Paid `Direct
           `Benefit `Declared `Dividend
           `Benefit `Declared `Terminal
           `Bonus_Pre `Total `Non_Interest
           `Bonus_Pre `Total `Non_Interest_Dynamic
           `Bonus_Pre `Total `Extra_Fixed
           `Bonus_Pre `Terminal `Non_Interest
           `Bonus_Pre `Terminal `Non_Interest_Dynamic
           `Bonus_Pre `Terminal `Extra_Fixed
           `Bonus_Pre `Dividend `Non_Interest
           `Bonus_Pre `Dividend `Non_Interest_Dynamic
           `Bonus_Pre `Dividend `Extra_Fixed
           `Bonus_Pre `Direct `Non_Interest
           `Bonus_Pre `Direct `Non_Interest_Dynamic
           `Bonus_Pre `Direct `Extra_Fixed
           `Bonus_Pre `Reversionary `Non_Interest
           `Bonus_Pre `Reversionary `Non_Interest_Dynamic
           `Bonus_Pre `Reversionary `Extra_Fixed
           `Bonus_Pre `Base `Non_Interest
           `Bonus_Pre `Base `Non_Interest_Dynamic
           `Bonus_Pre `Base `Extra_Fixed
           `Bonus_Pre `Terminal `Annuity_Non_Interest
           `Bonus_Pre `Terminal `Non_Annuity_Non_Interest
           `Bonus_Pre `Terminal `Annuity_Extra_Fixed
           `Bonus_Pre `Terminal `Non_Annuity_Extra_Fixed
           `Bonus_Pre `Total `Factor
           `Bonus_Pre `Total `Req_Add_Reserve
           `Bonus_Pre `Terminal `Annuity_Earned
           `Bonus_Pre `Terminal `Non_Annuity_Earned
           `Bonus_Pre `Terminal `Annuity_Maturing
           `Bonus_Pre `Terminal `Non_Annuity_Maturing
           `Bonus_Pre `Terminal `Annuity_Total_Dynamic
           `Bonus_Pre `Terminal `Non_Annuity_Total_Dynamic
           `Bonus_Pre `Terminal `Declaration
           `Bonus_Pre `Terminal `Earned
           `Bonus_Pre `Terminal `Total
           `Bonus_Pre `Terminal `Total_Fixed
           `Bonus_Pre `Terminal `Total_Dynamic
           `Bonus_Pre `Terminal `Gross
           `Bonus_Pre `Terminal `Maturing
           `Change `Base `Total
           `Change `Dynamic_Interest `Total
           `Change `On_Deposit `Total
           `Change `Other `Total
           `Change `Separate `Total
           `Change `Terminal `Total
           `Change `Premium `Total
           `Change `Income `Total
           `Change `Negative `Total
           `Expense `Acquisition `Total
           `Expense `Maintenance `Total
           `Expense `Other_Exp `Total
           `Expense `Total `Total
           `Income_Pre `Premium `Total
           `Income_Pre `Premium_from_Equity `Total
           `Income_Pre `Other `Total
           `Income_Pre `Underwriting `Total
           `Income_Pre `Premium `Rebates
           `Income_Pre `Premium `Received
           `Reserve_Pre `Base `Total
           `Reserve_Pre `Dynamic_Interest `Total
           `Reserve_Pre `Premium `Total
           `Reserve_Pre `Other `Total
           `Reserve_Pre `Separate `Total
           `Reserve_Pre `Dividend `Total
           `Reserve_Pre `Interest `Total
           `Reserve_Pre `Investment `Total
           `Reserve_Pre `Total `Total
           `Reserve_Pre `On_Deposit `Total
           `Reserve_Pre `Negative `Total
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Maturing
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Maturing
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Earned
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Earned
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Declaration
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Declaration
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Unallocated
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Unallocated
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Allocated
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Allocated
           `Reserve_Pre `Terminal_Prev_Decl `Allocated
           `Reserve_Pre `Terminal_Prev_Decl `Gross
           `Reserve_Pre `Terminal_Prev_Decl `Maturing
           `Reserve_Pre `Terminal_Prev_Decl `Unallocated
           `Reserve_Pre `Terminal_Prev_Decl `Declaration
           `Reserve_Pre `Terminal_Prev_Decl `Earned
           `Reserve_Pre `Terminal_Prev_Decl `Total
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Allocated_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Allocated_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Annuity_Total_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Total_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Total_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Total_Dynamic
           `Reserve_Pre `Terminal_Prev_Decl `Allocated_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Allocated_Dynamic
           `Reserve_Pre `Terminal_Prev_Decl `Unallocated_Fixed
           `Reserve_Pre `Terminal_Prev_Decl `Unallocated_Dynamic
           `Reserve_Pre `Terminal `Annuity_Declaration
           `Reserve_Pre `Terminal `Non_Annuity_Declaration
           `Reserve_Pre `Terminal `Annuity_Earned
           `Reserve_Pre `Terminal `Non_Annuity_Earned
           `Reserve_Pre `Terminal `Annuity_Required
           `Reserve_Pre `Terminal `Non_Annuity_Required
           `Reserve_Pre `Terminal `Annuity_Projected
           `Reserve_Pre `Terminal `Non_Annuity_Projected
           `Reserve_Pre `Terminal `Projected
           `Reserve_Pre `Terminal `Required
           `Reserve_Pre `Terminal `Gross
           `Reserve_Pre `Terminal `Declaration
           `Reserve_Pre `Terminal `Earned
           `Reserve_Pre `Terminal `Total
           `Reserve_Pre `Terminal `Maturing
           `Reserve_Pre `Terminal `Allocated
           `Reserve_Pre `Terminal `Unallocated
           `Reserve_Pre `Terminal `Annuity_Total_Fixed
           `Reserve_Pre `Terminal `Non_Annuity_Total_Fixed
           `Reserve_Pre `Terminal `Allocated_Fixed
           `Reserve_Pre `Terminal `Allocated_Dynamic
           `Reserve_Pre `Terminal `Unallocated_Fixed
           `Reserve_Pre `Terminal `Unallocated_Dynamic
           `Reserve_Pre `Terminal `Total_Fixed
           `Reserve_Pre `Terminal `Total_Dynamic
           `Reserve_Pre `Dividend `Future
           `Reserve_Pre `Interest `Terminal
           `Basis_Pre `Total `Reserve_Payout
           `Scaled `Base `User_Data_1
           `Scaled `Base `User_Data_2
           `Surplus_Pre `Basis `Benefit
           `Surplus_Pre `Basis `NAR
           `Surplus_Pre `Basis `Premium
           `Surplus_Pre `Basis `Reserve
           `Surplus_Pre `Required `Benefit
           `Surplus_Pre `Required `NAR
           `Surplus_Pre `Required `Premium
           `Surplus_Pre `Required `Reserve
           `Surplus_Pre `Required `Total
           `Volume `Face_Amount `Inforce
           `Income_Statement `Income `Premium
           `Income_Statement `Income `Other
           `Income_Statement `Benefits `Death
           `Income_Statement `Benefits `Surrender
           `Income_Statement `Benefits `Lapse
           `Income_Statement `Benefits `Maturity
           `Income_Statement `Benefits `Annuity
           `Income_Statement `Benefits `Disability_AH
           `Income_Statement `Benefits `Non_Exit
           `Income_Statement `Benefits `Adjustments
           `Income_Statement `Benefits `Total
           `Income_Statement `Expenses `Acquisition
           `Income_Statement `Expenses `Commission
           `Income_Statement `Expenses `Maintenance
           `Income_Statement `Expenses `Overhead
           `Income_Statement `Expenses `Other
           `Income_Statement `Expenses `Total
           `Reserves `HGB_Life `Base
           `Reserves `HGB_Life `Dynamic_Interest
           `Reserves `HGB_Life `Policy
           `Reserves `HGB_Life `Separate
           `Reserves `HGB_Life `Premium
           `Reserves `HGB_Life `Negative
           `Reserves `HGB_Life `On_Deposit
           `Reserves `HGB_Life `Other
           `Reserves `HGB_Life `Total
           `Reserves `HGB_Life `Terminal
           `Reserves `HGB_Life `Interest
           `Reserves `HGB_Life `Investment
           `Reserves `HGB_Life `Dividend
           `Reserves `HGB_Life `Non_Terminal
           `Reserves `HGB_Life `Non_Premium
           `Reserves `HGB_Life `Income
           `Reserves `US_GAAP `Premium
           `Reserves `US_GAAP `Benefit
           `Reserves `US_GAAP `Expense
           `Reserves `US_GAAP `Fees_Charged
           `Reserves `US_GAAP `Interest_Credited
           `Reserves `US_GAAP `DAC_Asset
           `Reserves `US_GAAP `Total
           `Reserves `IFRS `Premium
           `Reserves `IFRS `Benefit
           `Reserves `IFRS `Expense
           `Reserves `IFRS `Fees_Charged
           `Reserves `IFRS `Interest_Credited
           `Reserves `IFRS `DAC_Asset
           `Reserves `IFRS `Total
           `Reserves `Economic `Premium
           `Reserves `Economic `Benefit
           `Reserves `Economic `Expense
           `Reserves `Economic `Fees_Charged
           `Reserves `Economic `Interest_Credited
           `Reserves `Economic `Total
           `Reserves `Solvency_II `Premium
           `Reserves `Solvency_II `Benefit
           `Reserves `Solvency_II `Expense
           `Reserves `Solvency_II `Fees_Charged
           `Reserves `Solvency_II `Interest_Credited
           `Reserves `Solvency_II `Total
           `Reserves `US_Statutory_Life `Premium
           `Reserves `US_Statutory_Life `Life
           `Reserves `US_Statutory_Life `Disability_AH
           `Reserves `US_Statutory_Life `Deposit
           `Reserves `US_Statutory_Life `Expense
           `Reserves `US_Statutory_Life `Total
           `BaFin `Amount `Reserve
           `BaFin `Amount `Net_Amount_at_Risk
           `BaFin `Amount `Premium
           `BaFin `Amount `Benefit
           `BaFin `Amount `Total
           `BaFin `Basis `Reserve
           `BaFin `Basis `Net_Amount_at_Risk
           `BaFin `Basis `Premium
           `BaFin `Basis `Benefit
           `Cashflow `Net_Present_Value `Premium
           `Cashflow `Net_Present_Value `Expense
           `Cashflow `Net_Present_Value `Benefit
           `Cashflow `Net_Present_Value `Other
           `Cashflow `Net_Present_Value `Positive
           `Cashflow `Net_Present_Value `Negative
           `Cashflow `Net_Present_Value `Net
           `Cashflow `Total `Premium
           `Cashflow `Total `Expense
           `Cashflow `Total `Benefit
           `Cashflow `Total `Other
           `Cashflow `Total `Positive
           `Cashflow `Total `Negative
           `Cashflow `Total `Net
           `Participation `Gain `Basis
           `Participation `Gain `Expense
           `Participation `Gain `Interest
           `Participation `Gain `Miscellaneous
           `Participation `Gain `Risk
           `Participation `Dividend `Premium
           `Participation `Pre_Trade `Committed
           `Participation `Pre_Trade `Payable
           `Tax `US `Reserve
           `Tax `US `Premium_Reserve
           `Tax `US `Supplementary_Contracts
           `Tax `US `Div_Accum
           `Tax `US `Special_Reserve
           `Tax `US `Advanced_Premium
           `Tax `US `Required_Interest
           `Tax `US `Excess_Interest
           `Tax `US `Divs_on_Def_Annuities
           `Tax `US `Interest_on_Deposit
           `Tax `US `Policyholder_Divs_Paid
           `Tax `US `Premium_Adjustments
           `Tax `US `Experience_Rated_Refunds
           `Tax `US `Premium_Mortality
           `Tax `US `Annuity_Premium
           `Tax `US `Group_Life_Premium
           `Tax `US `General_Deductions
           `Tax `US `Operations_Loss_Deduction
           `Tax `US `Death_Benefits
           `Tax `US `Dir_or_Ind_Dist
           `Tax `US `DAC_Balance
           `Tax `US `Cash_Value
           `Tax `US `PH_Surplus
           `Tax `HGB `Reserve
           `Tax `HGB `Premium_Reserve
           `Tax `HGB `Supplementary_Contracts
           `Tax `HGB `Div_Accum
           `Tax `HGB `Special_Reserve
           `Tax `HGB `Advanced_Premium
           `Tax `HGB `Required_Interest
           `Tax `HGB `Excess_Interest
           `Tax `HGB `Divs_on_Def_Annuities
           `Tax `HGB `Interest_on_Deposit
           `Tax `HGB `Policyholder_Divs_Paid
           `Tax `HGB `Premium_Adjustments
           `Tax `HGB `Experience_Rated_Refunds
           `Tax `HGB `Premium_Mortality
           `Tax `HGB `Annuity_Premium
           `Tax `HGB `Group_Life_Premium
           `Tax `HGB `General_Deductions
           `Tax `HGB `Operations_Loss_Deduction
           `Tax `HGB `Death_Benefits
           `Tax `HGB `Dir_or_Ind_Dist
           `Tax `HGB `DAC_Balance
           `Tax `HGB `Cash_Value
           `Tax `HGB `PH_Surplus
           `Cashflow `Duration_Modified `Premium
           `Cashflow `Duration_Modified `Expense
           `Cashflow `Duration_Modified `Benefit
           `Cashflow `Duration_Modified `Other
           `Cashflow `Duration_Modified `Positive
           `Cashflow `Duration_Modified `Negative
           `Cashflow `Duration_Modified `Net
           `Cashflow `Convexity_Modified `Premium
           `Cashflow `Convexity_Modified `Expense
           `Cashflow `Convexity_Modified `Benefit
           `Cashflow `Convexity_Modified `Other
           `Cashflow `Convexity_Modified `Positive
           `Cashflow `Convexity_Modified `Negative
           `Cashflow `Convexity_Modified `Net
           `Cashflow `Duration_Fisher_Weil `Premium
           `Cashflow `Duration_Fisher_Weil `Expense
           `Cashflow `Duration_Fisher_Weil `Benefit
           `Cashflow `Duration_Fisher_Weil `Other
           `Cashflow `Duration_Fisher_Weil `Positive
           `Cashflow `Duration_Fisher_Weil `Negative
           `Cashflow `Duration_Fisher_Weil `Net
           `Cashflow `Convexity_Fisher_Weil `Premium
           `Cashflow `Convexity_Fisher_Weil `Expense
           `Cashflow `Convexity_Fisher_Weil `Benefit
           `Cashflow `Convexity_Fisher_Weil `Other
           `Cashflow `Convexity_Fisher_Weil `Positive
           `Cashflow `Convexity_Fisher_Weil `Negative
           `Cashflow `Convexity_Fisher_Weil `Net
           `Basis_Post `Terminal `Earned
           `Basis_Post `Terminal `SGA_Benefit
           `Basis_Post `Terminal `Increase
           `Bonus_Post `Total `Non_Interest
           `Bonus_Post `Total `Interest
           `Bonus_Post `Total `Total
           `Bonus_Post `Total `Payout
           `Bonus_Post `Terminal `Non_Interest
           `Bonus_Post `Terminal `Interest
           `Bonus_Post `Terminal `Total
           `Bonus_Post `Terminal `Payout
           `Bonus_Post `Dividend `Non_Interest
           `Bonus_Post `Dividend `Interest
           `Bonus_Post `Dividend `Total
           `Bonus_Post `Dividend `Payout
           `Bonus_Post `Direct `Non_Interest
           `Bonus_Post `Direct `Interest
           `Bonus_Post `Direct `Total
           `Bonus_Post `Direct `Payout
           `Bonus_Post `Reversionary `Non_Interest
           `Bonus_Post `Reversionary `Interest
           `Bonus_Post `Reversionary `Total
           `Bonus_Post `Reversionary `Payout
           `Bonus_Post `Base `Non_Interest
           `Bonus_Post `Base `Interest
           `Bonus_Post `Base `Total
           `Bonus_Post `Base `Payout
           `Bonus_Post `Dividend `Interest_Extra
           `Bonus_Post `Dividend `Interest_NonExtra
           `Bonus_Post `Dividend `Reserve_Str_Bonus
           `Bonus_Post `Direct `Interest_Extra
           `Bonus_Post `Direct `Interest_NonExtra
           `Bonus_Post `Direct `Reserve_Str_Bonus
           `Bonus_Post `Total `Amount
           `Bonus_Post `Dividend `Amount
           `Bonus_Post `Reversionary `Amount
           `Bonus_Post `Direct `Amount
           `Bonus_Post `Free `Amount
           `Bonus_Post `Total `Reserve_Str_Account
           `Bonus_Post `Total `Reserve_Str_Bonus
           `Bonus_Post `Terminal `Annuity_Declaration
           `Bonus_Post `Terminal `Non_Annuity_Declaration
           `Bonus_Post `Terminal `Annuity_Earned
           `Bonus_Post `Terminal `Non_Annuity_Earned
           `Bonus_Post `Terminal `Annuity_Declaration_Difference
           `Bonus_Post `Terminal `Non_Annuity_Declaration_Difference
           `Bonus_Post `Terminal `Earned
           `Bonus_Post `Terminal `Declaration
           `Bonus_Post `Terminal `Declaration_Difference
           `Bonus_Post `Terminal `Earned_Reduction
           `Bonus_Post `Terminal `Total_Fixed
           `Bonus_Post `Terminal `Total_Dynamic
           `Dividend `Policyholder `Required
           `Dividend `Policyholder `Total
           `Income_Post `VTRUE `Total
           `Income_Post `Investment `Total
           `Income_Post `Pre_Dividend `Total
           `Income_Post `Shareholder `Total
           `Income_Post `Tax `Total
           `Income_Post `Premium_from_Equity `Total
           `Income_Post `VTRUE `Basis
           `Reserve_Post `Terminal `Earned
           `Reserve_Post `Terminal `Declaration
           `Reserve_Post `Terminal `Total
           `Reserve_Post `Terminal `Allocated
           `Reserve_Post `Terminal `Gross
           `Reserve_Post `Terminal `Maturing
           `Reserve_Post `Terminal `Unallocated
           `Reserve_Post `Terminal `Total_Fixed
           `Reserve_Post `Terminal `Total_Dynamic
           `Reserve_Post `Terminal `Allocated_Fixed
           `Reserve_Post `Terminal `Allocated_Dynamic
           `Reserve_Post `Terminal `Unallocated_Fixed
           `Reserve_Post `Terminal `Unallocated_Dynamic
           `Surplus_Post `Shareholder `Total
           `Surplus_Post `Policyholder `Tied
           `Surplus_Post `Policyholder `Free
           `Surplus_Post `Policyholder `Total
           `Surplus_Post `Policyholder `Terminal
           `Reserves_Post `Economic `Total
           `Reserves_Post `Economic `Benefit
           `Reserves_Post `Economic `Expense
           `Reserves_Post `Economic `Premium
           `Reserves_Post `Economic `Other
           `Reserves_Post `US_GAAP `Total
           `Reserves_Post `US_GAAP `Benefit
           `Reserves_Post `US_GAAP `Expense
           `Reserves_Post `US_GAAP `Premium
           `Reserves_Post `US_GAAP `Other
           `Reserves_Post `IFRS `Total
           `Reserves_Post `IFRS `Benefit
           `Reserves_Post `IFRS `Expense
           `Reserves_Post `IFRS `Premium
           `Reserves_Post `IFRS `Other
           `Reserves_Post `Solvency_II `Total
           `Reserves_Post `Solvency_II `Benefit
           `Reserves_Post `Solvency_II `Expense
           `Reserves_Post `Solvency_II `Premium
           `Reserves_Post `Solvency_II `Other
           `Participation `Dividend `Credit
           `Participation `Dividend `Adjusted_Premium
           `Participation `Final `Committed
           `Participation `Final `Payable);`Category `Type `Item];)
         (`J
          .,(`Product_Group
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Product_Group;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Product_Group];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Product_Group];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Product_Group;,0#`];)
               (`F
                ,`Product_Group
                ))
             )
          )
         (`U
          ,`Product_Group
          )
         (`XX
          `Annuity_Declaration `Non_Annuity_Declaration `Declaration `SGA_Base `SGA_Benefit `Earned `Death `Surrender `Maturity `Annuity `Total `Transfer `Reserve `Terminal `Non_Interest `Direct `Dividend `Non_Interest_Dynamic `Extra_Fixed `Annuity_Non_Interest `Non_Annuity_Non_Interest `Annuity_Extra_Fixed `Non_Annuity_Extra_Fixed `Factor `Req_Add_Reserve `Annuity_Earned `Non_Annuity_Earned `Annuity_Maturing `Non_Annuity_Maturing `Annuity_Total_Dynamic `Non_Annuity_Total_Dynamic `Total_Fixed `Total_Dynamic `Gross `Maturing `Rebates `Received `Annuity_Unallocated `Non_Annuity_Unallocated `Annuity_Allocated `Non_Annuity_Allocated `Allocated `Unallocated `Annuity_Allocated_Fixed `Non_Annuity_Allocated_Fixed `Annuity_Total_Fixed `Non_Annuity_Total_Fixed `Allocated_Fixed `Allocated_Dynamic `Unallocated_Fixed `Unallocated_Dynamic `Annuity_Required `Non_Annuity_Required `Annuity_Projected `Non_Annuity_Projected `Projected `Required `Future `Reserve_Payout `User_Data_1 `User_Data_2 `Benefit `NAR `Premium `Inforce `Other `Lapse `Disability_AH `Non_Exit `Adjustments `Acquisition `Commission `Maintenance `Overhead `Base `Dynamic_Interest `Policy `Separate `Negative `On_Deposit `Interest `Investment `Non_Terminal `Non_Premium `Income `Expense `Fees_Charged `Interest_Credited `DAC_Asset `Life `Deposit `Net_Amount_at_Risk `Positive `Net `Basis `Miscellaneous `Risk `Committed `Payable `Premium_Reserve `Supplementary_Contracts `Div_Accum `Special_Reserve `Advanced_Premium `Required_Interest `Excess_Interest `Divs_on_Def_Annuities `Interest_on_Deposit `Policyholder_Divs_Paid `Premium_Adjustments `Experience_Rated_Refunds `Premium_Mortality `Annuity_Premium `Group_Life_Premium `General_Deductions `Operations_Loss_Deduction `Death_Benefits `Dir_or_Ind_Dist `DAC_Balance `Cash_Value `PH_Surplus `Increase `Payout `Interest_Extra `Interest_NonExtra `Reserve_Str_Bonus `Amount `Reserve_Str_Account `Annuity_Declaration_Difference `Non_Annuity_Declaration_Difference `Declaration_Difference `Earned_Reduction `Tied `Free `Credit `Adjusted_Premium
          )))
      (`Property_Casualty
       .((`Product
          `Product_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Product;,`Any_Product_];))
         (`Basis
          `Net
          .,(`V;{[p;x]:[(x _in`Ceded`Net)&~`Reinsurance _in .G.submodules; :,(1;"Cannot choose Ceded or Net basis without running Reinsurance module")]};))
         (`Item
          `Underwriting_Result
          .,(`V;{[modon;p;x] :[x _in modon@{x@&~x _lin y}[!modon;.G.submodules]; (1;"Item is disabled in module selection button")]}[.((`Underwriting_Expenses;`UWE;)
               (`Commissions_and_Brokerage;`CBE;)
               (`Taxes_Licenses_and_Fees;`TLF;)
               (`Contingent_Commissions;`Contingent_Commission;)
               (`Management_Fees;`MGT;)
               (`Policyholder_Dividends;`PHD;)
               (`Allocated;`ALAE;)
               (`Unallocated;`ULAE;)
               (`Salvage_and_Subrogation;`SS;))];))
         (`Transaction
          `Cashflow
          .,(`V;{[p;x]:[(`Unpaid~x)&~`Reserves _in .G.submodules; (1;"Reserves disabled in module selection button")]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cl
             .,(`Product;`Product;)
             )
            (`cell
             .((`Product
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Product_ `Any_Product_ `Product_1
                   ))
                )
               (`Basis
                .((`c;`combo;)
                  (`o
                   `Ceded `Gross `Net
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `ALAE `Acquisition_Costs `CBE `Contingent_Commission `Exposure `Float `Loss `Loss_ALAE_Net_SS `Loss_Catastrophe `Loss_LAE_Net_SS `Loss_Non_Catastrophe `MGT `PHD `Premium `SS `TLF `ULAE `UWE `Underwriting_Result
                   ))
                )
               (`Transaction
                .((`c;`combo;)
                  (`o
                   `Accrued `Balance `Cashflow `Drafts_Outstanding `Earned `Incurred `Paid `Payable `Receivable `Received `True_Ultimate `Unearned `Unpaid `Written
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Product;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_PCInsurance.html;)
         (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Gross `Premium `Written
           `Gross `Premium `Earned
           `Gross `Premium `True_Ultimate
           `Gross `Premium `Received
           `Gross `Premium `Cashflow
           `Gross `Premium `Unearned
           `Gross `Premium `Receivable
           `Ceded `Premium `Written
           `Ceded `Premium `Earned
           `Ceded `Premium `True_Ultimate
           `Ceded `Premium `Received
           `Ceded `Premium `Cashflow
           `Ceded `Premium `Unearned
           `Ceded `Premium `Receivable
           `Net `Premium `Written
           `Net `Premium `Earned
           `Net `Premium `True_Ultimate
           `Net `Premium `Received
           `Net `Premium `Cashflow
           `Net `Premium `Unearned
           `Net `Premium `Receivable
           `Gross `Exposure `Written
           `Gross `Exposure `Earned
           `Gross `Loss `True_Ultimate
           `Gross `Loss `Paid
           `Gross `Loss `Unpaid
           `Gross `ALAE `True_Ultimate
           `Gross `ALAE `Paid
           `Gross `ALAE `Unpaid
           `Gross `Loss_LAE_Net_SS `True_Ultimate
           `Gross `Loss_LAE_Net_SS `Paid
           `Gross `Loss_LAE_Net_SS `Unpaid
           `Ceded `Loss `True_Ultimate
           `Ceded `Loss `Paid
           `Ceded `Loss `Unpaid
           `Ceded `ALAE `True_Ultimate
           `Ceded `ALAE `Paid
           `Ceded `ALAE `Unpaid
           `Ceded `Loss_LAE_Net_SS `True_Ultimate
           `Ceded `Loss_LAE_Net_SS `Paid
           `Ceded `Loss_LAE_Net_SS `Unpaid
           `Net `Loss `True_Ultimate
           `Net `Loss `Paid
           `Net `Loss `Unpaid
           `Net `ALAE `True_Ultimate
           `Net `ALAE `Paid
           `Net `ALAE `Unpaid
           `Net `Loss_LAE_Net_SS `True_Ultimate
           `Net `Loss_LAE_Net_SS `Paid
           `Net `Loss_LAE_Net_SS `Unpaid
           `Gross `ULAE `True_Ultimate
           `Gross `ULAE `Paid
           `Gross `ULAE `Unpaid
           `Gross `UWE `Written
           `Gross `UWE `Earned
           `Gross `UWE `True_Ultimate
           `Gross `UWE `Payable
           `Gross `TLF `Written
           `Gross `TLF `Earned
           `Gross `TLF `True_Ultimate
           `Gross `TLF `Payable
           `Gross `MGT `Written
           `Gross `MGT `Earned
           `Gross `MGT `True_Ultimate
           `Gross `MGT `Payable
           `Gross `CBE `Written
           `Gross `CBE `Earned
           `Gross `CBE `True_Ultimate
           `Gross `CBE `Payable
           `Gross `PHD `Written
           `Gross `PHD `Earned
           `Gross `PHD `True_Ultimate
           `Gross `PHD `Payable
           `Ceded `UWE `Written
           `Ceded `UWE `Earned
           `Ceded `UWE `True_Ultimate
           `Ceded `UWE `Payable
           `Ceded `TLF `Written
           `Ceded `TLF `Earned
           `Ceded `TLF `True_Ultimate
           `Ceded `TLF `Payable
           `Ceded `MGT `Written
           `Ceded `MGT `Earned
           `Ceded `MGT `True_Ultimate
           `Ceded `MGT `Payable
           `Ceded `CBE `Written
           `Ceded `CBE `Earned
           `Ceded `CBE `True_Ultimate
           `Ceded `CBE `Payable
           `Ceded `PHD `Written
           `Ceded `PHD `Earned
           `Ceded `PHD `True_Ultimate
           `Ceded `PHD `Payable
           `Net `UWE `Written
           `Net `UWE `Earned
           `Net `UWE `True_Ultimate
           `Net `UWE `Payable
           `Net `TLF `Written
           `Net `TLF `Earned
           `Net `TLF `True_Ultimate
           `Net `TLF `Payable
           `Net `MGT `Written
           `Net `MGT `Earned
           `Net `MGT `True_Ultimate
           `Net `MGT `Payable
           `Net `CBE `Written
           `Net `CBE `Earned
           `Net `CBE `True_Ultimate
           `Net `CBE `Payable
           `Net `PHD `Written
           `Net `PHD `Earned
           `Net `PHD `True_Ultimate
           `Net `PHD `Payable
           `Gross `UWE `Paid
           `Gross `TLF `Paid
           `Gross `MGT `Paid
           `Gross `CBE `Paid
           `Gross `PHD `Paid
           `Gross `Acquisition_Costs `Paid
           `Gross `Float `Balance
           `Ceded `Float `Balance
           `Net `Float `Balance
           `Gross `Underwriting_Result `True_Ultimate
           `Gross `Loss `True_Ultimate
           `Gross `ALAE `True_Ultimate
           `Gross `SS `True_Ultimate
           `Gross `Loss_Catastrophe `True_Ultimate
           `Gross `Loss_ALAE_Net_SS `True_Ultimate
           `Gross `Loss_Non_Catastrophe `True_Ultimate
           `Ceded `Underwriting_Result `True_Ultimate
           `Ceded `Loss `True_Ultimate
           `Ceded `ALAE `True_Ultimate
           `Ceded `SS `True_Ultimate
           `Ceded `Loss_Catastrophe `True_Ultimate
           `Ceded `Loss_ALAE_Net_SS `True_Ultimate
           `Ceded `Loss_Non_Catastrophe `True_Ultimate
           `Net `Underwriting_Result `True_Ultimate
           `Net `Loss `True_Ultimate
           `Net `ALAE `True_Ultimate
           `Net `SS `True_Ultimate
           `Net `Loss_Catastrophe `True_Ultimate
           `Net `Loss_ALAE_Net_SS `True_Ultimate
           `Net `Loss_Non_Catastrophe `True_Ultimate
           `Gross `Acquisition_Costs `True_Ultimate
           `Ceded `Acquisition_Costs `True_Ultimate
           `Gross `Loss `Drafts_Outstanding
           `Gross `ALAE `Drafts_Outstanding
           `Gross `Contingent_Commission `True_Ultimate
           `Gross `Contingent_Commission `Cashflow
           `Gross `Contingent_Commission `Payable
           `Gross `Contingent_Commission `Accrued
           `Gross `Contingent_Commission `Incurred
           `Gross `Underwriting_Result `True_Ultimate
           `Ceded `Underwriting_Result `True_Ultimate
           `Net `Underwriting_Result `True_Ultimate);`Basis `Item `Transaction];)
         (`J
          .,(`Product
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Product;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Product];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Product];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Product;,0#`];)
               (`F
                ,`Product
                ))
             )
          )
         (`U
          ,`Product
          )
         (`XX
          `Written `Earned `True_Ultimate `Received `Cashflow `Unearned `Receivable `Paid `Unpaid `Payable `Balance `Drafts_Outstanding `Accrued `Incurred
          )))
      (`PC_Reinsurance
       .((`Treaty
          `Treaty_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Treaty;,`Any_Treaty_];))
         (`Item
          `Loss
          .,(`V;{[modon;p;x] :[x _in modon@{x@&~x _lin y}[!modon;.G.submodules]; (1;"Item is disabled in module selection button")]}[.((`Commissions_and_Brokerage;`CBE;)
               (`Allocated;`ALAE;))];))
         (`Transaction
          `True_Ultimate
          .,(`V;{[p;x]:[(`Unpaid~x)&~`Reserves _in .G.submodules; (1;"Reserves disabled in module selection button")]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`l;`"P&C Reinsurance";)
            (`cell
             .((`Treaty
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Treaty_ `Any_Treaty_ `Treaty_1
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `ALAE `Acquisition_Costs `Loss `Loss_ALAE_Net_SS `Premium
                   ))
                )
               (`Transaction
                .((`c;`combo;)
                  (`o
                   `Cashflow `Earned `Paid `Payable `Receivable `Received `True_Ultimate `Unearned `Unpaid `Written
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Treaty;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_PCReinsurance.html;)
         (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Premium `Written
           `Premium `Earned
           `Premium `True_Ultimate
           `Premium `Received
           `Premium `Cashflow
           `Premium `Unearned
           `Premium `Receivable
           `Acquisition_Costs `Written
           `Acquisition_Costs `Earned
           `Acquisition_Costs `True_Ultimate
           `Acquisition_Costs `Paid
           `Acquisition_Costs `Cashflow
           `Acquisition_Costs `Unearned
           `Acquisition_Costs `Payable
           `Loss `True_Ultimate
           `Loss `Paid
           `Loss `Unpaid
           `ALAE `True_Ultimate
           `ALAE `Paid
           `ALAE `Unpaid
           `Loss_ALAE_Net_SS `True_Ultimate
           `Loss_ALAE_Net_SS `Paid
           `Loss_ALAE_Net_SS `Unpaid);`Item `Transaction];)
         (`J
          .,(`Treaty
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Treaty;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Treaty];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Treaty];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Treaty;,0#`];)
               (`F
                ,`Treaty
                ))
             )
          )
         (`U
          ,`Treaty
          )
         (`XX
          `Written `Earned `True_Ultimate `Received `Cashflow `Unearned `Receivable `Paid `Payable `Unpaid
          )))
      (`Financing
       .((`Instrument
          `Financing_Instrument_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Financing_Instrument;0#`];))
         (`Category;`Share_Balances;.())
         (`Timing;`Final;.())
         (`Item;`Outstanding;.())
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`rl
             .,(`Instrument;`"Financing Instrument";)
             )
            (`cell
             .((`Instrument
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Financing_Instrument_ `Financing_Instrument_1
                   ))
                )
               (`Category
                .((`c;`combo;)
                  (`o
                   `Money_Balances `Share_Balances `Transactions
                   ))
                )
               (`Timing
                .((`c;`combo;)
                  (`o
                   `Pre_Trade `Final
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Additional_Paid_In `Committed `Credit `Credit_Adjustment `Dividend `Dividend_Adjustment `Dividend_Adjustment_Paid `Dividends_Declared `Dividends_Deferred `Dividends_Paid `Dividends_Unpaid `Extra_Decrease `Extra_Increase `Interest_Backlog `Interest_Deferred `Interest_Due `Interest_Paid `Interest_Unpaid `Issued `Market_Value `Outstanding `Par_Value `Payable `Principal `Principal_Paid `Repurchased `Retired `Uncommitted
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Instrument;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_Financing.html;)
         (`V;{[p;x] f:.k.get_s (0;`A;`User;`Financing)
             if[`Unspecified_~x`Instrument; :_n]
             r:.L.V.user_value_list[.C`Financing_List;`Instrument`Category`Timing`Item;p;@[x;`Instrument;:;f[x`Instrument;`m]]]
             :[#r;r;_n]};)
         (`J
          .,(`Financing_Instrument
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Instrument;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Instrument];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Instrument];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Instrument;,0#`];)
               (`F
                ,`Instrument
                ))
             )
          )
         (`U
          ,`Financing_Instrument
          )
         (`XX
          `Dividend `Credit `Outstanding `Committed `Uncommitted `Payable `Dividends_Declared `Dividends_Paid `Interest_Due `Interest_Backlog `Interest_Paid `Principal_Paid `Par_Value `Market_Value `Principal `Additional_Paid_In `Dividends_Unpaid `Dividend_Adjustment `Credit_Adjustment `Extra_Increase `Extra_Decrease `Dividend_Adjustment_Paid `Dividends_Deferred `Retired `Issued `Repurchased `Interest_Deferred `Interest_Unpaid
          )))
      (`Investments
       .((`Module
          `Investments
          .,(`V;{[label;p;x]
  g:`None,.G`submodules
  if[label~"Module"
    if[`HGB_Life _in g; g,:`HGB]
    if[`US_Statutory_Life _in g; g,:`US_Statutory]
    ]
 :[~x _in g;(1;("&0 is not an active &1";$x;label))]}["Module"];))
         (`Portfolio
          `All
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Portfolio;,`All];))
         (`Asset_Class
          `Asset_Class_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;,`HGB_Funds];))
         (`Timing;`Final;.())
         (`Item;`Quantity;.())
         (`Currency
          `Reporting
          .,(`V;{[p;x]:[x~`Original;(0;"Currency of Original may not be available in future releases of the software.");_n]};))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cell
             .((`Portfolio
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Portfolio_ `All `Portfolio_1
                   ))
                )
               (`Module
                .((`c;`combo;)
                  (`o
                   `Investments `Economic `Solvency_II `US_GAAP `IFRS `US_Statutory `HGB
                   ))
                )
               (`Asset_Class
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Accrued_Expenses `Accrued_Expenses_Paid `Accrued_Expenses_Received `Accrued_Income `Accrued_Income_FX_Effect `Accrued_Income_Paid `Accrued_Income_Received `Accrued_Interest `Accrued_Interest_Paid `Accrued_Interest_Received `Amount_Invested `Appreciation `Balance_Sheet_Value `Balance_Sheet_Value_AFS `Balance_Sheet_Value_AV `Balance_Sheet_Value_HTM `Balance_Sheet_Value_LAR `Balance_Sheet_Value_Trading `BzW `Change_in_Accrued_Expenses `Change_in_Accrued_Income `Change_in_Income_Basis `Change_in_Unrealized_Gain `Consideration_Paid `Consideration_Received `Constant_Yield_Adjustment `Constant_Yield_Amortized_Cost `Cost_Value `Depreciation `Derivatives_Cash_Flow `Dividends_Declared `Dividends_Receivable `Dividends_Received `Expenses_Paid `Fluctuation_Reserve `HGB_Cost_AV `HGB_Cost_UV `Hidden_Reserves `Hidden_Reserves_AV `Hidden_Reserves_Negative `Hidden_Reserves_Positive `IRR `Income_Basis `Income_Basis_FX_Effect `Income_Basis_of_Purchases `Income_Basis_of_Trades `Income_FX_Effect `Income_Received `Interest_Received `Market_Value `Market_Value_QIS5_Shock_Down `Market_Value_QIS5_Shock_Up `Market_Value_Times_Convexity_Fisher_Weil `Market_Value_Times_Convexity_Modified `Market_Value_Times_Duration_Fisher_Weil `Market_Value_Times_Duration_Modified `Market_Value_Times_Maturity `Market_Value_for_Fisher_Weil `Market_Value_of_Maturing `Net_Income_Earned `Net_Ordinary_Income_Gain `Notional_Amount `Price_Paid `Price_Received `Principal_Received `Property_Expenses_Paid `Quantity `Quantity_AV `Quantity_UV `Realized_Gain `Realized_Gain_AVR `Realized_Gain_IMR `Realized_Gain_Negative `Realized_Gain_Positive `Reclassification_Gain `Rent_Received `Return_of_Market_Value `Risk_Adjusted_IRR `Sell_Realized_Gain `Total_Gain `Unrealized_Gain `Unrealized_Gain_FX `Unrealized_Gain_FX_Effect `Unrealized_Gain_Negative `Unrealized_Gain_Positive `Unrealized_Gain_nonFX
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                )
               (`Timing
                .((`c;`combo;)
                  (`o
                   `Pre_Trade `Final
                   ))
                )
               (`Currency
                .((`c;`combo;)
                  (`o
                   `Original `Reporting
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .((`Portfolio;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
               (`Asset_Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_Investments.html;)
         (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Investments `Pre_Trade `Quantity
           `Investments `Pre_Trade `Notional_Amount
           `Investments `Pre_Trade `Cost_Value
           `Investments `Pre_Trade `Constant_Yield_Amortized_Cost
           `Investments `Pre_Trade `Market_Value
           `Investments `Pre_Trade `Market_Value_QIS5_Shock_Up
           `Investments `Pre_Trade `Market_Value_QIS5_Shock_Down
           `Investments `Pre_Trade `Constant_Yield_Adjustment
           `Investments `Pre_Trade `Accrued_Interest
           `Investments `Pre_Trade `Interest_Received
           `Investments `Pre_Trade `Return_of_Market_Value
           `Investments `Pre_Trade `Market_Value_for_Fisher_Weil
           `Investments `Pre_Trade `Market_Value_Times_Duration_Fisher_Weil
           `Investments `Pre_Trade `Market_Value_Times_Convexity_Fisher_Weil
           `Investments `Pre_Trade `Market_Value_Times_Duration_Modified
           `Investments `Pre_Trade `Market_Value_Times_Convexity_Modified
           `Investments `Pre_Trade `Market_Value_Times_Maturity
           `Investments `Pre_Trade `Market_Value_of_Maturing
           `Investments `Pre_Trade `Dividends_Declared
           `Investments `Pre_Trade `Dividends_Received
           `Investments `Pre_Trade `Dividends_Receivable
           `Investments `Pre_Trade `Consideration_Paid
           `Investments `Pre_Trade `Price_Paid
           `Investments `Pre_Trade `Consideration_Received
           `Investments `Pre_Trade `Price_Received
           `Investments `Pre_Trade `Principal_Received
           `Investments `Pre_Trade `Rent_Received
           `Investments `Pre_Trade `Property_Expenses_Paid
           `Investments `Pre_Trade `Derivatives_Cash_Flow
           `Economic `Pre_Trade `Income_Basis
           `Economic `Pre_Trade `Balance_Sheet_Value
           `Economic `Pre_Trade `Balance_Sheet_Value_HTM
           `Economic `Pre_Trade `Balance_Sheet_Value_LAR
           `Economic `Pre_Trade `Balance_Sheet_Value_AFS
           `Economic `Pre_Trade `Balance_Sheet_Value_Trading
           `Economic `Pre_Trade `Realized_Gain
           `Economic `Pre_Trade `Unrealized_Gain
           `Economic `Pre_Trade `Change_in_Unrealized_Gain
           `Economic `Pre_Trade `Accrued_Income
           `Economic `Pre_Trade `Income_Basis_of_Trades
           `Economic `Pre_Trade `Change_in_Income_Basis
           `Economic `Pre_Trade `Income_Received
           `Economic `Pre_Trade `Expenses_Paid
           `Economic `Pre_Trade `Net_Income_Earned
           `Economic `Pre_Trade `Income_Basis_FX_Effect
           `Economic `Pre_Trade `Accrued_Income_FX_Effect
           `Economic `Pre_Trade `Income_FX_Effect
           `Economic `Pre_Trade `Unrealized_Gain_FX_Effect
           `Economic `Pre_Trade `Appreciation
           `Economic `Pre_Trade `Depreciation
           `Economic `Pre_Trade `Realized_Gain_Positive
           `Economic `Pre_Trade `Realized_Gain_Negative
           `Economic `Pre_Trade `Unrealized_Gain_Positive
           `Economic `Pre_Trade `Unrealized_Gain_Negative
           `Economic `Pre_Trade `BzW
           `Economic `Pre_Trade `Fluctuation_Reserve
           `Economic `Pre_Trade `Amount_Invested
           `Economic `Pre_Trade `Hidden_Reserves
           `Economic `Pre_Trade `Hidden_Reserves_Positive
           `Economic `Pre_Trade `Hidden_Reserves_Negative
           `Economic `Pre_Trade `Balance_Sheet_Value_AV
           `Economic `Pre_Trade `Quantity_AV
           `Economic `Pre_Trade `Quantity_UV
           `Economic `Pre_Trade `HGB_Cost_AV
           `Economic `Pre_Trade `HGB_Cost_UV
           `Economic `Pre_Trade `Hidden_Reserves_AV
           `Solvency_II `Pre_Trade `Income_Basis
           `Solvency_II `Pre_Trade `Balance_Sheet_Value
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_HTM
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_LAR
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_AFS
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_Trading
           `Solvency_II `Pre_Trade `Realized_Gain
           `Solvency_II `Pre_Trade `Unrealized_Gain
           `Solvency_II `Pre_Trade `Change_in_Unrealized_Gain
           `Solvency_II `Pre_Trade `Accrued_Income
           `Solvency_II `Pre_Trade `Income_Basis_of_Trades
           `Solvency_II `Pre_Trade `Change_in_Income_Basis
           `Solvency_II `Pre_Trade `Income_Received
           `Solvency_II `Pre_Trade `Expenses_Paid
           `Solvency_II `Pre_Trade `Net_Income_Earned
           `Solvency_II `Pre_Trade `Income_Basis_FX_Effect
           `Solvency_II `Pre_Trade `Accrued_Income_FX_Effect
           `Solvency_II `Pre_Trade `Income_FX_Effect
           `Solvency_II `Pre_Trade `Unrealized_Gain_FX_Effect
           `Solvency_II `Pre_Trade `Appreciation
           `Solvency_II `Pre_Trade `Depreciation
           `Solvency_II `Pre_Trade `Realized_Gain_Positive
           `Solvency_II `Pre_Trade `Realized_Gain_Negative
           `Solvency_II `Pre_Trade `Unrealized_Gain_Positive
           `Solvency_II `Pre_Trade `Unrealized_Gain_Negative
           `Solvency_II `Pre_Trade `BzW
           `Solvency_II `Pre_Trade `Fluctuation_Reserve
           `Solvency_II `Pre_Trade `Amount_Invested
           `Solvency_II `Pre_Trade `Hidden_Reserves
           `Solvency_II `Pre_Trade `Hidden_Reserves_Positive
           `Solvency_II `Pre_Trade `Hidden_Reserves_Negative
           `Solvency_II `Pre_Trade `Balance_Sheet_Value_AV
           `Solvency_II `Pre_Trade `Quantity_AV
           `Solvency_II `Pre_Trade `Quantity_UV
           `Solvency_II `Pre_Trade `HGB_Cost_AV
           `Solvency_II `Pre_Trade `HGB_Cost_UV
           `Solvency_II `Pre_Trade `Hidden_Reserves_AV
           `US_GAAP `Pre_Trade `Income_Basis
           `US_GAAP `Pre_Trade `Balance_Sheet_Value
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_HTM
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_LAR
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_AFS
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_Trading
           `US_GAAP `Pre_Trade `Realized_Gain
           `US_GAAP `Pre_Trade `Unrealized_Gain
           `US_GAAP `Pre_Trade `Change_in_Unrealized_Gain
           `US_GAAP `Pre_Trade `Accrued_Income
           `US_GAAP `Pre_Trade `Income_Basis_of_Trades
           `US_GAAP `Pre_Trade `Change_in_Income_Basis
           `US_GAAP `Pre_Trade `Income_Received
           `US_GAAP `Pre_Trade `Expenses_Paid
           `US_GAAP `Pre_Trade `Net_Income_Earned
           `US_GAAP `Pre_Trade `Income_Basis_FX_Effect
           `US_GAAP `Pre_Trade `Accrued_Income_FX_Effect
           `US_GAAP `Pre_Trade `Income_FX_Effect
           `US_GAAP `Pre_Trade `Unrealized_Gain_FX_Effect
           `US_GAAP `Pre_Trade `Appreciation
           `US_GAAP `Pre_Trade `Depreciation
           `US_GAAP `Pre_Trade `Realized_Gain_Positive
           `US_GAAP `Pre_Trade `Realized_Gain_Negative
           `US_GAAP `Pre_Trade `Unrealized_Gain_Positive
           `US_GAAP `Pre_Trade `Unrealized_Gain_Negative
           `US_GAAP `Pre_Trade `BzW
           `US_GAAP `Pre_Trade `Fluctuation_Reserve
           `US_GAAP `Pre_Trade `Amount_Invested
           `US_GAAP `Pre_Trade `Hidden_Reserves
           `US_GAAP `Pre_Trade `Hidden_Reserves_Positive
           `US_GAAP `Pre_Trade `Hidden_Reserves_Negative
           `US_GAAP `Pre_Trade `Balance_Sheet_Value_AV
           `US_GAAP `Pre_Trade `Quantity_AV
           `US_GAAP `Pre_Trade `Quantity_UV
           `US_GAAP `Pre_Trade `HGB_Cost_AV
           `US_GAAP `Pre_Trade `HGB_Cost_UV
           `US_GAAP `Pre_Trade `Hidden_Reserves_AV
           `IFRS `Pre_Trade `Income_Basis
           `IFRS `Pre_Trade `Balance_Sheet_Value
           `IFRS `Pre_Trade `Balance_Sheet_Value_HTM
           `IFRS `Pre_Trade `Balance_Sheet_Value_LAR
           `IFRS `Pre_Trade `Balance_Sheet_Value_AFS
           `IFRS `Pre_Trade `Balance_Sheet_Value_Trading
           `IFRS `Pre_Trade `Realized_Gain
           `IFRS `Pre_Trade `Unrealized_Gain
           `IFRS `Pre_Trade `Change_in_Unrealized_Gain
           `IFRS `Pre_Trade `Accrued_Income
           `IFRS `Pre_Trade `Income_Basis_of_Trades
           `IFRS `Pre_Trade `Change_in_Income_Basis
           `IFRS `Pre_Trade `Income_Received
           `IFRS `Pre_Trade `Expenses_Paid
           `IFRS `Pre_Trade `Net_Income_Earned
           `IFRS `Pre_Trade `Income_Basis_FX_Effect
           `IFRS `Pre_Trade `Accrued_Income_FX_Effect
           `IFRS `Pre_Trade `Income_FX_Effect
           `IFRS `Pre_Trade `Unrealized_Gain_FX_Effect
           `IFRS `Pre_Trade `Appreciation
           `IFRS `Pre_Trade `Depreciation
           `IFRS `Pre_Trade `Realized_Gain_Positive
           `IFRS `Pre_Trade `Realized_Gain_Negative
           `IFRS `Pre_Trade `Unrealized_Gain_Positive
           `IFRS `Pre_Trade `Unrealized_Gain_Negative
           `IFRS `Pre_Trade `BzW
           `IFRS `Pre_Trade `Fluctuation_Reserve
           `IFRS `Pre_Trade `Amount_Invested
           `IFRS `Pre_Trade `Hidden_Reserves
           `IFRS `Pre_Trade `Hidden_Reserves_Positive
           `IFRS `Pre_Trade `Hidden_Reserves_Negative
           `IFRS `Pre_Trade `Balance_Sheet_Value_AV
           `IFRS `Pre_Trade `Quantity_AV
           `IFRS `Pre_Trade `Quantity_UV
           `IFRS `Pre_Trade `HGB_Cost_AV
           `IFRS `Pre_Trade `HGB_Cost_UV
           `IFRS `Pre_Trade `Hidden_Reserves_AV
           `US_Statutory `Pre_Trade `Income_Basis
           `US_Statutory `Pre_Trade `Balance_Sheet_Value
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_HTM
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_LAR
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_AFS
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_Trading
           `US_Statutory `Pre_Trade `Realized_Gain
           `US_Statutory `Pre_Trade `Unrealized_Gain
           `US_Statutory `Pre_Trade `Change_in_Unrealized_Gain
           `US_Statutory `Pre_Trade `Accrued_Income
           `US_Statutory `Pre_Trade `Income_Basis_of_Trades
           `US_Statutory `Pre_Trade `Change_in_Income_Basis
           `US_Statutory `Pre_Trade `Income_Received
           `US_Statutory `Pre_Trade `Expenses_Paid
           `US_Statutory `Pre_Trade `Net_Income_Earned
           `US_Statutory `Pre_Trade `Income_Basis_FX_Effect
           `US_Statutory `Pre_Trade `Accrued_Income_FX_Effect
           `US_Statutory `Pre_Trade `Income_FX_Effect
           `US_Statutory `Pre_Trade `Unrealized_Gain_FX_Effect
           `US_Statutory `Pre_Trade `Appreciation
           `US_Statutory `Pre_Trade `Depreciation
           `US_Statutory `Pre_Trade `Realized_Gain_Positive
           `US_Statutory `Pre_Trade `Realized_Gain_Negative
           `US_Statutory `Pre_Trade `Unrealized_Gain_Positive
           `US_Statutory `Pre_Trade `Unrealized_Gain_Negative
           `US_Statutory `Pre_Trade `BzW
           `US_Statutory `Pre_Trade `Fluctuation_Reserve
           `US_Statutory `Pre_Trade `Amount_Invested
           `US_Statutory `Pre_Trade `Hidden_Reserves
           `US_Statutory `Pre_Trade `Hidden_Reserves_Positive
           `US_Statutory `Pre_Trade `Hidden_Reserves_Negative
           `US_Statutory `Pre_Trade `Balance_Sheet_Value_AV
           `US_Statutory `Pre_Trade `Quantity_AV
           `US_Statutory `Pre_Trade `Quantity_UV
           `US_Statutory `Pre_Trade `HGB_Cost_AV
           `US_Statutory `Pre_Trade `HGB_Cost_UV
           `US_Statutory `Pre_Trade `Hidden_Reserves_AV
           `HGB `Pre_Trade `Income_Basis
           `HGB `Pre_Trade `Balance_Sheet_Value
           `HGB `Pre_Trade `Balance_Sheet_Value_HTM
           `HGB `Pre_Trade `Balance_Sheet_Value_LAR
           `HGB `Pre_Trade `Balance_Sheet_Value_AFS
           `HGB `Pre_Trade `Balance_Sheet_Value_Trading
           `HGB `Pre_Trade `Realized_Gain
           `HGB `Pre_Trade `Unrealized_Gain
           `HGB `Pre_Trade `Change_in_Unrealized_Gain
           `HGB `Pre_Trade `Accrued_Income
           `HGB `Pre_Trade `Income_Basis_of_Trades
           `HGB `Pre_Trade `Change_in_Income_Basis
           `HGB `Pre_Trade `Income_Received
           `HGB `Pre_Trade `Expenses_Paid
           `HGB `Pre_Trade `Net_Income_Earned
           `HGB `Pre_Trade `Income_Basis_FX_Effect
           `HGB `Pre_Trade `Accrued_Income_FX_Effect
           `HGB `Pre_Trade `Income_FX_Effect
           `HGB `Pre_Trade `Unrealized_Gain_FX_Effect
           `HGB `Pre_Trade `Appreciation
           `HGB `Pre_Trade `Depreciation
           `HGB `Pre_Trade `Realized_Gain_Positive
           `HGB `Pre_Trade `Realized_Gain_Negative
           `HGB `Pre_Trade `Unrealized_Gain_Positive
           `HGB `Pre_Trade `Unrealized_Gain_Negative
           `Investments `Final `Quantity
           `Investments `Final `Cost_Value
           `Investments `Final `Constant_Yield_Amortized_Cost
           `Investments `Final `Market_Value
           `Investments `Final `Market_Value_QIS5_Shock_Up
           `Investments `Final `Market_Value_QIS5_Shock_Down
           `Investments `Final `Interest_Received
           `Investments `Final `Dividends_Received
           `Investments `Final `Rent_Received
           `Investments `Final `Accrued_Interest
           `Investments `Final `Consideration_Paid
           `Investments `Final `Price_Paid
           `Investments `Final `Accrued_Interest_Paid
           `Investments `Final `Consideration_Received
           `Investments `Final `Price_Received
           `Investments `Final `Accrued_Interest_Received
           `Investments `Final `Notional_Amount
           `Investments `Final `Market_Value_for_Fisher_Weil
           `Investments `Final `Market_Value_Times_Duration_Fisher_Weil
           `Investments `Final `Market_Value_Times_Convexity_Fisher_Weil
           `Investments `Final `Market_Value_Times_Duration_Modified
           `Investments `Final `Market_Value_Times_Convexity_Modified
           `Investments `Final `Market_Value_Times_Maturity
           `HGB `Final `Income_Basis
           `HGB `Final `Realized_Gain
           `HGB `Final `Unrealized_Gain
           `HGB `Final `Sell_Realized_Gain
           `HGB `Final `Reclassification_Gain
           `HGB `Final `Net_Ordinary_Income_Gain
           `HGB `Final `Balance_Sheet_Value
           `HGB `Final `Balance_Sheet_Value_HTM
           `HGB `Final `Balance_Sheet_Value_LAR
           `HGB `Final `Balance_Sheet_Value_AFS
           `HGB `Final `Balance_Sheet_Value_Trading
           `HGB `Final `Income_Basis_of_Purchases
           `HGB `Final `Change_in_Income_Basis
           `HGB `Final `Accrued_Income
           `HGB `Final `Accrued_Income_Paid
           `HGB `Final `Accrued_Income_Received
           `HGB `Final `Accrued_Expenses
           `HGB `Final `Accrued_Expenses_Received
           `HGB `Final `Accrued_Expenses_Paid
           `HGB `Final `Change_in_Accrued_Income
           `HGB `Final `Change_in_Accrued_Expenses
           `HGB `Final `Net_Income_Earned
           `HGB `Final `Change_in_Unrealized_Gain
           `HGB `Final `Appreciation
           `HGB `Final `Depreciation
           `HGB `Final `Realized_Gain_Positive
           `HGB `Final `Realized_Gain_Negative
           `HGB `Final `Unrealized_Gain_Positive
           `HGB `Final `Unrealized_Gain_Negative
           `HGB `Final `Total_Gain
           `HGB `Final `BzW
           `HGB `Final `Fluctuation_Reserve
           `HGB `Final `Amount_Invested
           `HGB `Final `Hidden_Reserves
           `HGB `Final `Hidden_Reserves_Positive
           `HGB `Final `Hidden_Reserves_Negative
           `HGB `Final `Balance_Sheet_Value_AV
           `HGB `Final `Quantity_AV
           `HGB `Final `Quantity_UV
           `HGB `Final `Hidden_Reserves_AV
           `Economic `Final `Income_Basis
           `Economic `Final `Realized_Gain
           `Economic `Final `Unrealized_Gain
           `Economic `Final `Sell_Realized_Gain
           `Economic `Final `Reclassification_Gain
           `Economic `Final `Net_Ordinary_Income_Gain
           `Economic `Final `Balance_Sheet_Value
           `Economic `Final `Balance_Sheet_Value_HTM
           `Economic `Final `Balance_Sheet_Value_LAR
           `Economic `Final `Balance_Sheet_Value_AFS
           `Economic `Final `Balance_Sheet_Value_Trading
           `Economic `Final `Income_Basis_of_Purchases
           `Economic `Final `Change_in_Income_Basis
           `Economic `Final `Accrued_Income
           `Economic `Final `Accrued_Income_Paid
           `Economic `Final `Accrued_Income_Received
           `Economic `Final `Accrued_Expenses
           `Economic `Final `Accrued_Expenses_Received
           `Economic `Final `Accrued_Expenses_Paid
           `Economic `Final `Change_in_Accrued_Income
           `Economic `Final `Change_in_Accrued_Expenses
           `Economic `Final `Net_Income_Earned
           `Economic `Final `Change_in_Unrealized_Gain
           `Economic `Final `Appreciation
           `Economic `Final `Depreciation
           `Economic `Final `Realized_Gain_Positive
           `Economic `Final `Realized_Gain_Negative
           `Economic `Final `Unrealized_Gain_Positive
           `Economic `Final `Unrealized_Gain_Negative
           `Economic `Final `Total_Gain
           `Solvency_II `Final `Income_Basis
           `Solvency_II `Final `Realized_Gain
           `Solvency_II `Final `Unrealized_Gain
           `Solvency_II `Final `Sell_Realized_Gain
           `Solvency_II `Final `Reclassification_Gain
           `Solvency_II `Final `Net_Ordinary_Income_Gain
           `Solvency_II `Final `Balance_Sheet_Value
           `Solvency_II `Final `Balance_Sheet_Value_HTM
           `Solvency_II `Final `Balance_Sheet_Value_LAR
           `Solvency_II `Final `Balance_Sheet_Value_AFS
           `Solvency_II `Final `Balance_Sheet_Value_Trading
           `Solvency_II `Final `Income_Basis_of_Purchases
           `Solvency_II `Final `Change_in_Income_Basis
           `Solvency_II `Final `Accrued_Income
           `Solvency_II `Final `Accrued_Income_Paid
           `Solvency_II `Final `Accrued_Income_Received
           `Solvency_II `Final `Accrued_Expenses
           `Solvency_II `Final `Accrued_Expenses_Received
           `Solvency_II `Final `Accrued_Expenses_Paid
           `Solvency_II `Final `Change_in_Accrued_Income
           `Solvency_II `Final `Change_in_Accrued_Expenses
           `Solvency_II `Final `Net_Income_Earned
           `Solvency_II `Final `Change_in_Unrealized_Gain
           `Solvency_II `Final `Appreciation
           `Solvency_II `Final `Depreciation
           `Solvency_II `Final `Realized_Gain_Positive
           `Solvency_II `Final `Realized_Gain_Negative
           `Solvency_II `Final `Unrealized_Gain_Positive
           `Solvency_II `Final `Unrealized_Gain_Negative
           `Solvency_II `Final `Total_Gain
           `US_GAAP `Final `Income_Basis
           `US_GAAP `Final `Realized_Gain
           `US_GAAP `Final `Unrealized_Gain
           `US_GAAP `Final `Sell_Realized_Gain
           `US_GAAP `Final `Reclassification_Gain
           `US_GAAP `Final `Net_Ordinary_Income_Gain
           `US_GAAP `Final `Balance_Sheet_Value
           `US_GAAP `Final `Balance_Sheet_Value_HTM
           `US_GAAP `Final `Balance_Sheet_Value_LAR
           `US_GAAP `Final `Balance_Sheet_Value_AFS
           `US_GAAP `Final `Balance_Sheet_Value_Trading
           `US_GAAP `Final `Income_Basis_of_Purchases
           `US_GAAP `Final `Change_in_Income_Basis
           `US_GAAP `Final `Accrued_Income
           `US_GAAP `Final `Accrued_Income_Paid
           `US_GAAP `Final `Accrued_Income_Received
           `US_GAAP `Final `Accrued_Expenses
           `US_GAAP `Final `Accrued_Expenses_Received
           `US_GAAP `Final `Accrued_Expenses_Paid
           `US_GAAP `Final `Change_in_Accrued_Income
           `US_GAAP `Final `Change_in_Accrued_Expenses
           `US_GAAP `Final `Net_Income_Earned
           `US_GAAP `Final `Change_in_Unrealized_Gain
           `US_GAAP `Final `Appreciation
           `US_GAAP `Final `Depreciation
           `US_GAAP `Final `Realized_Gain_Positive
           `US_GAAP `Final `Realized_Gain_Negative
           `US_GAAP `Final `Unrealized_Gain_Positive
           `US_GAAP `Final `Unrealized_Gain_Negative
           `US_GAAP `Final `Total_Gain
           `IFRS `Final `Income_Basis
           `IFRS `Final `Realized_Gain
           `IFRS `Final `Unrealized_Gain
           `IFRS `Final `Sell_Realized_Gain
           `IFRS `Final `Reclassification_Gain
           `IFRS `Final `Net_Ordinary_Income_Gain
           `IFRS `Final `Balance_Sheet_Value
           `IFRS `Final `Balance_Sheet_Value_HTM
           `IFRS `Final `Balance_Sheet_Value_LAR
           `IFRS `Final `Balance_Sheet_Value_AFS
           `IFRS `Final `Balance_Sheet_Value_Trading
           `IFRS `Final `Income_Basis_of_Purchases
           `IFRS `Final `Change_in_Income_Basis
           `IFRS `Final `Accrued_Income
           `IFRS `Final `Accrued_Income_Paid
           `IFRS `Final `Accrued_Income_Received
           `IFRS `Final `Accrued_Expenses
           `IFRS `Final `Accrued_Expenses_Received
           `IFRS `Final `Accrued_Expenses_Paid
           `IFRS `Final `Change_in_Accrued_Income
           `IFRS `Final `Change_in_Accrued_Expenses
           `IFRS `Final `Net_Income_Earned
           `IFRS `Final `Change_in_Unrealized_Gain
           `IFRS `Final `Appreciation
           `IFRS `Final `Depreciation
           `IFRS `Final `Realized_Gain_Positive
           `IFRS `Final `Realized_Gain_Negative
           `IFRS `Final `Unrealized_Gain_Positive
           `IFRS `Final `Unrealized_Gain_Negative
           `IFRS `Final `Total_Gain
           `US_Statutory `Final `Income_Basis
           `US_Statutory `Final `Realized_Gain
           `US_Statutory `Final `Unrealized_Gain
           `US_Statutory `Final `Sell_Realized_Gain
           `US_Statutory `Final `Reclassification_Gain
           `US_Statutory `Final `Net_Ordinary_Income_Gain
           `US_Statutory `Final `Balance_Sheet_Value
           `US_Statutory `Final `Balance_Sheet_Value_HTM
           `US_Statutory `Final `Balance_Sheet_Value_LAR
           `US_Statutory `Final `Balance_Sheet_Value_AFS
           `US_Statutory `Final `Balance_Sheet_Value_Trading
           `US_Statutory `Final `Income_Basis_of_Purchases
           `US_Statutory `Final `Change_in_Income_Basis
           `US_Statutory `Final `Accrued_Income
           `US_Statutory `Final `Accrued_Income_Paid
           `US_Statutory `Final `Accrued_Income_Received
           `US_Statutory `Final `Accrued_Expenses
           `US_Statutory `Final `Accrued_Expenses_Received
           `US_Statutory `Final `Accrued_Expenses_Paid
           `US_Statutory `Final `Change_in_Accrued_Income
           `US_Statutory `Final `Change_in_Accrued_Expenses
           `US_Statutory `Final `Net_Income_Earned
           `US_Statutory `Final `Change_in_Unrealized_Gain
           `US_Statutory `Final `Appreciation
           `US_Statutory `Final `Depreciation
           `US_Statutory `Final `Realized_Gain_Positive
           `US_Statutory `Final `Realized_Gain_Negative
           `US_Statutory `Final `Unrealized_Gain_Positive
           `US_Statutory `Final `Unrealized_Gain_Negative
           `US_Statutory `Final `Total_Gain
           `Investments `Pre_Trade `IRR
           `Investments `Pre_Trade `Risk_Adjusted_IRR
           `Investments `Final `IRR
           `Investments `Final `Risk_Adjusted_IRR);`Module `Timing `Item];)
         (`J
          .((`Portfolio
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Portfolio;,,`All];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Portfolio];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Portfolio];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Portfolio;,,`All];)
               (`F
                ,`Portfolio
                ))
             )
            (`Asset_Class
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Asset_Class;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Asset_Class];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Asset_Class];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Asset_Class;,0#`];)
               (`F
                ,`Asset_Class
                ))
             ))
          )
         (`U
          `Portfolio `Asset_Class
          )
         (`XX
          `IRR `Risk_Adjusted_IRR `Quantity `Notional_Amount `Cost_Value `Constant_Yield_Amortized_Cost `Market_Value `Market_Value_QIS5_Shock_Up `Market_Value_QIS5_Shock_Down `Constant_Yield_Adjustment `Accrued_Interest `Interest_Received `Return_of_Market_Value `Market_Value_for_Fisher_Weil `Market_Value_Times_Duration_Fisher_Weil `Market_Value_Times_Convexity_Fisher_Weil `Market_Value_Times_Duration_Modified `Market_Value_Times_Convexity_Modified `Market_Value_Times_Maturity `Market_Value_of_Maturing `Dividends_Declared `Dividends_Received `Dividends_Receivable `Consideration_Paid `Price_Paid `Consideration_Received `Price_Received `Principal_Received `Rent_Received `Property_Expenses_Paid `Derivatives_Cash_Flow `Accrued_Interest_Paid `Accrued_Interest_Received `Income_Basis `Balance_Sheet_Value `Balance_Sheet_Value_HTM `Balance_Sheet_Value_LAR `Balance_Sheet_Value_AFS `Balance_Sheet_Value_Trading `Realized_Gain `Unrealized_Gain `Change_in_Unrealized_Gain `Accrued_Income `Income_Basis_of_Trades `Change_in_Income_Basis `Income_Received `Expenses_Paid `Net_Income_Earned `Income_Basis_FX_Effect `Accrued_Income_FX_Effect `Income_FX_Effect `Unrealized_Gain_FX_Effect `Appreciation `Depreciation `Realized_Gain_Positive `Realized_Gain_Negative `Unrealized_Gain_Positive `Unrealized_Gain_Negative `BzW `Fluctuation_Reserve `Amount_Invested `Hidden_Reserves `Hidden_Reserves_Positive `Hidden_Reserves_Negative `Balance_Sheet_Value_AV `Quantity_AV `Quantity_UV `HGB_Cost_AV `HGB_Cost_UV `Hidden_Reserves_AV `Unrealized_Gain_FX `Unrealized_Gain_nonFX `Realized_Gain_IMR `Realized_Gain_AVR `Sell_Realized_Gain `Reclassification_Gain `Net_Ordinary_Income_Gain `Income_Basis_of_Purchases `Accrued_Income_Paid `Accrued_Income_Received `Accrued_Expenses `Accrued_Expenses_Received `Accrued_Expenses_Paid `Change_in_Accrued_Income `Change_in_Accrued_Expenses `Total_Gain
          )))
      (`Accounting
       .((`Entity
          `Entity_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Entity;,`Any_Entity_];))
         (`Standard
          `Economic
          .,(`V;{[label;p;x]
  g:`None,.G`submodules
  if[label~"Module"
    if[`HGB_Life _in g; g,:`HGB]
    if[`US_Statutory_Life _in g; g,:`US_Statutory]
    ]
 :[~x _in g;(1;("&0 is not an active &1";$x;label))]}["Standard"];))
         (`Statement;`Income_Statement;.())
         (`Timing;`Final;.())
         (`Item;`A_1_Fixed_Income;.())
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`cell
             .((`Entity
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Entity_ `Any_Entity_ `Entity_1
                   ))
                )
               (`Standard
                .((`c;`combo;)
                  (`o
                   `Economic `Solvency_II `US_GAAP `IFRS `US_Statutory `US_Statutory_Life `HGB `HGB_Life
                   ))
                )
               (`Statement
                .((`c;`combo;)
                  (`o
                   `Assets `Liabilities `Capital_and_Surplus `Income_Statement `Change_in_Surplus
                   ))
                )
               (`Timing
                .((`c;`combo;)
                  (`o
                   `Pre_Trade_Pre_Supplemental `Pre_Trade `Final
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `A_01_Net_Earned_Premium `A_01_a_Gross_Written_Premium `A_01_b_Ceded_Written_Premium `A_01_c_Change_in_Gross_Unearned_Premium `A_01_d_Change_in_Ceded_Unearned_Premium `A_02_Premiums_from_Reserve_for_Premium_Refunds `A_02_Technical_Interest `A_03_Income_from_Investments `A_03_Other_Underwriting_Income `A_03_a_Income_from_Affiliates `A_03_b_Realized_Gains `A_03_c_Other_Investment_Income `A_04_Net_Incurred_Claims `A_04_Non_Realized_Gain_from_Investments `A_04_a_Net_Claims_Paid `A_04_a_aa_Gross_Claims_Paid `A_04_a_bb_Ceded_Claims_Paid `A_04_b_Change_in_Net_Loss_and_LAE_Reserves `A_04_b_aa_Change_in_Gross_Loss_and_LAE_Reserves `A_04_b_bb_Change_in_Ceded_Loss_and_LAE_Reserves `A_05_Change_in_Other_Net_Underwriting_Provisions `A_05_Other_Underwriting_Income `A_06_Net_Claims_Incurred `A_06_Payments_to_Reserve_for_Premium_Refunds `A_06_a_Net_Claims_Paid `A_06_b_Change_in_Net_Provision_for_Outstanding_Claims `A_07_Change_in_Other_Net_Underwriting_Provisions `A_07_Underwriting_Expenses `A_07_a_Gross_Underwriting_Expenses `A_07_b_Ceded_Underwriting_Expenses `A_08_Other_Underwriting_Expenses `A_08_Payments_to_Reserve_for_Premium_Refunds `A_09_Subtotal `A_09_Underwriting_Expenses `A_10_Change_in_Claim_Equalization_Reserves `A_10_Investment_Expenses `A_11_Non_Realized_Loss_from_Investments `A_11_Underwriting_Result `A_12_Other_Underwriting_Expenses `A_13_Underwriting_Result `A_1_1_Preferred_Stock `A_1_2_Common_Stock `A_1_3_Special_Surplus `A_1_Fixed_Income `A_1_Gross_Earned_Premium `A_1_Paid_Up_Ordinary_Share_Capital `A_1_Subscribed_Capital `A_1_TP_Best_Estimate_Non_Life_Excluding_Health `A_1_Unpaid_Losses `A_1_a_Gross_Written_Premium `A_1_b_Change_in_Gross_Unearned_Premium `A_1a_Fixed_Income_HTM `A_1b_Fixed_Income_LAR `A_1c_Fixed_Income_AFS `A_1d_Fixed_Income_Trading `A_2_Assumed_Incurred_Premium `A_2_Called_Up_Ordinary_Share_Capital `A_2_Capital_Reserve `A_2_Real_Estate `A_2_Risk_Margin_Non_Life_Excluding_Health `A_2_Unpaid_LAE `A_2_a_Assumed_Paid_Premium `A_2_b_Change_in_Assumed_Accrued_Premium `A_3_1_Legal_Reserve `A_3_2_Other_Revenue_Reserves `A_3_Ceded_Earned_Premium `A_3_Mortgages `A_3_Policyholders_Account_Balances `A_3_Revenue_Reserve `A_3_a_Ceded_Written_Premium `A_3_b_Change_in_Ceded_Unearned_Premium `A_4_Ceded_Incurred_Premium `A_4_Equities `A_4_Net_Retained_Profit `A_4_Other_Policyholder_Funds_Payable `A_4_a_Ceded_Paid_Premium `A_4_b_Change_in_Ceded_Accrued_Premium `A_4a_Equities_Unaffiliated `A_4a_Equities_Unaffiliated_AFS `A_4b_Equities_Affiliated `A_4c_Equities_Unaffiliated_Trading `A_5_Derivatives `A_5_Future_Policy_Benefits `A_6_Other_Investments `A_6_Policy_Claims `A_7_Policyholder_Dividends_Payable `A_7_Short_Term_Investments `A_Goodwill `A_Gross_Technical_Provisions_Non_Life_Excluding_Health `A_Investments `A_Net_Earned_Premium `A_Ordinary_Share_Capital `A_Reserves_for_Benefits_Claims_Expenses `A_Shareholders_Equity `A_Subscribed_Capital_Unpaid `B_01_Income_from_Investments `B_01_Other_Income `B_02_Investment_Expenses `B_02_Other_Expenses `B_03_Ordinary_Result `B_03_Technical_Interest `B_04_Extraordinary_Income `B_04_Other_Income `B_05_Extraordinary_Expenses `B_05_Other_Expenses `B_06_Extraordinary_Result `B_06_Result_from_Ordinary_Business_Activities `B_07_Extraordinary_Income `B_07_Taxes_On_Income `B_08_Extraordinary_Expenses `B_08_Other_Taxes `B_09_Extraordinary_Result `B_09_Profit_Transfers `B_10_Net_Income `B_10_Taxes_on_Income `B_11_Other_Taxes `B_11_Retained_Profit_Carried_Forward `B_12_Net_Income `B_12_Withdrawal_from_Capital_Reserve `B_12_a_Withdrawal_from_Preferred_Stock `B_12_b_Withdrawal_from_Common_Stock `B_12_c_Withdrawal_from_Special_Surplus `B_12_d_Withdrawal_from_Capital_Reserve `B_13_Retained_Profit_Carried_Forward `B_13_Withdrawal_from_Revenue_Reserve `B_13_a_Withdrawal_from_Legal_Reserve `B_13_b_Withdrawal_from_Other_Revenue_Reserves `B_13_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_13_d_Withdrawal_from_Shareholder_Equity `B_14_Net_Retained_Profit `B_14_Withdrawal_from_Capital_Reserve `B_14_a_Withdrawal_from_Preferred_Stock `B_14_b_Withdrawal_from_Common_Stock `B_14_c_Withdrawal_from_Special_Surplus `B_14_d_Withdrawal_from_Capital_Reserve `B_15_Withdrawal_from_Revenue_Reserve `B_15_a_Withdrawal_from_Legal_Reserve `B_15_b_Withdrawal_from_Other_Revenue_Reserves `B_15_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_16_Net_Retained_Profit `B_1_Paid_Up_Initial_Fund `B_1_TP_Best_Estimate_Health_Similar_To_Non_Life `B_2_Called_Up_Initial_Fund `B_2_Risk_Margin_Health_Similar_To_Non_Life `B_3_Callable_Up_Initial_Fund `B_Cash `B_Equity_from_Profit_Participation_Rights `B_Fee_Income_UL_Annuity_Policies `B_Gross_Technical_Provisions_Health_Similar_To_Non_Life `B_Initial_Fund `B_Intangible_Assets `B_Other_Intangible_Assets `B_Unearned_Premiums `C_1_Net_Investment_Income `C_1_Property `C_1_TP_Best_Estimate_Health_Similar_To_Life `C_2_Investments_in_Affiliates `C_2_Realized_Investment_Gains `C_2_Risk_Margin_Health_Similar_To_Life `C_3_1_Shares `C_3_1_a_Directly_Held_Shares `C_3_1_b_Fonds `C_3_2_Bearer_Bonds `C_3_3_Mortgages `C_3_4_Other_Loans `C_3_5_Deposits_with_Banks `C_3_6_Miscellaneous_Other_Investments `C_3_Other_Investments_Total `C_Accrued_Investment_Income `C_Drafts_Outstanding `C_Gross_Technical_Provisions_Health_Similar_To_Life `C_Investments `C_Profit_from_Investments `C_Property_Plant_Equipment_Held_For_Own_Use `C_Share_Premium_Account `C_Subordinate_Liabilities `Change_in_Shareholders_Equity `D_10_Derivatives `D_11_Long_Term_Bank_Deposits `D_12_Other_Investments `D_1_Property_Other_Than_Own_Use `D_1_TP_Best_Estimate_Life_Excluding_Health_And_Unit_Linked `D_2_Participations `D_2_Risk_Margin_Life_Excluding_Health_And_Unit_Linked `D_3_Equities_Other_Than_Participations_Listed `D_4_Equities_Other_Than_Participations_Unlisted `D_5_Bonds_Government_And_Multilateral_Banks `D_6_Bonds_Corporate_Asset_Backed_Securities `D_7_Bonds_Corporate_Other `D_8_Structured_Notes `D_9_Investment_Funds `D_Deposits `D_Funds_Held `D_Gross_Technical_Provisions_Life_Excluding_Health_And_Unit_Linked `D_Investments_Other_Than_Assets_Held_For_Unit_Linked_Funds `D_Other_Income `D_Retained_Earnings `D_Separate_Account_Investments `D_Special_Items_with_Reserve_Character `E_1_Adjustments_To_Assets `E_1_Net_Unearned_Premium `E_1_Receivable_on_Direct_Insurance `E_1_TP_Best_Estimate_Unit_Linked_Funds `E_1_Underwriting_Expenses_Payable `E_1_a_Gross_Unearned_Premium `E_1_b_Ceded_Unearned_Premium `E_2_Accrued_Underwriting_Expenses `E_2_Adjustments_To_Technical_Provisions `E_2_Net_Premium_Reserves `E_2_Receivable_on_Reinsurance `E_2_Risk_Margin_Unit_Linked_Funds `E_2_a_Gross_Premium_Reserves `E_2_b_Ceded_Premium_Reserves `E_3_Expected_Profit_In_Future_Premiums `E_3_Investment_Expenses_Payable `E_3_Net_Provision_for_Outstanding_Claims `E_3_Other_Receivables `E_3_a_Gross_Provision_for_Outstanding_Claims `E_3_b_Ceded_Provision_for_Outstanding_Claims `E_3_c_Net_Drafts_Outstanding `E_4_Accrued_Investment_Expenses `E_4_Adjustments_To_Other_Liabilities `E_4_Net_Reserve_for_Premium_Refunds `E_4_a_Gross_Reserve_for_Premium_Refunds `E_4_b_Ceded_Reserve_for_Premium_Refunds `E_5_Claim_Equalization_Reserves `E_5_Other_Adjustments `E_6_Other_Insurance_Reserves `E_6_a_Other_Gross_Insurance_Reserves `E_6_b_Other_Ceded_Insurance_Reserves `E_Accrued_Expenses_and_Other `E_Assets_Held_For_Unit_Linked_Funds `E_Deferred_Policy_Acquisition_Costs `E_Gross_Technical_Provisions_Unit_Linked_Funds `E_Interest_Credited `E_Reconciliation_Reserve `E_Total_Amounts_Receivable `E_Underwriting_Reserves `F_1_Fixed_Assets_and_Inventories `F_1_Gross_Benefits_and_Losses_Paid `F_2_Ceded_Benefits_and_Losses_Paid `F_2_Current_Bank_Accounts `F_3_Miscellaneous_Other_Assets `F_Cash_Deposits_From_Reinsurers `F_Cash_Deposits_To_Cedants `F_Net_Benefits_and_Losses_Paid `F_Prepaid_Reinsurance_Premiums `F_Reinsurance_Balances_Payable `F_Reserves_For_Separate_Accounts `F_Surplus_Funds_Expected_Profit_In_Future_Premiums `F_Total_Other_Assets `G_1_Accrued_Interest_and_Rent `G_1_Change_in_Gross_Benefit_and_Loss_Reserves `G_1_Provision_for_Pension_Liabilities `G_1_Uncollateralized_Loans_Made `G_2_Change_in_Ceded_Benefit_and_Loss_Reserves `G_2_Collateralized_Loans_Made_Other_Than_Loans_On_Policies `G_2_Other_Prepaid_Expenses `G_2_Taxes_Payable `G_3_Ceded_Uncollectible_Loss_Accrual `G_3_Intra_Company_Liabilities `G_3_Loans_On_Policies `G_4_Assumed_Uncollectible_Loss_Accrual `G_Change_in_Net_Benefit_and_Loss_Reserves `G_Mortgages_And_Loans_Made `G_Other_Paid_In_Capital_Instruments `G_Other_Provisions `G_Premiums_Receivable `G_Reinsurance_Accounts_Payable `G_Shareholder_Dividends_Payable `G_Total_Prepaid_Expenses `H_1_Gross_LAE_Incurred `H_1_Reinsurance_Share_Of_TP_Non_Life_Excluding_Health `H_1_a_Gross_LAE_Paid `H_1_b_Change_in_Gross_LAE_Reserves `H_2_Ceded_LAE_Incurred `H_2_Reinsurance_Share_Of_TP_Health_Similar_To_Non_Life `H_2_a_Ceded_LAE_Paid `H_2_b_Change_in_Ceded_LAE_Reserves `H_2_c_Ceded_Uncollectible_LAE_Accrual `H_2_d_Assumed_Uncollectible_LAE_Accrual `H_3_Reinsurance_Share_Of_TP_Health_Similar_To_Life `H_4_Reinsurance_Share_Of_TP_Life_Excluding_Health_And_Unit_Linked `H_5_Reinsurance_Share_Of_TP_Life_Unit_Linked `H_6_Other_Reinsurance_Recoverables `H_Deferred_Tax_Liability `H_Derivatives `H_Net_LAE_Incurred `H_Preference_Shares `H_Reinsurance_Balances_Receivable `H_Reinsurance_Recoverables `H_Total_Assets `I_1_Amounts_Payable_on_Direct_Insurance `I_1_Policy_Acquisition_Costs_Paid `I_1_Unpaid_Benefits_and_Losses_and_LAE_Recoverable `I_1_a_Unpaid_Benefits_and_Losses_Recoverable `I_1_b_Unpaid_LAE_Recoverable `I_2_Amounts_Payable_on_Reinsurance `I_2_Change_in_DAC `I_2_Provision_for_Reinsurance `I_3_Contingent_Commissions `I_3_Liabilities_to_Banks `I_4_Debt_and_Notes `I_5_Miscellaneous_Liabilities `I_Debt `I_Deferred_Tax_Liabilities `I_Policy_Acquisition_Costs `I_Reinsurance_Recoverable `I_SPV_Recoverables `I_Subordinated_Liabilities `I_Total_Other_Liabilities `J_1_Capital_Notes `J_2_Surplus_Notes `J_Deferred_Tax_Asset `J_Financing_Costs `J_Intermediaries_Recoverables `J_Notes `J_Other_Expenses `J_Provisions_Other_Than_Technical_Provisions `J_Subordinated_Mutual_Member_Accounts `K_1_Dividends_to_Policyholders `K_2_Depreciation `K_3_Foreign_Exchange_Effect `K_Amounts_Owed_To_Credit_Institutions `K_Deferred_Income `K_Insurance_Recoverables_Excluding_Intermediaries `K_Other `K_Other_Items_Not_Specified_Above `K_Other_Liabilities `K_Property_Plant_and_Equipment `L01__Aggregate_Reserve_For_Life_Contracts `L01__Bonds `L01__Losses `L01__Premiums_And_Annuity_Considerations `L01__Premiums_Earned `L02__Aggregate_Reserve_For_AH_Contracts `L02__Considerations_For_Supplementary_Contracts_With_Life `L02__Losses_Incurred `L02__Reinsurance_Payable `L02a_Preferred_Stocks `L02b_Common_Stocks `L03__Liability_For_Deposit_Type_Contracts `L03__Loss_Adjustment_Expenses `L03__Loss_Expenses_Incurred `L03__Mortgages `L03__Net_Investment_Income `L03a_Investment_Income `L03b_Investment_Expenses `L03c_Interest_Paid `L03x_Losses_LAE `L04__Amortization_Of_IMR `L04__Commissions_Payable `L04__Contract_Claims `L04__Other_UW_Expenses `L04a_Occupied_Real_Estate `L04a__Life_Contract_Claims `L04b_Real_Estate_Held_For_Income `L04b__AH_Contract_Claims `L04c_Real_Estate_For_Sale `L05__AWI_UW_Deductions `L05__Cash `L05__Other_Expenses `L05__Policyholder_Dividends `L05__Separate_Accounts_Net_Operation_Gain `L06__Commissions_and_Expense_Allowances_On_Reinsurance_Ceded `L06__Contract_Loans `L06__Provision_For_Policyholder_Dividends_And_Coupons_Payable_In_Following_Year `L06__Taxes_Licenses_Fees `L06__Total_UW_Deductions `L07__Amount_Provisionally_Held_For_Deferred_Dividend_Policies_Not_Included_In_Line_6 `L07__Net_Income_of_Protected_Cells `L07__Other_Investments `L07__Reserve_Adjustments_On_Reinsurance_Ceded `L07a__Federal_Income_Taxes `L07b__Net_Deferred_Tax_Liability `L08__Borrowed_Money `L08__Miscellaneous_Income `L08__Net_UW_Gain `L08__Premiums_And_Annuity_Considerations_For_Life_And_AH_Contracts_Received_In_Advance `L08__Receivable_For_Securities `L08a__Income_From_Fees_From_Separate_Accounts `L08b__Charges_And_Fees_For_Deposit_Type_Contracts `L08c__AWI_For_Miscellaneous_Income `L09__AWI_Investments `L09__Contract_Liabilities_Not_Included_Elsewhere `L09__Investment_Income_Earned `L09__Total_Lines_1_To_8 `L09__Unearned_Premium `L09a_Net_Investment_Income_Earned `L09a__Surrender_Values_On_Canceled_Contracts `L09b_Investment_Expenses `L09b__Provision_For_Experience_Rating_Refunds `L09c_Interest_Paid `L09c__Other_Amounts_Payable_On_Reinsurance `L09d__IMR `L09x_Gross_Unearned_Premium `L09y_Deferred_Acquisition_Costs `L10__Advance_Premiums `L10__Cash_and_Investments_Subtotal `L10__Commissions_Due_And_Accrued `L10__Death_Benefits `L10__Realized_Capital_Gains `L11__Commissions_And_Expense_Allowances_Payable_On_reinsurance_Assumed `L11__Investment_Gain `L11__Matured_Endowments `L11__Title_Plants `L11a_Stockholder_Dividends `L11b_Policyholder_Dividends `L12__Annuity_Benefits `L12__Ceded_Premium_Payable `L12__General_Expenses_Due_and_Accrued `L12__Investment_Income_Due `L12__Net_Gain_PAB_Charged_Off `L13__Disability_Benefits_And_Benefits_Under_AH_Contracts `L13__Finance_Service_Charges `L13__Funds_Held `L13__Transfers_To_Separate_Accounts_Due_And_Accrued `L13a_PAB_In_Collection `L13b_PAB_Deferred `L13c_Accrued_Retro_Premium `L14__AWI_Misc_Income `L14__Amounts_Withheld `L14__Coupons_Guaranteed_Annual_Pure_Endowments `L14__Taxes_Licenses_Fees_Due_and_Accrued `L14a__Reinsurance_Recoverable `L14b__Funds_Deposited `L14c__Other_Reinsurance_Recoverable `L15__Amounts_Receivable_Relating_To_Uninsured_Plans `L15__Remittances `L15__Surrender_Benefits_And_Withdrawals_For_Life_Contracts `L15__Total_Other_Income `L15a__Current_Federal_And_Foreign_Income_Taxes_Including_Taxes_On_Realized_Capital_Gains `L15b__Net_Deferred_Tax_Liability `L16__Group_Conversions `L16__Income_B4_Divs_Taxes `L16__Provision_Reinsurance `L16__Unearned_Investment_Income `L16a__Tax_Recoverable `L16b__Net_Deferred_Tax_Asset `L17__Amounts_Withheld_By_Company `L17__Guarantee_Funds `L17__Interest_And_Adjustments_On_Contracts_Or_Deposit_Funds `L17__Net_FX_Adjustments `L17__Policyholder_Dividends `L18__Amounts_Held_For_Agents_Acount `L18__Drafts_Outstanding `L18__EDP_Equipment `L18__Income_B4_Taxes `L18__Payments_On_Supplementary_Contracts_With_Life_Contingencies `L19__Federal_Income_Taxes `L19__Furniture_and_Equipment `L19__Increase_In_Aggregate_Reserves_For_Life_And_AH `L19__Payable_PSA `L19__Remittances `L20__Net_Adj_Foreign_Exchange `L20__Net_FX_Adjustments `L20__Net_Income `L20__Payable_For_Securities `L20__Total_Lines_10_To_19 `L21__Amounts_Held_Under_Uninsured_Plans `L21__Commissions `L21__Liability_For_Benefits_For_Employees_And_Agents `L21__PP_Policyholder_Surplus `L21__Receivable_PSA `L22__A_H_Receivable `L22__Borrowed_Money `L22__Capital_Notes `L22__Commissions_And_Expense_Allowances_On_Reinsurance_Assumed `L22__Net_Income `L23_Stockholder_Dividends `L23__AWI `L23__AWI_Other `L23__General_Insurance_Expenses `L23__Other_Non_Admitted `L24__AWI_Other `L24__Assets_Total `L24__Ch_Unrealized_Capital_Gains `L24__Insurance_Taxes_Licenses_And_Fees `L24__Liabilities_Total `L24__Miscellaneous_Liabilities `L24a__AVR `L24b__Reinsurance_On_Unauthorized_Companies `L24c__Funds_Held_Under_Reinsurance_Treaties_With_Unauthorized_Reinsurers `L24d__Payable_To_Parent_Subsidiaries_And_Affiliates `L24e__Drafts_Outstanding `L24f__Liability_For_Amounts_Held_Under_Uninsured_Plans `L24g__Funds_Held_Under_Coinsurance `L24h__Payable_For_Securities `L24i__Capital_Notes `L24x_Assets_excluding_DTA `L25__AWI `L25__Assets_Total `L25__Ch_FX_Adjustment `L25__Increase_In_Loading_On_Deferred_And_Uncollected_Premiums `L25x_Assets_excluding_DTA `L26__Ch_Net_Deferred_Tax `L26__Net_Transfer_To_Separate_Accounts_Net_Of_Reinsurance `L26__Total_Liabilities_Excluding_Separate_Accounts `L27__AWI_For_Deductions `L27__AWI_Special_Surplus `L27__Ch_Non_Admitted_Assets `L27__From_Separate_Accounts `L28__Ch_Provision_Reinsurance `L28__Common_Capital_Stock `L28__Total_Liabilities `L28__Total_Lines_20_To_27 `L29__Ch_Surplus_Notes `L29__Common_Capital_Stock `L29__Net_Gain_Before_Dividends_To_Policyholders_And_Taxes `L29__Preferred_Capital_Stock `L30__AWI_Other `L30__Dividends_To_Policyholders `L30__Preferred_Capital_Stock `L31__AWI_Other `L31__Cumulative_Effect_Accounting_Changes `L31__Net_Gain_After_Dividends_To_Policyholders `L31__Surplus_Notes `L32__Federal_Income_Taxes `L32__Paid_In_Surplus `L32__Surplus_Notes `L32a_Ch_Capital_Paid_In `L32b_Capital_From_Surplus `L32c_Capital_To_Surplus `L33__Net_Gain_After_Dividends_To_Policyholders_And_Taxes `L33__Paid_In_Surplus `L33__Unassigned_Funds `L33a_Ch_Surplus_Paid_In `L33b_Surplus_To_Capital `L33c_Surplus_From_Capital `L34__AWI_Special_Surplus `L34__From_Home_Office `L34__Net_Realized_Capital_Gains `L34__Treasury_Stock `L35__Net_Income `L35__Policyholders_Surplus `L35__Stockholders_Dividends `L35__Unassigned_Funds `L36__Ch_Treasury_Stock `L36__PP_Capital_And_Surplus `L36__Treasury_Stock `L37__AWI_Ch_Surplus `L37__Net_Income `L37__Surplus `L38__Ch_Policyholders_Surplus `L38__Ch_Unrealized_Capital_Gains `L39__Ch_FX_Adjustment `L39__Policyholders_Surplus `L40__Ch_Net_Deferred_Tax `L41__Ch_Non_Admitted_Assets `L42__Ch_Provision_Reinsurance_In_Unauthorized_Companies `L43__Ch_Reserve_Due_To_Ch_Valuation_Basis `L44__Ch_in_AVR `L45__Ch_Treasury_Stock `L46__Surplus_Withdrawn_From_Separate_Accounts `L47__Other_Ch_Surplus_In_Separate_Accounts `L48__Ch_Surplus_Notes `L49__Cumulative_Effect_Accounting_Changes `L50a_Ch_Capital_Paid_In `L50b_Ch_Capital_Transferred_From_Surplus `L50c_Ch_Capital_Transferred_To_Surplus `L51a_Surplus_Adjustment_Paid_In `L51b_Surplus_Adjustment_Transferred_To_Capital `L51c_Surplus_Adjustment_Transferred_From_Capital `L51d_Surplus_Adjustment_Due_To_Reinsurance `L52__Stockholders_Dividends `L53__AWI_Ch_Surplus `L54__Net_Ch_Capital_And_Surplus `L55__Capital_And_Surplus `L_Deferred_Acquisition_Costs `L_Financial_Liabilities_Other_Than_Amounts_Owed_To_Credit_Institutions `L_Financing_Costs `L_Minority_Interests `L_Other_Assets `L_Separate_Account_Liabilities `L_Total_Capital_and_Surplus_and_Liabilities `M_1_Preferred_Stock_Par_Value `M_1_Tax_Paid `M_2_Change_in_Tax_Payable `M_2_Preferred_Stock_Additional_Paid_In `M_3_Change_in_Deferred_Tax `M_Payables_Trade_Not_Insurance `M_Preferred_Stock `M_Receivables_Trade_Not_Insurance `M_Tax_Incurred `N_1_Common_Stock_Par_Value `N_2_Common_Stock_Additional_Paid_In `N_Common_Stock `N_Pension_Benefit_Obligations `N_Pension_Benefit_Surplus `N_Shareholder_Dividends `Net_Benefits_and_Losses_Incurred `Net_Income `O_1_Change_in_Preferred_Stock `O_1_Deductible_Temporary_Differences `O_2_Change_in_Common_Stock `O_2_The_Carry_Forward_Of_Unused_Tax_Losses_And_Unused_Tax_Credits `O_3_Cannot_Be_Realised_In_A_Reasonable_Time_Frame `O_Change_in_Stock `O_Deferred_Tax_Assets `O_Special_Surplus `O_Uncalled_Investments `Operating_Result `Other_Net_Result `P_1_Change_in_Unrealized_Gain_on_Investments `P_2_Change_in_Unrealized_Gain_on_FOREX `P_3_Change_in_Unrealized_Gain_on_Derivatives `P_Cash_And_Cash_Equivalents `P_Change_in_Accumulated_Other_Comprehensive_Income `P_Change_in_Unrealized_Gain `P_Contingent_Liabilities `P_Other_Surplus `Profit_Before_Tax `Q_1_Change_in_Special_Surplus `Q_1_Unrealized_Gain_on_Investments `Q_2_Change_in_Other_Surplus `Q_2_Unrealized_Gain_on_FOREX `Q_3_Unrealized_Gain_on_Derivatives `Q_Accumulated_Other_Comprehensive_Income `Q_Change_in_Surplus `Q_Other_Liabilities `Q_Short_Term_Bank_Deposits `R_Amounts_Due_In_Respect_Of_Called_But_Unpaid_Capital `R_Retained_Earnings `R_Total_Other_Financial_Sector_Liabilities `S_Any_Other_Assets_Not_Elsewhere_Shown `Shareholders_Equity `Total_Assets `Total_Assets_Excluding_Other_Financial_Sector_Assets `Total_Basic_Own_Funds `Total_Capital_and_Surplus `Total_Liabilities `Total_Liabilities_Excluding_Other_Financial_Sector_Liabilities `Total_Liabilities_Including_Other_Financial_Sector_Liabilities `Total_Revenue `Total_Taxes `U_Other_Financial_Sector_Assets
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`Entity;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`X;`UserValues_Arguments_Source_Accounting.html;)
         (`V;{[p;x]
            r::[#r:.L.V.user_value_list[{,/{x,/:y}'[!x;!:'x[]]}@.C[`Accounting;x`Standard];`Statement`Item;p;x];r;()]
            / se = Spanned Entities (boolean)
            e:.k.get_s (0;`A;`User;`Accounting;x`Standard;`by_Entity;:[se:`Any_Entity_=xe:x`Entity; _n; xe];`m)
            if[se
              if[|/eo:`off=e
                xe:!.k.get_s (0;`A;`User;`Accounting;x`Standard;`by_Entity)
                r,:,(1;("&0 Standard is not active for entities &1";$x`Standard;2_,/" ,",/:$xe@&eo);,`Standard`Entity)
                ] / if `off _in e
              ] / if se
            if[~se
              if[`off~e; r,:,(1;("&0 Standard is not active for entity &1";$x`Standard;$x`Entity);,`Standard`Entity)]]
            :[#r;r;_n]};)
         (`J
          .,(`Entity
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Entity;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Entity];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Entity];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Entity;,0#`];)
               (`F
                ,`Entity
                ))
             )
          )
         (`U
          ,`Entity
          )
         (`XX
          `A_1_Fixed_Income `A_2_Real_Estate `A_3_Mortgages `A_4a_Equities_Unaffiliated `A_4b_Equities_Affiliated `A_4_Equities `A_5_Derivatives `A_6_Other_Investments `A_7_Short_Term_Investments `A_Investments `B_Cash `C_Accrued_Investment_Income `D_Deposits `E_Deferred_Policy_Acquisition_Costs `F_Prepaid_Reinsurance_Premiums `G_Premiums_Receivable `H_Reinsurance_Balances_Receivable `I_1_a_Unpaid_Benefits_and_Losses_Recoverable `I_1_b_Unpaid_LAE_Recoverable `I_1_Unpaid_Benefits_and_Losses_and_LAE_Recoverable `I_2_Provision_for_Reinsurance `I_Reinsurance_Recoverable `J_Deferred_Tax_Asset `K_Property_Plant_and_Equipment `L_Other_Assets `Total_Assets `A_1_Unpaid_Losses `A_2_Unpaid_LAE `A_3_Policyholders_Account_Balances `A_4_Other_Policyholder_Funds_Payable `A_5_Future_Policy_Benefits `A_6_Policy_Claims `A_7_Policyholder_Dividends_Payable `A_Reserves_for_Benefits_Claims_Expenses `B_Unearned_Premiums `C_Drafts_Outstanding `D_Funds_Held `E_1_Underwriting_Expenses_Payable `E_2_Accrued_Underwriting_Expenses `E_3_Investment_Expenses_Payable `E_4_Accrued_Investment_Expenses `E_Accrued_Expenses_and_Other `F_Reinsurance_Balances_Payable `G_Shareholder_Dividends_Payable `H_Deferred_Tax_Liability `I_Debt `J_1_Capital_Notes `J_2_Surplus_Notes `J_Notes `K_Other_Liabilities `L_Separate_Account_Liabilities `Total_Liabilities `Shareholders_Equity `M_Preferred_Stock `N_1_Common_Stock_Par_Value `N_2_Common_Stock_Additional_Paid_In `N_Common_Stock `O_Special_Surplus `P_Other_Surplus `Q_Accumulated_Other_Comprehensive_Income `R_Retained_Earnings `A_1_a_Gross_Written_Premium `A_1_b_Change_in_Gross_Unearned_Premium `A_1_Gross_Earned_Premium `A_2_a_Assumed_Paid_Premium `A_2_b_Change_in_Assumed_Accrued_Premium `A_2_Assumed_Incurred_Premium `A_3_a_Ceded_Written_Premium `A_3_b_Change_in_Ceded_Unearned_Premium `A_3_Ceded_Earned_Premium `A_4_a_Ceded_Paid_Premium `A_4_b_Change_in_Ceded_Accrued_Premium `A_4_Ceded_Incurred_Premium `A_Net_Earned_Premium `B_Fee_Income_UL_Annuity_Policies `C_1_Net_Investment_Income `C_2_Realized_Investment_Gains `C_Profit_from_Investments `D_Other_Income `Total_Revenue `E_Interest_Credited `F_1_Gross_Benefits_and_Losses_Paid `F_2_Ceded_Benefits_and_Losses_Paid `F_Net_Benefits_and_Losses_Paid `G_1_Change_in_Gross_Benefit_and_Loss_Reserves `G_2_Change_in_Ceded_Benefit_and_Loss_Reserves `G_3_Ceded_Uncollectible_Loss_Accrual `G_4_Assumed_Uncollectible_Loss_Accrual `G_Change_in_Net_Benefit_and_Loss_Reserves `Net_Benefits_and_Losses_Incurred `H_1_a_Gross_LAE_Paid `H_1_b_Change_in_Gross_LAE_Reserves `H_1_Gross_LAE_Incurred `H_2_a_Ceded_LAE_Paid `H_2_b_Change_in_Ceded_LAE_Reserves `H_2_c_Ceded_Uncollectible_LAE_Accrual `H_2_d_Assumed_Uncollectible_LAE_Accrual `H_2_Ceded_LAE_Incurred `H_Net_LAE_Incurred `I_1_Policy_Acquisition_Costs_Paid `I_2_Change_in_DAC `I_3_Contingent_Commissions `I_Policy_Acquisition_Costs `J_Other_Expenses `K_1_Dividends_to_Policyholders `K_2_Depreciation `K_3_Foreign_Exchange_Effect `K_Other `Operating_Result `L_Financing_Costs `Profit_Before_Tax `M_1_Tax_Paid `M_2_Change_in_Tax_Payable `M_3_Change_in_Deferred_Tax `M_Tax_Incurred `Net_Income `N_Shareholder_Dividends `O_1_Change_in_Preferred_Stock `O_2_Change_in_Common_Stock `O_Change_in_Stock `P_Change_in_Accumulated_Other_Comprehensive_Income `Q_1_Change_in_Special_Surplus `Q_2_Change_in_Other_Surplus `Q_Change_in_Surplus `Change_in_Shareholders_Equity `A_Goodwill `B_Other_Intangible_Assets `C_Property_Plant_Equipment_Held_For_Own_Use `D_1_Property_Other_Than_Own_Use `D_2_Participations `D_3_Equities_Other_Than_Participations_Listed `D_4_Equities_Other_Than_Participations_Unlisted `D_5_Bonds_Government_And_Multilateral_Banks `D_6_Bonds_Corporate_Asset_Backed_Securities `D_7_Bonds_Corporate_Other `D_8_Structured_Notes `D_9_Investment_Funds `D_10_Derivatives `D_11_Long_Term_Bank_Deposits `D_12_Other_Investments `D_Investments_Other_Than_Assets_Held_For_Unit_Linked_Funds `E_Assets_Held_For_Unit_Linked_Funds `F_Cash_Deposits_To_Cedants `G_1_Uncollateralized_Loans_Made `G_2_Collateralized_Loans_Made_Other_Than_Loans_On_Policies `G_3_Loans_On_Policies `G_Mortgages_And_Loans_Made `H_1_Reinsurance_Share_Of_TP_Non_Life_Excluding_Health `H_2_Reinsurance_Share_Of_TP_Health_Similar_To_Non_Life `H_3_Reinsurance_Share_Of_TP_Health_Similar_To_Life `H_4_Reinsurance_Share_Of_TP_Life_Excluding_Health_And_Unit_Linked `H_5_Reinsurance_Share_Of_TP_Life_Unit_Linked `H_6_Other_Reinsurance_Recoverables `H_Reinsurance_Recoverables `I_SPV_Recoverables `J_Intermediaries_Recoverables `K_Insurance_Recoverables_Excluding_Intermediaries `L_Deferred_Acquisition_Costs `M_Receivables_Trade_Not_Insurance `N_Pension_Benefit_Surplus `O_1_Deductible_Temporary_Differences `O_2_The_Carry_Forward_Of_Unused_Tax_Losses_And_Unused_Tax_Credits `O_3_Cannot_Be_Realised_In_A_Reasonable_Time_Frame `O_Deferred_Tax_Assets `P_Cash_And_Cash_Equivalents `Q_Short_Term_Bank_Deposits `R_Amounts_Due_In_Respect_Of_Called_But_Unpaid_Capital `S_Any_Other_Assets_Not_Elsewhere_Shown `Total_Assets_Excluding_Other_Financial_Sector_Assets `U_Other_Financial_Sector_Assets `A_1_TP_Best_Estimate_Non_Life_Excluding_Health `A_2_Risk_Margin_Non_Life_Excluding_Health `A_Gross_Technical_Provisions_Non_Life_Excluding_Health `B_1_TP_Best_Estimate_Health_Similar_To_Non_Life `B_2_Risk_Margin_Health_Similar_To_Non_Life `B_Gross_Technical_Provisions_Health_Similar_To_Non_Life `C_1_TP_Best_Estimate_Health_Similar_To_Life `C_2_Risk_Margin_Health_Similar_To_Life `C_Gross_Technical_Provisions_Health_Similar_To_Life `D_1_TP_Best_Estimate_Life_Excluding_Health_And_Unit_Linked `D_2_Risk_Margin_Life_Excluding_Health_And_Unit_Linked `D_Gross_Technical_Provisions_Life_Excluding_Health_And_Unit_Linked `E_1_TP_Best_Estimate_Unit_Linked_Funds `E_2_Risk_Margin_Unit_Linked_Funds `E_Gross_Technical_Provisions_Unit_Linked_Funds `F_Cash_Deposits_From_Reinsurers `G_Reinsurance_Accounts_Payable `H_Derivatives `I_Deferred_Tax_Liabilities `J_Provisions_Other_Than_Technical_Provisions `K_Amounts_Owed_To_Credit_Institutions `L_Financial_Liabilities_Other_Than_Amounts_Owed_To_Credit_Institutions `M_Payables_Trade_Not_Insurance `N_Pension_Benefit_Obligations `O_Uncalled_Investments `P_Contingent_Liabilities `Q_Other_Liabilities `Total_Liabilities_Excluding_Other_Financial_Sector_Liabilities `R_Total_Other_Financial_Sector_Liabilities `Total_Liabilities_Including_Other_Financial_Sector_Liabilities `Total_Basic_Own_Funds `A_1_Paid_Up_Ordinary_Share_Capital `A_2_Called_Up_Ordinary_Share_Capital `A_Ordinary_Share_Capital `B_1_Paid_Up_Initial_Fund `B_2_Called_Up_Initial_Fund `B_3_Callable_Up_Initial_Fund `B_Initial_Fund `C_Share_Premium_Account `E_1_Adjustments_To_Assets `E_2_Adjustments_To_Technical_Provisions `E_3_Expected_Profit_In_Future_Premiums `E_4_Adjustments_To_Other_Liabilities `E_5_Other_Adjustments `E_Reconciliation_Reserve `F_Surplus_Funds_Expected_Profit_In_Future_Premiums `G_Other_Paid_In_Capital_Instruments `H_Preference_Shares `I_Subordinated_Liabilities `J_Subordinated_Mutual_Member_Accounts `K_Other_Items_Not_Specified_Above `L_Minority_Interests `D_Retained_Earnings `A_1a_Fixed_Income_HTM `A_1b_Fixed_Income_LAR `A_1c_Fixed_Income_AFS `A_1d_Fixed_Income_Trading `A_4a_Equities_Unaffiliated_AFS `A_4c_Equities_Unaffiliated_Trading `M_1_Preferred_Stock_Par_Value `M_2_Preferred_Stock_Additional_Paid_In `Q_1_Unrealized_Gain_on_Investments `Q_2_Unrealized_Gain_on_FOREX `Q_3_Unrealized_Gain_on_Derivatives `P_1_Change_in_Unrealized_Gain_on_Investments `P_2_Change_in_Unrealized_Gain_on_FOREX `P_3_Change_in_Unrealized_Gain_on_Derivatives `P_Change_in_Unrealized_Gain `L01__Bonds `L02a_Preferred_Stocks `L02b_Common_Stocks `L03__Mortgages `L04a_Occupied_Real_Estate `L04b_Real_Estate_Held_For_Income `L04c_Real_Estate_For_Sale `L05__Cash `L06__Contract_Loans `L07__Other_Investments `L08__Receivable_For_Securities `L09__AWI_Investments `L10__Cash_and_Investments_Subtotal `L11__Title_Plants `L12__Investment_Income_Due `L13a_PAB_In_Collection `L13b_PAB_Deferred `L13c_Accrued_Retro_Premium `L14a__Reinsurance_Recoverable `L14b__Funds_Deposited `L14c__Other_Reinsurance_Recoverable `L15__Amounts_Receivable_Relating_To_Uninsured_Plans `L16a__Tax_Recoverable `L16b__Net_Deferred_Tax_Asset `L17__Guarantee_Funds `L18__EDP_Equipment `L19__Furniture_and_Equipment `L20__Net_Adj_Foreign_Exchange `L21__Receivable_PSA `L22__A_H_Receivable `L23__Other_Non_Admitted `L24__AWI_Other `L25x_Assets_excluding_DTA `L25__Assets_Total `L01__Losses `L02__Reinsurance_Payable `L03__Loss_Adjustment_Expenses `L04__Commissions_Payable `L05__Other_Expenses `L06__Taxes_Licenses_Fees `L07a__Federal_Income_Taxes `L07b__Net_Deferred_Tax_Liability `L08__Borrowed_Money `L09x_Gross_Unearned_Premium `L09y_Deferred_Acquisition_Costs `L09__Unearned_Premium `L10__Advance_Premiums `L11a_Stockholder_Dividends `L11b_Policyholder_Dividends `L12__Ceded_Premium_Payable `L13__Funds_Held `L14__Amounts_Withheld `L15__Remittances `L16__Provision_Reinsurance `L17__Net_FX_Adjustments `L18__Drafts_Outstanding `L19__Payable_PSA `L20__Payable_For_Securities `L21__Amounts_Held_Under_Uninsured_Plans `L22__Capital_Notes `L23__AWI `L24__Liabilities_Total `L03x_Losses_LAE `L27__AWI_Special_Surplus `L28__Common_Capital_Stock `L29__Preferred_Capital_Stock `L30__AWI_Other `L31__Surplus_Notes `L32__Paid_In_Surplus `L33__Unassigned_Funds `L34__Treasury_Stock `L35__Policyholders_Surplus `L01__Premiums_Earned `L02__Losses_Incurred `L03__Loss_Expenses_Incurred `L04__Other_UW_Expenses `L05__AWI_UW_Deductions `L06__Total_UW_Deductions `L07__Net_Income_of_Protected_Cells `L08__Net_UW_Gain `L09a_Net_Investment_Income_Earned `L09b_Investment_Expenses `L09c_Interest_Paid `L09__Investment_Income_Earned `L10__Realized_Capital_Gains `L11__Investment_Gain `L12__Net_Gain_PAB_Charged_Off `L13__Finance_Service_Charges `L14__AWI_Misc_Income `L15__Total_Other_Income `L16__Income_B4_Divs_Taxes `L17__Policyholder_Dividends `L18__Income_B4_Taxes `L19__Federal_Income_Taxes `L20__Net_Income `L21__PP_Policyholder_Surplus `L22__Net_Income `L24__Ch_Unrealized_Capital_Gains `L25__Ch_FX_Adjustment `L26__Ch_Net_Deferred_Tax `L27__Ch_Non_Admitted_Assets `L28__Ch_Provision_Reinsurance `L29__Ch_Surplus_Notes `L31__Cumulative_Effect_Accounting_Changes `L32a_Ch_Capital_Paid_In `L32b_Capital_From_Surplus `L32c_Capital_To_Surplus `L33a_Ch_Surplus_Paid_In `L33b_Surplus_To_Capital `L33c_Surplus_From_Capital `L34__From_Home_Office `L35__Stockholders_Dividends `L36__Ch_Treasury_Stock `L37__AWI_Ch_Surplus `L38__Ch_Policyholders_Surplus `L39__Policyholders_Surplus `L23__AWI_Other `L24x_Assets_excluding_DTA `L24__Assets_Total `L01__Aggregate_Reserve_For_Life_Contracts `L02__Aggregate_Reserve_For_AH_Contracts `L03__Liability_For_Deposit_Type_Contracts `L04a__Life_Contract_Claims `L04b__AH_Contract_Claims `L04__Contract_Claims `L05__Policyholder_Dividends `L06__Provision_For_Policyholder_Dividends_And_Coupons_Payable_In_Following_Year `L07__Amount_Provisionally_Held_For_Deferred_Dividend_Policies_Not_Included_In_Line_6 `L08__Premiums_And_Annuity_Considerations_For_Life_And_AH_Contracts_Received_In_Advance `L09a__Surrender_Values_On_Canceled_Contracts `L09b__Provision_For_Experience_Rating_Refunds `L09c__Other_Amounts_Payable_On_Reinsurance `L09d__IMR `L09__Contract_Liabilities_Not_Included_Elsewhere `L10__Commissions_Due_And_Accrued `L11__Commissions_And_Expense_Allowances_Payable_On_reinsurance_Assumed `L12__General_Expenses_Due_and_Accrued `L13__Transfers_To_Separate_Accounts_Due_And_Accrued `L14__Taxes_Licenses_Fees_Due_and_Accrued `L15a__Current_Federal_And_Foreign_Income_Taxes_Including_Taxes_On_Realized_Capital_Gains `L15b__Net_Deferred_Tax_Liability `L16__Unearned_Investment_Income `L17__Amounts_Withheld_By_Company `L18__Amounts_Held_For_Agents_Acount `L19__Remittances `L20__Net_FX_Adjustments `L21__Liability_For_Benefits_For_Employees_And_Agents `L22__Borrowed_Money `L23_Stockholder_Dividends `L24a__AVR `L24b__Reinsurance_On_Unauthorized_Companies `L24c__Funds_Held_Under_Reinsurance_Treaties_With_Unauthorized_Reinsurers `L24d__Payable_To_Parent_Subsidiaries_And_Affiliates `L24e__Drafts_Outstanding `L24f__Liability_For_Amounts_Held_Under_Uninsured_Plans `L24g__Funds_Held_Under_Coinsurance `L24h__Payable_For_Securities `L24i__Capital_Notes `L24__Miscellaneous_Liabilities `L25__AWI `L26__Total_Liabilities_Excluding_Separate_Accounts `L27__From_Separate_Accounts `L28__Total_Liabilities `L29__Common_Capital_Stock `L30__Preferred_Capital_Stock `L31__AWI_Other `L32__Surplus_Notes `L33__Paid_In_Surplus `L34__AWI_Special_Surplus `L35__Unassigned_Funds `L36__Treasury_Stock `L37__Surplus `L01__Premiums_And_Annuity_Considerations `L02__Considerations_For_Supplementary_Contracts_With_Life `L03a_Investment_Income `L03b_Investment_Expenses `L03c_Interest_Paid `L03__Net_Investment_Income `L04__Amortization_Of_IMR `L05__Separate_Accounts_Net_Operation_Gain `L06__Commissions_and_Expense_Allowances_On_Reinsurance_Ceded `L07__Reserve_Adjustments_On_Reinsurance_Ceded `L08a__Income_From_Fees_From_Separate_Accounts `L08b__Charges_And_Fees_For_Deposit_Type_Contracts `L08c__AWI_For_Miscellaneous_Income `L08__Miscellaneous_Income `L09__Total_Lines_1_To_8 `L10__Death_Benefits `L11__Matured_Endowments `L12__Annuity_Benefits `L13__Disability_Benefits_And_Benefits_Under_AH_Contracts `L14__Coupons_Guaranteed_Annual_Pure_Endowments `L15__Surrender_Benefits_And_Withdrawals_For_Life_Contracts `L16__Group_Conversions `L17__Interest_And_Adjustments_On_Contracts_Or_Deposit_Funds `L18__Payments_On_Supplementary_Contracts_With_Life_Contingencies `L19__Increase_In_Aggregate_Reserves_For_Life_And_AH `L20__Total_Lines_10_To_19 `L21__Commissions `L22__Commissions_And_Expense_Allowances_On_Reinsurance_Assumed `L23__General_Insurance_Expenses `L24__Insurance_Taxes_Licenses_And_Fees `L25__Increase_In_Loading_On_Deferred_And_Uncollected_Premiums `L26__Net_Transfer_To_Separate_Accounts_Net_Of_Reinsurance `L27__AWI_For_Deductions `L28__Total_Lines_20_To_27 `L29__Net_Gain_Before_Dividends_To_Policyholders_And_Taxes `L30__Dividends_To_Policyholders `L31__Net_Gain_After_Dividends_To_Policyholders `L32__Federal_Income_Taxes `L33__Net_Gain_After_Dividends_To_Policyholders_And_Taxes `L34__Net_Realized_Capital_Gains `L35__Net_Income `L36__PP_Capital_And_Surplus `L37__Net_Income `L38__Ch_Unrealized_Capital_Gains `L39__Ch_FX_Adjustment `L40__Ch_Net_Deferred_Tax `L41__Ch_Non_Admitted_Assets `L42__Ch_Provision_Reinsurance_In_Unauthorized_Companies `L43__Ch_Reserve_Due_To_Ch_Valuation_Basis `L44__Ch_in_AVR `L45__Ch_Treasury_Stock `L46__Surplus_Withdrawn_From_Separate_Accounts `L47__Other_Ch_Surplus_In_Separate_Accounts `L48__Ch_Surplus_Notes `L49__Cumulative_Effect_Accounting_Changes `L50a_Ch_Capital_Paid_In `L50b_Ch_Capital_Transferred_From_Surplus `L50c_Ch_Capital_Transferred_To_Surplus `L51a_Surplus_Adjustment_Paid_In `L51b_Surplus_Adjustment_Transferred_To_Capital `L51c_Surplus_Adjustment_Transferred_From_Capital `L51d_Surplus_Adjustment_Due_To_Reinsurance `L52__Stockholders_Dividends `L53__AWI_Ch_Surplus `L54__Net_Ch_Capital_And_Surplus `L55__Capital_And_Surplus `A_Subscribed_Capital_Unpaid `B_Intangible_Assets `C_1_Property `C_2_Investments_in_Affiliates `C_3_1_a_Directly_Held_Shares `C_3_1_b_Fonds `C_3_1_Shares `C_3_2_Bearer_Bonds `C_3_3_Mortgages `C_3_4_Other_Loans `C_3_5_Deposits_with_Banks `C_3_6_Miscellaneous_Other_Investments `C_3_Other_Investments_Total `C_Investments `D_Separate_Account_Investments `E_1_Receivable_on_Direct_Insurance `E_2_Receivable_on_Reinsurance `E_3_Other_Receivables `E_Total_Amounts_Receivable `F_1_Fixed_Assets_and_Inventories `F_2_Current_Bank_Accounts `F_3_Miscellaneous_Other_Assets `F_Total_Other_Assets `G_1_Accrued_Interest_and_Rent `G_2_Other_Prepaid_Expenses `G_Total_Prepaid_Expenses `H_Total_Assets `C_Subordinate_Liabilities `D_Special_Items_with_Reserve_Character `E_1_a_Gross_Unearned_Premium `E_1_b_Ceded_Unearned_Premium `E_1_Net_Unearned_Premium `E_2_a_Gross_Premium_Reserves `E_2_b_Ceded_Premium_Reserves `E_2_Net_Premium_Reserves `E_3_a_Gross_Provision_for_Outstanding_Claims `E_3_b_Ceded_Provision_for_Outstanding_Claims `E_3_c_Net_Drafts_Outstanding `E_3_Net_Provision_for_Outstanding_Claims `E_4_a_Gross_Reserve_for_Premium_Refunds `E_4_b_Ceded_Reserve_for_Premium_Refunds `E_4_Net_Reserve_for_Premium_Refunds `E_5_Claim_Equalization_Reserves `E_6_a_Other_Gross_Insurance_Reserves `E_6_b_Other_Ceded_Insurance_Reserves `E_6_Other_Insurance_Reserves `E_Underwriting_Reserves `F_Reserves_For_Separate_Accounts `G_1_Provision_for_Pension_Liabilities `G_2_Taxes_Payable `G_3_Intra_Company_Liabilities `G_Other_Provisions `J_Financing_Costs `I_1_Amounts_Payable_on_Direct_Insurance `I_2_Amounts_Payable_on_Reinsurance `I_3_Liabilities_to_Banks `I_4_Debt_and_Notes `I_5_Miscellaneous_Liabilities `I_Total_Other_Liabilities `K_Deferred_Income `L_Total_Capital_and_Surplus_and_Liabilities `A_1_1_Preferred_Stock `A_1_2_Common_Stock `A_1_3_Special_Surplus `A_1_Subscribed_Capital `A_2_Capital_Reserve `A_3_1_Legal_Reserve `A_3_2_Other_Revenue_Reserves `A_3_Revenue_Reserve `A_4_Net_Retained_Profit `A_Shareholders_Equity `B_Equity_from_Profit_Participation_Rights `Total_Capital_and_Surplus `A_01_a_Gross_Written_Premium `A_01_b_Ceded_Written_Premium `A_01_c_Change_in_Gross_Unearned_Premium `A_01_d_Change_in_Ceded_Unearned_Premium `A_01_Net_Earned_Premium `A_02_Technical_Interest `A_03_Other_Underwriting_Income `A_04_a_aa_Gross_Claims_Paid `A_04_a_bb_Ceded_Claims_Paid `A_04_a_Net_Claims_Paid `A_04_b_aa_Change_in_Gross_Loss_and_LAE_Reserves `A_04_b_bb_Change_in_Ceded_Loss_and_LAE_Reserves `A_04_b_Change_in_Net_Loss_and_LAE_Reserves `A_04_Net_Incurred_Claims `A_05_Change_in_Other_Net_Underwriting_Provisions `A_06_Payments_to_Reserve_for_Premium_Refunds `A_07_a_Gross_Underwriting_Expenses `A_07_b_Ceded_Underwriting_Expenses `A_07_Underwriting_Expenses `A_08_Other_Underwriting_Expenses `A_09_Subtotal `A_10_Change_in_Claim_Equalization_Reserves `A_11_Underwriting_Result `B_01_Income_from_Investments `B_02_Investment_Expenses `B_03_Technical_Interest `B_04_Other_Income `B_05_Other_Expenses `B_06_Result_from_Ordinary_Business_Activities `B_07_Extraordinary_Income `B_08_Extraordinary_Expenses `B_09_Extraordinary_Result `B_10_Taxes_on_Income `B_11_Other_Taxes `B_12_Net_Income `B_13_Retained_Profit_Carried_Forward `B_14_a_Withdrawal_from_Preferred_Stock `B_14_b_Withdrawal_from_Common_Stock `B_14_c_Withdrawal_from_Special_Surplus `B_14_d_Withdrawal_from_Capital_Reserve `B_14_Withdrawal_from_Capital_Reserve `B_15_a_Withdrawal_from_Legal_Reserve `B_15_b_Withdrawal_from_Other_Revenue_Reserves `B_15_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_15_Withdrawal_from_Revenue_Reserve `B_16_Net_Retained_Profit `A_02_Premiums_from_Reserve_for_Premium_Refunds `A_03_a_Income_from_Affiliates `A_03_b_Realized_Gains `A_03_c_Other_Investment_Income `A_03_Income_from_Investments `A_04_Non_Realized_Gain_from_Investments `A_05_Other_Underwriting_Income `A_06_a_Net_Claims_Paid `A_06_b_Change_in_Net_Provision_for_Outstanding_Claims `A_06_Net_Claims_Incurred `A_07_Change_in_Other_Net_Underwriting_Provisions `A_08_Payments_to_Reserve_for_Premium_Refunds `A_09_Underwriting_Expenses `A_10_Investment_Expenses `A_11_Non_Realized_Loss_from_Investments `A_12_Other_Underwriting_Expenses `A_13_Underwriting_Result `B_01_Other_Income `B_02_Other_Expenses `Other_Net_Result `B_03_Ordinary_Result `B_04_Extraordinary_Income `B_05_Extraordinary_Expenses `B_06_Extraordinary_Result `B_07_Taxes_On_Income `B_08_Other_Taxes `Total_Taxes `B_09_Profit_Transfers `B_10_Net_Income `B_11_Retained_Profit_Carried_Forward `B_12_a_Withdrawal_from_Preferred_Stock `B_12_b_Withdrawal_from_Common_Stock `B_12_c_Withdrawal_from_Special_Surplus `B_12_d_Withdrawal_from_Capital_Reserve `B_12_Withdrawal_from_Capital_Reserve `B_13_a_Withdrawal_from_Legal_Reserve `B_13_b_Withdrawal_from_Other_Revenue_Reserves `B_13_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_13_d_Withdrawal_from_Shareholder_Equity `B_13_Withdrawal_from_Revenue_Reserve `B_14_Net_Retained_Profit
          )))
      (`Regulatory
       .((`Entity
          `Entity_1
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Entity;0#`];))
         (`Regulator
          `BCAR
          .,(`V;{[p;x].L.V.active_module["Regulator or Rating Agency";p;:[x~`SaP;`Standard_and_Poors;x~`BCAR;`AM_Best;x]]};))
         (`Timing;`Final;.())
         (`Item;`Surplus;.())
         (`Period;`Current;.()))
       .((`X;`UserValues_Arguments_Source_Regulatory.html;)
         (`j
          .((`c;`Slot;)
            (`cell
             .((`Entity
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Entity_ `Any_Entity_ `Entity_1
                   ))
                )
               (`Regulator
                .((`c;`combo;)
                  (`o
                   `BCAR `EU_Solvency_I
                   )
                  (`ol
                   (`BCAR `EU_Solvency_I
                    `AM_Best `EU_Solvency_I)
                   ))
                )
               (`Timing
                .((`c;`combo;)
                  (`o
                   `Pre_Trade `Final
                   ))
                )
               (`Item
                .((`c;`combo;)
                  (`o
                   `Adjusted_Surplus `Annual_Gross_Incurred_Losses `Annual_Gross_Premium `Annual_Net_Incurred_Losses `Average_Gross_Incurred_Losses `B1_Investment_Risk_Fixed_Income_Securities `B3_Interest_Rate_Risk `B4_Credit_Risk `B5_Reserve_Risk `B6_Premium_Risk `B7_Business_Risk `Capital_Adequacy_Ratio `Deferred_Acquisition_Costs `Gross_Incurred_Loss_LAE_Net_SS `Gross_Loss_Threshold `Gross_Premium `Gross_Premium_Threshold `Hidden_Reserves `Inflation_Since_Last_Adjustment `Loss_Reserve_Equity `Losses_Two_Step_Sum `Min_Loss_Ratio_Net_To_Gross `Net_Incurred_Loss_LAE_Net_SS `Net_Required_Capital `Premium_Two_Step_Sum `Solvency_Debit `Solvency_Debit_Losses `Solvency_Debit_Premium `Solvency_Margin `Solvency_Surplus `Spread_of_Risk_Factor_B1_B2 `Subordinate_Liabilities_Disallowed `Sum_of_Capital_and_Reserves `Surplus
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                )
               (`Transformation
                .((`c;`combo;)
                  (`o
                   `Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN `Transform_1
                   ))
                ))
             )
            (`editor;1;)
            (`rl
             .,(`Regulator;`"Regulator or Rating Agency";)
             )
            (`u
             .,(`Entity;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          )
         (`V;{[p;x]
            r::[#r:.L.V.user_value_list[.C`Regulatory_List;`Regulator`Timing`Item;p;x];r;()]
            e:.k.get_s (0;`A;`User;`Regulatory;x`Regulator;`Entity_Specific_Parameters;:[se:`Any_Entity_=xe:x`Entity; _n; xe];`m)
            if[se
              if[|/eo:`off=e
                xe:!.k.get_s (0;`A;`User;`Regulatory;x`Regulator;`Entity_Specific_Parameters)
                r,:,(1;("&0 Standard is not active for entities &1";$x`Standard;2_,/" ,",/:$xe@&eo);,`Standard`Entity)
                ] / if `off _in e
              ] / if se
            if[~se
              if[`off~e; r,:,(1;("&0 regulatory is not active for entity &1";$x`Regulator;$x`Entity);,`Regulatory`Entity)]]
            :[#r;r;_n]};)
         (`J
          .,(`Entity
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Entity;,0#`];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Entity];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Entity];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Entity;,0#`];)
               (`F
                ,`Entity
                ))
             )
          )
         (`U
          ,`Entity
          )
         (`XX
          `Surplus `Deferred_Acquisition_Costs `Adjusted_Surplus `Loss_Reserve_Equity `Spread_of_Risk_Factor_B1_B2 `B1_Investment_Risk_Fixed_Income_Securities `B3_Interest_Rate_Risk `B4_Credit_Risk `B5_Reserve_Risk `B6_Premium_Risk `B7_Business_Risk `Net_Required_Capital `Capital_Adequacy_Ratio `Gross_Loss_Threshold `Gross_Premium_Threshold `Inflation_Since_Last_Adjustment `Gross_Premium `Gross_Incurred_Loss_LAE_Net_SS `Net_Incurred_Loss_LAE_Net_SS `Average_Gross_Incurred_Losses `Annual_Gross_Incurred_Losses `Annual_Net_Incurred_Losses `Annual_Gross_Premium `Premium_Two_Step_Sum `Min_Loss_Ratio_Net_To_Gross `Solvency_Debit_Premium `Losses_Two_Step_Sum `Solvency_Debit_Losses `Solvency_Debit `Sum_of_Capital_and_Reserves `Subordinate_Liabilities_Disallowed `Hidden_Reserves `Solvency_Surplus `Solvency_Margin
          )))
      (`Generic
       .((`Controls
          .((`Confidence;1;.())
            (`Period;`Current;.())
            (`Summary;`sum;.()))
          .,(`j
             .((`c;`Slot;)
               (`cell
                .((`Confidence
                   .,(`c;`check;)
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   )
                  (`Summary
                   .((`c;`combo;)
                     (`o
                      `sum `min `max `count `average `stdev
                      )
                     (`ol
                      (`sum `min `max `count `average `stdev
                       `Sum `Minimum `Maximum `Count `Average `"Standard Deviation")
                      ))
                   ))
                )
               (`rl
                .((`Confidence;`"Validation Warning";)
                  (`Period;`Period;)
                  (`Summary;`Summarization;))
                )
               (`rltip
                .((`Confidence;`"<html>If checked (default), use of generic user value creates a validation warning.</html>";)
                  (`Period;`"<html>Use current or previous value as input?</html>";)
                  (`Summary;`"<html>Summarization method for aggregating shapes</html>";))
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             ))
         (`Source
          .((`Axis
             ,`
             .,(`V;{[p;x]r:{:[x~_n;x;x,,,,y]}'[axis_list[p]'x;!#x]; :[#r:r _dv _n;r;_n]};))
            (`Summary
             ,`sum
             .()))
          .,(`j
             .((`c;`Table;)
               (`l;`"Tree-Structure Source of Data";)
               (`cell
                .,(`Summary
                   .((`c;`combo;)
                     (`o
                      `sum `min `max `count `average `stdev
                      )
                     (`ol
                      (`sum `min `max `count `average `stdev
                       `Sum `Minimum `Maximum `Count `Average `"Standard Deviation")
                      ))
                   )
                )
               (`cl
                .((`Summary;`Summarization;)
                  (`Axis;`Variable;))
                )
               (`p
                .((`Summary;`sum;)
                  (`Axis;`;))
                )
               (`cltip
                .,(`Summary;`"<html>Summarization method for aggregating axes with multiple items</html>";)
                )
               (`g
                .,(`Axis;{while[#x _ss ", ";x:_ssr[x;", ";","]];`$@[x;&" "~'x;:;"_"]};)
                )
               (`u
                .,(`Axis;{if[~#Y:$y;:("";y)]; Y:1_'(Y _ss ",") _ Y:",",Y
		:[|/{*@[.:;,(`$$x;);:]}'[Y];	("Each item in the input list must begin with a-z, A-Z and contain only a-z, A-Z, 0-9, and space";x)
					("";y)]};)
                )
               (`f
                .,(`Axis;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
                )
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )))
       .((`j
          .,(`c;`panel;)
          )
         (`X;`UserValues_Arguments_Source_Generic.html;)
         (`V;{[p;x]:[x.Controls.Confidence;,(0;"Generic User Values should be used in consultation with the professional services staff of Conning")]};)))
      (`User_Value
       .((`User_Value
          `Zero
          .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`User_Value;`Zero `One `Period];))
         (`Period;`Current;.()))
       .((`j
          .((`c;`Slot;)
            (`l;`"User Values";)
            (`cltip
             .,(`User_Value;`"<html>&nbsp;User Value (avoiding circularities) or Zero, One or Period&nbsp;</html>";)
             )
            (`cell
             .((`User_Value
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_User_Value_ `Zero `One `Period `User_Value_1
                   ))
                )
               (`Period
                .((`c;`combo;)
                  (`o
                   `Current `Previous
                   ))
                ))
             )
            (`editor;1;)
            (`u
             .,(`User_Value;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
             )
            (`popup
             .((`Cut;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`cut;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
               (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
               (`Copy_All;{[f;junk]c:name.c v:f .j.v;of[c;`copy_all;(v;)]}[{@[x;-1+#x,:();~:]}-2_];)
               (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
               (`s99;" ";)
               (`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };))
             .,(`j
                .,(`ne
                   ((,`Cut
                     ,`Copy
                     ,`Copy_All
                     ,`Paste
                     ,`s99
                     ,`Copy_Location)
                    0 0 1 0 0 0)
                   )
                ))
            (`krd;{
 c:cl v:.j.v;p:!att[v;`popup]
 if[(~1~the[c;`alwaysSel])&empty s:att[v;`s]
  k:(+,p;-1_@[&q,(1+#p)-q:p?`s99;p?`Append;:;1])
  if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
  .[`;jd[v],`popup.`j`ne;:;]
  :_n]
 k:++(+,p;:[(~name.rank v)|#s   ;:[#b:&(o:`Paste`Paste_Transpose)_lin p
                                   @[&0,#p;p?/:o b;:;|/((),the[cl v;`cbformats])_lin .w.cbformats[]]
                                   &0,#p]
                                 0])
 if[`Copy_All _in,/*k;k[1;(,/*k)?`Copy_All]:1]
 if[`Append _in,/*k;k[1;(,/*k)?`Append]:1]
 k:.[k;(1;((,/*k)?`s99)_!#*k);:;1]
 .[`;jd[v],`popup.`j`ne;:;k]
};))
          )
         (`X;`UserValues_Arguments_Source_UserValues.html;)
         (`J
          .,(`User_Value
             .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`User_Value;,`Zero `One `Period];)
               (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`User_Value];)
               (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`User_Value];)
               (`A;{[    d;e;a;u]	(d;e)};)
               (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`User_Value;,`Zero `One `Period];)
               (`F
                ,`User_Value
                ))
             )
          )
         (`U
          ,`User_Value
          )))
      (`Reference
       .((`display
          ,`".."
          .((`j
             .((`c;`vector;)
               (`p;`;)
               (`l;`"Input Reference";)
               (`cell
                .((`c;`combo;)
                  (`ol;{ / Reference.display..j.cell.ol
/          `0:"call: ",(5:x),"\n" / used to guess patterns of calls
          if[~x~_n; ::[-3=tx:4:x; `$x
                       0=tx; (.k`get_path_of_labels)@`$x
                         x]]
          if[~t:4:.j.i_ / if list of values available
            h:*.j.i_
            .j.i_:1_ .j.i_
            if[~#.j.i_; .j.i_:_n]
            :h] / return first (next) result
          v:`. .j.v
          if[`. du:(.k.attr .j.v),`du / if Display Uninitialized
            vv:`.(-1_.j.v),`value
            v:(.k`path_to_labels)@vv.s / Screen Value
            if[2<#vv.si
              v:(-1_ v),`$.u.dws'$vv.si@2
              ] / if 2<#vv.si
            .[`;.j.v;:[;v]] / should be a trigger interaction, here
            .[`;du;:;0]
            ] / if `. du:(.k.attr .j.v),`du / if Display Uninitialized
          h:(.k`get_path_of_labels)[v]
          h:h[;;0] / retain just the labels
          v:@[v;i:&~v _in'(#v)#h;:[;`".."]]
          if[#i; .[`;.j.v;:[;v]]] / if vector has changed, store the updated version
          if[(#v)<#h; h:(#v)#h]
          i:&v=`".." / indices where blank required
          i:i@&~`".."_in/:h@i / only those where blank not already available
          h:@[h;i;`"..",]
          if[t=1 / if just completed call to j.u
            if[~.j.i_<0; c:h@.j.i_; .j.i_:1_ h,,c; :*h]
            if[ .j.i_<0; c:h@-.j.i_+1; .j.i_:_n; :c]
            ] / if t=1
          / assumed to be initial display call from here on
          .j.i_::[1<#h; 1_ h; _n]
          *h};)
                  (`o;;))
                )
               (`u;{ / Reference.display..j.u
         if[x~y; .j.i_:-1-*.j.i; :x] / signal value
         .j.i_:*.j.i
         lp:(.k`get_path_of_labels)[v:.[`. .j.v;.j.i;:[;y]]]
         pc:#lp / Path Count
         v:(+/&\(pc#v)_lin'lp[;;0])#v / keep only those elements of current value that are in the path
         if[pc>#v / can never happen if last element of v was already a blank
           v,:`".." ]
         .[`;ts:(.k.attr .j.v),`ts;:;0] / turn trigger off
         .[`;.j.v;:[;v]]
         .[`;ts;:;1] / turn trigger on
         y};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`editor;1;)
            (`t;"if[display..ts&~value.o~display\n         value.o:display\n         value.s:(.k`labels_to_path)[display]\n         if[value.a:`\"..\"_in value.s; value[`a`ai`si]:_n]\n         if[~value.a~_n\n           value.si:{(&~=':4::'\"|\",x)_ x}[value.s] / temp storage\n           value.a:1_.k.tag[.S;0,`A,*value.si]\n           if[2=#value.si; value.a:value.a,value.si@1] / simple index present\n           if[3>#value.si; value[`ai`si]:_n] / extended data not present\n           if[2<#value.si / extended data present\n             value.s:*value.si\n             value.ai:1_.k.tag[.S;0,`A,(-1_ value.s),`label] / only `label currently supported by get_paths_into_structure\n             value.si[0]:(-1_ value.si[0]),-1#value.ai\n             ] / if 2<#value.si\n           ] / if not invalid path\n         ]";)
            (`ts;1;)
            (`du;1;)
            (`H_t;"if[display..ts&~value.o~display\n         value.o:display\n         value.s:(.k`labels_to_path)[display]\n         if[value.a:`\"..\"_in value.s; value[`a`ai`si]:_n]\n         if[~value.a~_n\n           value.si:{(&~=':4::'\"|\",x)_ x}[value.s] / temp storage\n           value.a:1_.k.tag[.S;0,`A,*value.si]\n           if[2=#value.si; value.a:value.a,value.si@1] / simple index present\n           if[3>#value.si; value[`ai`si]:_n] / extended data not present\n           if[2<#value.si / extended data present\n             value.s:*value.si\n             value.ai:1_.k.tag[.S;0,`A,(-1_ value.s),`label] / only `label currently supported by get_paths_into_structure\n             value.si[0]:(-1_ value.si[0]),-1#value.ai\n             ] / if 2<#value.si\n           ] / if not invalid path\n         ]";)))
         (`value
          .((`s
             ,`".."
             )
            (`o;;)
            (`a;;)
            (`ai;;)
            (`si;;))
          .,(`B;`Hidden;)))
       .((`j
          .((`c;`panel;)
            (`border;0;)
            (`a;{(!x)@&test'x[.;`B]};))
          )
         (`V;{[p;x] / reference_vector..V
    r::[`".."_in x.display
          (1;"incomplete reference argument")
        `".."_in t:(.k`labels_to_path)@x.display
          (1;"User Value refers to a missing input (path may be truncated)")
        ~(4:.k.get_s (.C`get_mod_s_path)0,`A,t)_in 1 2 / can't use value.si: removed prior to validation
          (1;"Non-scalar argument")
        ()]
    :[#r;,r;_n]};)
         (`X;`UserValues_Arguments_Source_InputReference.html;)
         (`J
          .((`Asset_Class
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Claim_Cost_Index
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Compression
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Consolidation
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Counterparty
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Entity
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Financing_Instrument
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Function
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Greek
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`HGB_Equalization_Line
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Inner_Loop
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Library_Pattern
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Life_Product
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Life_Table
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Lookup
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Market_Index
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Peril
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Plan
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Portfolio
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Product
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Product_Group
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`QIS5_Line
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`QIS5_Region
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Return_Class
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Risk_Class
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`State
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Supplemental_Model
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Transform
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Transition
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Treaty
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`Treaty_Group
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`User_Relative_Value
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             )
            (`User_Value
             .((`C;{[d;e;a;u](d;e)};)
               (`A;{[d;e;a;u](d;e)};)
               (`L;{[d;e;a;u](d;e)};)
               (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
               (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
             ))
          )
         (`U
          `Asset_Class `Claim_Cost_Index `Compression `Consolidation `Counterparty `Entity `Financing_Instrument `Function `Greek `HGB_Equalization_Line `Inner_Loop `Library_Pattern `Life_Product `Life_Table `Lookup `Market_Index `Peril `Plan `Portfolio `Product `Product_Group `QIS5_Line `QIS5_Region `Return_Class `Risk_Class `State `Supplemental_Model `Transform `Transition `Treaty `Treaty_Group `User_Relative_Value `User_Value
          )))
      (`Prior_Arguments
       .((`value
          `x
          .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{!.k.get_s (6#x),`Arguments`Source}];))
         (`initial
          `"0."
          .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
       .,(`j
          .((`c;`slot;)
            (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
            (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
            (`rl
             .((`value;`"Current Value";)
               (`initial;`"Initial Value";))
             )
            (`popup
             .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
             ))
          ))
      (`Combination
       .((`m
          `pseudo
          .((`C;`model;)
            (`j
             .((`l;`"Combination Type";)
               (`o
                `pseudo `Spline `Function `Transform
                )
               (`ol
                (`pseudo `Spline `Function `Transform
                 `"Formulaic Expression" `"Piecewise Linear" `"Library Function" `"Library Transform")
                )
               (`fill;`h;)
               (`c;`combo;)
               (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M;();)
            (`P;;)))
         (`pseudo
          ,"x"
          .((`j
             .((`c;`Text;)
               (`l;`"Formulaic Expression";)
               (`wy;0.7;)
               (`f;{ / to_local[]
  if[(x~_n)|~#x; :x] / if no string to translate
  as:sfsm.split x / Alternating Segments - data,string,data,etc
  if[~#as; :x]  / no modification if no text
  ,/@[as;2*!-_-(#as)%2;decode_source]};)
               (`g;{ / to_canon[]
  if[(x~_n)|~#x; :x] / if no string to translate
  as:sfsm.split x / Alternating Segments - data,string,data,etc
  if[~#as; :x]  / no modification if no text
  ,/@[as;2*!-_-(#as)%2;encode_source]};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`Y;`formulaic_expression;)
            (`M
             ,`pseudo
             )))
         (`Spline
          .((`Input
             0 1.0
             .,(`V;{[p;x]:[~(x~x@<x)&/~x<0.;(1;"Must be a sorted vector of non-negative values")]};))
            (`Output
             0 0.0
             .()))
          .((`j
             .((`c;`Table;)
               (`cltip
                .,(`Input;`"Input values must be sorted from smallest to biggest";)
                )
               (`f
                .((`Output;18.6;)
                  (`Input;18.6;))
                )
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`p
                .((`Input;1.0;)
                  (`Output;0.0;))
                )
               (`l;`"Spline (with linear interpolation)";)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`P;1;)
            (`F
             .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`Input `Output;0#`;0 0.0;();0;0];)
             )
            (`V;{[p;x]:[~#x.Input;(1;"Must contain at least one row")]};)
            (`M
             ,`Spline
             )))
         (`Function
          `Zero
          .((`U;`Function;)
            (`j
             .((`c;`combo;)
               (`o
                `Unspecified_ `New_Function_ `Zero `One `Pi `NA `If `Function_1
                )
               (`u;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`J
             .((`C;{[c;x;d;e;a;u]	d::[d~_n;*x,u;d]
 			e:.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u]
 			e:.[e;(`j;`u);:[;c]]
 			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};`Zero `One `Pi `NA `If];)
               (`D;{  [d;e;a;u]	if[d _in u;d:`Unspecified_];(d;e)};)
               (`R;{  [d;e;a;u]	(:[d _in !u;u@d;d];e)};)
               (`A;{  [d;e;a;u]	(d;e)};)
               (`L;{[x;d;e;a;u]	(d;.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u])}[`Zero `One `Pi `NA `If];))
             )
            (`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Function;`Zero `One `Pi `NA `If];)
            (`M
             ,`Function
             )))
         (`Transform
          `Linear
          .((`U;`Transform;)
            (`j
             .((`c;`combo;)
               (`o
                `Unspecified_ `New_Transform_ `Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN `Transform_1
                )
               (`u;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`J
             .((`C;{[c;x;d;e;a;u]	d::[d~_n;*x,u;d]
 			e:.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u]
 			e:.[e;(`j;`u);:[;c]]
 			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];)
               (`D;{  [d;e;a;u]	if[d _in u;d:`Unspecified_];(d;e)};)
               (`R;{  [d;e;a;u]	(:[d _in !u;u@d;d];e)};)
               (`A;{  [d;e;a;u]	(d;e)};)
               (`L;{[x;d;e;a;u]	(d;.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u])}[`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];))
             )
            (`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Transform;`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];)
            (`M
             ,`Transform
             )))
         (`Single_Argument
          `x
          .((`j
             .((`c;`scalar;)
               (`f;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`fill;`h;)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             `Spline `Transform
             )
            (`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
         (`Argument_List
          ,`x
          .((`j
             .((`c;`Vector;)
               (`f;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`p;`x;)
               (`fill;`b;)
               (`popup
                .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                ))
             )
            (`M
             ,`Function
             )
            (`V;{[p;x]r:();r,:(,/function_validation[(!.k.get_s (6#p),`Arguments`Source)_dv p@8;p]'x)_dv _n;:[#r;r;_n]};)))
         (`Initial
          .((`m
             `func
             .((`C;`model;)
               (`j
                .((`l;`"Initial Value";)
                  (`o
                   `func `value
                   )
                  (`ol
                   (`func `value
                    `"Apply Function" `"Fixed Initial Value")
                   )
                  (`fill;`h;)
                  (`c;`combo;)
                  (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
                  (`popup
                   .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                   ))
                )
               (`M;();)
               (`P;;)))
            (`func

             .((`j
                .((`c;`panel;)
                  (`l;`;)
                  (`border;0;))
                )
               (`M
                ,`func
                )))
            (`value
             0.0
             .((`j
                .((`c;`Scalar;)
                  (`f;18.6;)
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`l;`"Fixed Initial Value";)
                  (`fill;`h;)
                  (`popup
                   .,(`Copy_Location;{[x]
 s:`. (-1_ .j.v),`s
 if[~location:~(s~_n)&~(4:`. v:attr -2_ .j.v) _in 1 2 3 4 -3; .j.ok.i"A location must be selected. No action taken."]
 if[location
   is:((`. `k`Main`split`right.`II),(5_ v)),/::[s~_n;,();s]
   iu:1_'labels'sub'is
   ia:1_'tag[.S]'is
   .w.cbwrite[`text`DFA_;(1_,/"\n",/:{,/"\\",/:$x}'iu;.+(`User_Path`S_Path`A_Path;(iu;is;ia)))]
   ]
 };)
                   ))
                )
               (`M
                ,`value
                ))))
          .((`j
             .((`c;`panel;)
               (`border;0;)
               (`l;`;)
               (`wy;1e-010;)
               (`a
                `m `func
                ))
             )
            (`M
             `pseudo `Spline `Function `Transform
             )
            (`L;0;))))
       .((`j
          .((`c;`panel;)
            (`wy;0.5;)
            (`a
             `m `pseudo `Initial
             ))
          )
         (`P;1;)
         (`X;`UserValues_Arguments.html;))))
    .((`P;1;)
      (`j
       .((`c;`panel;)
         (`a;`Random_Draw;))
       )))
 .((`j
    .((`c;`panel;)
      (`border;0;)
      (`l;`"Source Details";)
      (`a;`x;))
    )
   (`D
    .((`l;1;)
      (`p;`Argument_List;)
      (`d
       .((`Path_Number

          .,(`X;`UserValues_Arguments_Source_PathNumber.html;))
         (`Fixed
          .((`Period
             ,`"2011 +"
             .,(`T;;))
            (`Value
             ,0.0
             .,(`T;;)))
          .((`j
             .((`l;`"User Time Series";)
               (`c;`table;)
               (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
               (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
               (`p
                .((`Value;0.0;)
                  (`Period;`;))
                )
               (`f;18.6;)
               (`e
                .,(`Period;0;)
                )
               (`bg
                .,(`Period;`e;)
                )
               (`b
                .,(`Period;`n;)
                )
               (`fixed;1;)
               (`popup
                .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                  (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                  (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                  (`Append_Years
                   .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                     (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                     (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                     (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                   )
                  (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                  (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                  (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];))
                ))
             )
            (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
            (`C;`Future;)
            (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
            (`X;`UserValues_Arguments_Source_UserTimeSeries.html;)))
         (`by_Path
          .((`Mechanics
             .((`Type;`Stock;.())
               (`Repeats;`All;.()))
             .,(`j
                .((`c;`Slot;)
                  (`cell
                   .((`Type
                      .((`c;`combo;)
                        (`o
                         `Stock `Flow `Rate
                         ))
                      )
                     (`Repeats
                      .((`c;`combo;)
                        (`o
                         `Last `All `None
                         )
                        (`ol
                         (`Last `All `None
                          `"Repeat Last Path" `"Repeat All Paths" `"Unspecified Paths are Zero")
                         ))
                      ))
                   ))
                ))
            (`Data
             .((`m
                `Internal
                .((`C;`model;)
                  (`j
                   .((`o
                      `Internal `External
                      )
                     (`l;`"Data Source";)
                     (`ol
                      (`Internal `External
                       `"Internal Data" `"Batch Import File")
                      )
                     (`fill;`h;)
                     (`c;`combo;)
                     (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};))
                   )
                  (`M;();)
                  (`P;;)))
               (`Internal
                .((`Path;!0;.())
                  (`Date
                   !0
                   .,(`V;{[p;x]:[#a:&(x~\:0I)|~1=4::'x;(1;"Not a valid date";,a)]};))
                  (`Value;0#0.0;.()))
                .((`V;{[p;x]:[#a:,/a@&0<#:'a:1_'=+x`Path`Date;(0;"Duplicate path/date pairs are ignored";,(`Path`Date;a))]};)
                  (`j
                   .((`c;`Table;)
                     (`f
                      .((`Value;9.6;)
                        (`Path;{9$_ x};)
                        (`Date;{ / .r.date.f
 if[(~1=4:x)|(x<0)|x~0I; :"Invalid date"]
 d:0 100 100 _vs x                                / separate date into components
 s:date.format_string[]                           / separate format string into components
 i:&s _lin !date.fparts                           / which format components represent parts of the date
 s[i]:{date.fparts[y]x}[d]'s i                    / replace format components with date components
 ,/$s};))
                      )
                     (`g
                      .((`Value;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                        (`Path;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                        (`Date;{:[*r:.[date.g_;,x;:];0I;r 1]};))
                      )
                     (`u
                      .((`Value;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                        (`Path;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                        (`Date;{:[~y=0I;		("";y);	(("Input should be of the form &0";.r.sshortdateexample[]);x)]};))
                      )
                     (`p
                      .((`Path;0;)
                        (`Date;20121231;)
                        (`Value;0.0;))
                      ))
                   )
                  (`M
                   ,`Internal
                   )))
               (`External
                .((`File
                   ""
                   .((`j
                      .((`c;`string;)
                        (`l;`"Batch Import File Location";)
                        (`fill;`h;))
                      )
                     (`V;{[p;x]:[~.f.exists x; (1;"File does not exist")]};)))
                  (`Browse
                   {[x]
  vpath:(-1_ .j.v),`File
  spath:(`. `k`Main`split`right.`II),(-1_ 5_ .j.v),`File
  if[~(f:.f.getNetPath .j.Open`.k.CSV)_in (_n;"")
    .k.set_s[spath;f]
    .[`;vpath;:;f];
    .k.activate .k.add .k.ACTIVE
    ]
  }
                   .((`j
                      .((`c;`button;)
                        (`async;2;)
                        (`wx;0.2;)
                        (`l;`"<html>Browse<br>for File</html>";)
                        (`fill;`h;)
                        (`hpos;`r;)
                        (`vpos;`c;)
                        (`anchor;`c;)
                        (`image;"Open_32.png";))
                      )
                     (`Y;`null;))))
                .((`j
                   .((`c;`panel;)
                     (`a
                      ,`File `Browse
                      )
                     (`wy;1e-010;))
                   )
                  (`M
                   ,`External
                   ))))
             .,(`j
                .((`c;`panel;)
                  (`a
                   `m `Internal
                   ))
                )))
          .((`j
             .((`c;`panel;)
               (`l;`"User Time Series by Path";))
             )
            (`V;{[p;x]if[`External~x`m; if[.f.exists f:x[`External;`File]; :.L.V.external_data[`Path`Date`Value;f] ]]};)
            (`X;`UserValues_Arguments_Source_UserTimeSeriesbyPath.html;)))
         (`Random_Draw
          .((`m
             `Normal
             .((`C;`model;)
               (`j
                .((`l;`Distribution;)
                  (`fill;`h;)
                  (`c;`combo;)
                  (`o
                   `Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                   )
                  (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
                  (`ol
                   (`Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                    `Beta `Binomial `Chi_Squared `"Discrete Distribution" `Gamma `"Linear Distribution Function" `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull)
                   ))
                )
               (`M;();)
               (`P;;)))
            (`Hash
             -1
             .((`M
                `Beta `Binomial `Chi_Squared `Discrete_Distribution `Gamma `Linear_Function `Loggamma `Lognormal `Negative_Binomial `Negative_Binomial_from_Moments `Normal `Pareto `Poisson `Resampling `T_Distribution `Uniform `Weibull
                )
               (`j
                .((`c;`scalar;)
                  (`f;{:[0>4:x;_f'x;x<0;"Default";9$_ x]};)
                  (`g;{:[~&/x _lin"0123456789,.";-1;.C[`G;`integer] x]};)
                  (`u;{:[y~0n;		("Input should be numeric";x)
                   y~0N;		("Input should be integer-valued";x)
                   y>max:65536;		(("Input must be at most &0";$max);max)
					("";y)]};)
                  (`fill;`h;))
                )))
            (`Beta
             .((`alpha
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`beta
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`alpha;`"Shape Parameter (alpha)";)
                     (`beta;`"Shape Parameter (beta)";))
                   ))
                )
               (`M
                ,`Beta
                )))
            (`Binomial
             .((`n
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`p
                `"0.5"
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`n;`"n parameter (number of trials)";)
                     (`p;`"p parameter (prob. of success)";))
                   ))
                )
               (`M
                ,`Binomial
                )))
            (`Chi_Squared
             .,(`df
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .,(`df;`"Degrees of freedom";)
                   ))
                )
               (`M
                ,`Chi_Squared
                )))
            (`Discrete_Distribution
             .((`probability
                ,1.0
                .())
               (`value
                ,0.0
                .()))
             .((`j
                .((`l;`"Discrete Distribution";)
                  (`c;`Table;)
                  (`cl
                   .((`probability;`"Cumulative\nProbabilities";)
                     (`value;`"Sorted\nDiscrete\nValues";))
                   )
                  (`cltip
                   .((`probability;`"Cumulative probabilities for discrete distribution";)
                     (`value;`"Discrete values must be sorted from smallest to largest";))
                   )
                  (`p
                   .((`probability;0.0;)
                     (`value;0.0;))
                   )
                  (`f
                   .((`probability;9.6;)
                     (`value;18.6;))
                   )
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                )
               (`P;1;)
               (`T;;)
               (`F
                .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`probability `value;0#`;0 0.0;();0;0];)
                )
               (`V;{[p;x]
  r:()
  if[{(~x~x@<x)|(0.>*x)|~1.=*|x}@x.probability
   r,:,(1;"Probabilities must be a sorted vector of cumulative probabilities ending with 1")]
  if[{(~x~x@<x)}@x.value
   r,:,(1;"Values must be sorted in acsending order")]
  :[0=#r;_n;r]};)
               (`M
                ,`Discrete_Distribution
                )))
            (`Gamma
             .((`a
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`b
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`a;`"Shape Parameter (a)";)
                     (`b;`"Rate Parameter (b)";))
                   ))
                )
               (`M
                ,`Gamma
                )))
            (`Linear_Function
             .((`probability
                0 1.0
                .())
               (`value
                0 0.0
                .()))
             .((`j
                .((`l;`"Linear Distribution Function";)
                  (`c;`Table;)
                  (`cl
                   .((`probability;`"Cumulative\nProbabilities";)
                     (`value;`"Sorted\nCutpoints";))
                   )
                  (`cltip
                   .((`probability;`"Cumulative probabilities at cutpoints of piece-wise linear distribution (uniform distribution between cutpoints)";)
                     (`value;`"Values (at cutpoints) must be sorted from smallest to largest";))
                   )
                  (`p
                   .((`probability;0.0;)
                     (`value;0.0;))
                   )
                  (`f
                   .((`probability;9.6;)
                     (`value;18.6;))
                   )
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                )
               (`P;1;)
               (`T;;)
               (`F
                .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`probability `value;0#`;0 0.0;();0;0];)
                )
               (`V;{[p;x]
  r:()
  if[{(~x~x@<x)|(~0.=*x)|~1.=*|x}@x.probability
   r,:,(1;"Probabilities must be a sorted vector of cumulative probabilities starting with 0 and ending with 1")]
  if[{(~x~x@<x)}@x.value
   r,:,(1;"Values must be sorted in acsending order")]
  :[0=#r;_n;r]};)
               (`M
                ,`Linear_Function
                )))
            (`Loggamma
             .((`a
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`b
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`a;`"Shape Parameter (a) of underlying Gamma";)
                     (`b;`"Rate Parameter (b) of underlying Gamma";))
                   ))
                )
               (`M
                ,`Loggamma
                )))
            (`Lognormal
             .((`mean
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`stdev
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`mean;`Mean;)
                     (`stdev;`"Standard Deviation";))
                   ))
                )
               (`M
                ,`Lognormal
                )))
            (`Negative_Binomial
             .((`r
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`p
                `"0.5"
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`r;`"r parameter";)
                     (`p;`"p parameter (prob. of success)";))
                   ))
                )
               (`M
                ,`Negative_Binomial
                )))
            (`Negative_Binomial_from_Moments
             .((`mean
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`stdev
                `"2."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`mean;`Mean;)
                     (`stdev;`"Standard Deviation";))
                   ))
                )
               (`M
                ,`Negative_Binomial_from_Moments
                )))
            (`Normal
             .((`mean
                `"0."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`stdev
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`mean;`Mean;)
                     (`stdev;`"Standard Deviation";))
                   ))
                )
               (`M
                ,`Normal
                )))
            (`Pareto
             .((`alpha
                `"2."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`min
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`alpha;`"Shape Parameter (alpha)";)
                     (`min;`"Location Parameter (minimum value)";))
                   ))
                )
               (`M
                ,`Pareto
                )))
            (`Poisson
             .,(`lambda
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .,(`lambda;`Lambda;)
                   ))
                )
               (`M
                ,`Poisson
                )))
            (`Resampling
             .,(`value
                ,0.0
                .())
             .((`j
                .((`l;`Resampling;)
                  (`c;`Table;)
                  (`cl
                   .,(`value;`"Equally\nProbable\nValues";)
                   )
                  (`p
                   .,(`value;0.0;)
                   )
                  (`f
                   .,(`value;18.6;)
                   )
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                )
               (`P;1;)
               (`T;;)
               (`F
                .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[,`value;0#`;,0.0;();0;0];)
                )
               (`M
                ,`Resampling
                )))
            (`T_Distribution
             .,(`df
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .,(`df;`"Degrees of freedom";)
                   ))
                )
               (`M
                ,`T_Distribution
                )))
            (`Uniform
             .((`min
                `"0."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`max
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`min;`Minimum;)
                     (`max;`Maximum;))
                   ))
                )
               (`M
                ,`Uniform
                )))
            (`Weibull
             .((`alpha
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];))
               (`beta
                `"1."
                .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
             .((`j
                .((`c;`slot;)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`rl
                   .((`alpha;`"Shape Parameter (alpha)";)
                     (`beta;`"Scale Parameter (beta)";))
                   ))
                )
               (`M
                ,`Weibull
                ))))
          .((`j
             .((`c;`panel;)
               (`a
                `m `Hash `Normal
                ))
             )
            (`X;`UserValues_Arguments_Source_RandomDraw.html;)))
         (`External_Rate
          .((`m
             `Bond_Yield
             .((`C;`model;)
               (`j
                .((`l;`"Model Choice";)
                  (`fill;`h;)
                  (`c;`combo;)
                  (`o
                   `Bond_Yield `FX `Inflation
                   )
                  (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};)
                  (`ol
                   (`Bond_Yield `FX `Inflation
                    `"Factor of Bond Yields" `"Factor of Foreign Exchange Rate" `"Factor of Inflation")
                   ))
                )
               (`M;();)
               (`P;;)))
            (`Bond_Yield
             .((`Period
                ,`"2011 +"
                .,(`T;{[nn;x;y]x,nn}[`future_period];))
               (`mrkt
                ,`Treasury
                .())
               (`econ
                ,`US
                .,(`V;{[p;x]
  :[1=#e:?x a:&~x _lin `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
         (1;("Economy &0 is not in the list of economies to run for this simulation";$e);,,a)
    1<#e;(1;("Economies &0 are not in the list of economies to run for this simulation";,/" ",/:$:'e);,,a)]};))
               (`year
                ,`"10."
                .,(`V;{[p;x]r:();r,:(,/function_validation[!.k.get_s (6#p),`Arguments`Source;p]'x)_dv _n;:[#r;r;_n]};))
               (`lags
                ,0
                .,(`V;{[p;x]:[#a:&~(x>-1)&1=4::'x;(1;"Must be non-negative integers";,,a)]};))
               (`avgp
                ,1
                .,(`V;{[p;x]:[#a:&~(x>0)&1=4::'x;(1;"Must be positive integers";,,a)]};))
               (`mult
                ,1.0
                .())
               (`sprd
                ,0.0
                .()))
             .((`j
                .((`l;`"Factor of Bond Yields";)
                  (`c;`table;)
                  (`p
                   .((`Period;`;)
                     (`mrkt;`Treasury;)
                     (`econ;`US;)
                     (`year;`"10.";)
                     (`lags;0;)
                     (`avgp;1;)
                     (`mult;1.0;)
                     (`sprd;0.0;)
                     (`round;`Nearest;))
                   )
                  (`f
                   .((`lags;{9$_ x};)
                     (`avgp;{9$_ x};)
                     (`mult;9.6;)
                     (`sprd;9.6;))
                   )
                  (`e
                   .,(`Period;0;)
                   )
                  (`bg
                   .,(`Period;`e;)
                   )
                  (`b
                   .,(`Period;`n;)
                   )
                  (`fixed;1;)
                  (`popup
                   .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                     (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                     (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                     (`Append_Years
                      .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                        (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                        (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                        (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                      )
                     (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                     (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];))
                   )
                  (`cl
                   .((`mrkt;`Rating;)
                     (`econ;`Economy;)
                     (`year;`"Maturity\n(in Years)";)
                     (`lags;`"Lag\n(in periods)";)
                     (`avgp;`"Number of\nPeriods to\nAverage";)
                     (`mult;`"Multiplicative\nFactor\non Yield";)
                     (`sprd;`"Additive Factor\nto Yield\n(Spread)";))
                   )
                  (`cltip
                   .((`econ;`"<html>US:  United States&nbsp;<br>&nbsp;DE:  Germany&nbsp;<br>&nbsp;GB:  Great Britain&nbsp;<br>&nbsp;CH:  Switzerland&nbsp;<br>&nbsp;AU:  Australia&nbsp;<br>&nbsp;CA:  Canada&nbsp;<br>&nbsp;JP:  Japan&nbsp;<br>&nbsp;DK:  Denmark&nbsp;<br>&nbsp;NO:  Norway&nbsp;<br>&nbsp;SE:  Sweden&nbsp;<br>&nbsp;BR:  Brazil&nbsp;<br>&nbsp;PL:  Poland&nbsp;<br>&nbsp;KR:  South Korea&nbsp;<br>&nbsp;TW:  Taiwan&nbsp;<br>&nbsp;HK:  Hong Kong&nbsp;<br>&nbsp;CN:  China&nbsp;<br>&nbsp;</html>";)
                     (`year;`"<html>Maturity expressed in years.&nbsp;<br>&nbsp;May be a function of other arguments&nbsp;<br>&nbsp;</html>";)
                     (`lags;`"<html>&nbsp;The lag in periods (e.g. 0 for no lag,&nbsp;<br>&nbsp;1 to use bond yield from one period ago, etc.)&nbsp;</html>";)
                     (`avgp;`"<html>&nbsp;Use values greater than 1 to smooth bond yields&nbsp;<br>&nbsp;by averaging a number of historical periods&nbsp;</html>";)
                     (`mult;`"<html>&nbsp;The bond yield (after lagging and smoothing)&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;</html>";)
                     (`sprd;`"<html>&nbsp;This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the bond yield (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;</html>";)
                     (`round;`"<html>Rounding method for Maturity&nbsp;<br>&nbsp;Up, Down, and Nearest move to the relative simulation-frerquency point on the yield curve.&nbsp;<br>&nbsp;Interpolate does a linear interpolation based on the two nearest points.&nbsp;<br>&nbsp;</html>";))
                   )
                  (`cell
                   .((`mrkt
                      .((`c;`combo;)
                        (`o
                         `Treasury `Pfandbriefe `AAA `AA `A `BBB `High_Yield
                         ))
                      )
                     (`econ
                      .((`c;`combo;)
                        (`o
                         `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                         ))
                      )
                     (`round
                      .((`c;`combo;)
                        (`o
                         `Up `Down `Nearest `Interpolate
                         ))
                      ))
                   )
                  (`editor
                   .((`mrkt;1;)
                     (`econ;1;)
                     (`round;1;))
                   )
                  (`g
                   .((`lags;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`avgp;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`year;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};))
                   )
                  (`u
                   .((`lags;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`avgp;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`year;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};))
                   ))
                )
               (`T;;)
               (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
               (`C;`External_Rate_Bond_Yield;)
               (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
               (`X;`UserValues_Arguments_Source_ExternalRate_FactorofBondYields.html;)
               (`V;{[p;x] r:()
            hist_ylds:.k.get_s (0;`A;`System;`Historical_Yields)
            if[#a:&{[h;p;e;y]p>-2+#h[e;y;`Period]}[hist_ylds]'[(-1+x.lags+x.avgp)*12%.G`pdy;x.econ;x.mrkt]
              r,:,(0;("There is inadequate historical yield data for economy &0 and market &1.  The necessary additional history is assumed to be the earliest available data.";$x.econ a;$x.mrkt a))]
            :[#r;r;_n]};)
               (`M
                ,`Bond_Yield
                )))
            (`FX
             .((`Period
                ,`"2011 +"
                .,(`T;{[nn;x;y]x,nn}[`future_period];))
               (`econ
                ,`USD
                .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[1=#e:?x a:&~x _lin c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$e);,,a)
    1<#e;(1;("Currencies &0 are not in the list of currencies to run for this simulation";,/" ",/:$:'e);,,a)]};))
               (`curr
                ,`USD
                .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[1=#e:?x a:&~x _lin c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$e);,,a)
    1<#e;(1;("Currencies &0 are not in the list of currencies to run for this simulation";,/" ",/:$:'e);,,a)]};))
               (`lags
                ,0
                .,(`V;{[p;x]:[#a:&~(x>-1)&1=4::'x;(1;"Must be non-negative integers";,,a)]};))
               (`avgp
                ,1
                .,(`V;{[p;x]:[#a:&~(x>0)&1=4::'x;(1;"Must be positive integers";,,a)]};))
               (`mult
                ,1.0
                .())
               (`sprd
                ,0.0
                .()))
             .((`j
                .((`l;`"Factor of Foreign Exchange Rate";)
                  (`c;`table;)
                  (`p
                   .((`Period;`;)
                     (`lags;0;)
                     (`avgp;1;)
                     (`mult;1.0;)
                     (`sprd;0.0;)
                     (`econ;`USD;)
                     (`curr;`USD;))
                   )
                  (`f
                   .((`lags;{9$_ x};)
                     (`avgp;{9$_ x};)
                     (`mult;9.6;)
                     (`sprd;9.6;))
                   )
                  (`e
                   .,(`Period;0;)
                   )
                  (`bg
                   .,(`Period;`e;)
                   )
                  (`b
                   .,(`Period;`n;)
                   )
                  (`fixed;1;)
                  (`popup
                   .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                     (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                     (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                     (`Append_Years
                      .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                        (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                        (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                        (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                      )
                     (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                     (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];))
                   )
                  (`cl
                   .((`econ;`"Numerator\nCurrency";)
                     (`curr;`"Denominator\nCurrency";)
                     (`lags;`"Lag\n(in periods)";)
                     (`avgp;`"Number of\nPeriods to\nAverage";)
                     (`mult;`"Multiplicative\nFactor\non Rate";)
                     (`sprd;`"Additive Factor\nto Rate\n(Spread)";))
                   )
                  (`cltip
                   .((`econ;`"<html>Home currency whose rate is used as the basis&nbsp;<br>&nbsp;for the external rate calculation&nbsp;<br>&nbsp;USD:  US Dollar&nbsp;<br>&nbsp;EUR:  Euro&nbsp;<br>&nbsp;GBP:  British Pound&nbsp;<br>&nbsp;CHF:  Swiss Franc&nbsp;<br>&nbsp;AUD:  Australian Dollar&nbsp;<br>&nbsp;CAD:  Canadian Dollar&nbsp;<br>&nbsp;JPY:  Japanese Yen&nbsp;<br>&nbsp;DKK:  Danish Krone&nbsp;<br>&nbsp;NOK:  Norwaegian Krone&nbsp;<br>&nbsp;SEK:  Swedish Krona&nbsp;<br>&nbsp;BRL:  Brazilian Real&nbsp;<br>&nbsp;PLN:  Polish Zloty&nbsp;<br>&nbsp;KRW:  South Korean Won&nbsp;<br>&nbsp;TWD:  Taiwan Dollar&nbsp;<br>&nbsp;HKD:  Hong Kong Dollar&nbsp;<br>&nbsp;CNY:  Chinese Yuan&nbsp;<br>&nbsp;</html>";)
                     (`curr;`"<html>Foreign currency whose exchange rate is used as the starting point&nbsp;<br>&nbsp;for the external rate calculation&nbsp;<br>&nbsp;USD:  US Dollar&nbsp;<br>&nbsp;EUR:  Euro&nbsp;<br>&nbsp;GBP:  British Pound&nbsp;<br>&nbsp;CHF:  Swiss Franc&nbsp;<br>&nbsp;AUD:  Australian Dollar&nbsp;<br>&nbsp;CAD:  Canadian Dollar&nbsp;<br>&nbsp;JPY:  Japanese Yen&nbsp;<br>&nbsp;DKK:  Danish Krone&nbsp;<br>&nbsp;NOK:  Norwaegian Krone&nbsp;<br>&nbsp;SEK:  Swedish Krona&nbsp;<br>&nbsp;BRL:  Brazilian Real&nbsp;<br>&nbsp;PLN:  Polish Zloty&nbsp;<br>&nbsp;KRW:  South Korean Won&nbsp;<br>&nbsp;TWD:  Taiwan Dollar&nbsp;<br>&nbsp;HKD:  Hong Kong Dollar&nbsp;<br>&nbsp;CNY:  Chinese Yuan&nbsp;<br>&nbsp;</html>";)
                     (`lags;`"<html>The lag in periods (e.g. 0 for no lag,&nbsp;<br>&nbsp;1 to use rate from one period ago, etc.)&nbsp;<br>&nbsp;</html>";)
                     (`avgp;`"<html>Use values greater than 1 to smooth rates&nbsp;<br>&nbsp;by averaging a number of historical periods&nbsp;<br>&nbsp;</html>";)
                     (`mult;`"<html>The rate (after lagging and smoothing)&nbsp&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;<br>&nbsp;</html>";)
                     (`sprd;`"<html>This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the rate (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;<br>&nbsp;</html>";))
                   )
                  (`cell
                   .((`econ
                      .((`c;`combo;)
                        (`o
                         `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                         ))
                      )
                     (`curr
                      .((`c;`combo;)
                        (`o
                         `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                         ))
                      ))
                   )
                  (`editor
                   .((`econ;1;)
                     (`curr;1;))
                   )
                  (`g
                   .((`lags;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`avgp;{ / always produces integer
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0];x _dvl"()$%\"";:]
 _ :[(|/1 2=4:v 1)&~v 0;(((1 -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};))
                   )
                  (`u
                   .((`lags;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`avgp;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                   ))
                )
               (`T;;)
               (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
               (`C;`External_Rate_FX;)
               (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
               (`X;`UserValues_Arguments_Source_ExternalRate_FactorofForeignExchangeRate.html;)
               (`M
                ,`FX
                )))
            (`Inflation
             .((`Period
                ,`"2011 +"
                .,(`T;{[nn;x;y]x,nn}[`future_period];))
               (`econ
                ,`US
                .,(`V;{[p;x]
  :[1=#e:?x a:&~x _lin `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
         (1;("Economy &0 is not in the list of economies to run for this simulation";$e);,,a)
    1<#e;(1;("Economies &0 are not in the list of economies to run for this simulation";,/" ",/:$:'e);,,a)]};))
               (`mult
                ,1.0
                .())
               (`sprd
                ,0.0
                .()))
             .((`j
                .((`l;`"Factor of Inflation";)
                  (`c;`table;)
                  (`p
                   .((`Period;`;)
                     (`mult;1.0;)
                     (`sprd;0.0;)
                     (`econ;`US;))
                   )
                  (`f
                   .((`mult;9.6;)
                     (`sprd;9.6;))
                   )
                  (`e
                   .,(`Period;0;)
                   )
                  (`bg
                   .,(`Period;`e;)
                   )
                  (`b
                   .,(`Period;`n;)
                   )
                  (`fixed;1;)
                  (`popup
                   .((`Append_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[0]];)
                     (`Append_Period;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1.0]];)
                     (`Append_Year;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[1]];)
                     (`Append_Years
                      .((`Two;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[2]];)
                        (`Three;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[3]];)
                        (`Four;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[4]];)
                        (`Five;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[n;d;e;v;i]
 .j.app.row[`$,/".",'$v;rti::[n>0.; _ .G.pdy*n;#?i[;1]]]
 .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!rti+#d`Period]
}[5]];))
                      )
                     (`Truncate_Number_of_Rows_Selected;{[f;junk] / change[]
 nul:{(x~_n)|~#x}                            / null or empty?
 dot:`${($x),".",$y}/`,                      / dotted name from vector
 j:.j.v;d:-3_ j;v:~a:*|-2_ j                 / variable, etc.
 if[nul i:`. d,a,`j`s;i:,.j.first dot d,v]   / default to first selectable if null
 if[~nul i 0                                 / if there is a selection
   r:f[w:`. d,v;b:`. d,a;d,v;i]              / run
   if[2=#r                                   / if there is a result
    if[r~(w;b)  ;:_n]                        / if it is identical, no op
    c:r[1;`j;`c]                             / save class
    r[1;`j;`c]:`null                         / set class to null
    .[`;d,a,`j`c;:;`null]                    / set screen object class to null
    .[`;d,,v,a;:;r]                          / reset object
    .[`;d,a,`j`c;:;c]]]                      / reset screen object class to c
}[{[d;e;v;i]
 if[rtd:(-1+nr:#d`Period)&#?i[;1]
  .j.del.row[`$,/".",'$v;nr-1+!rtd]
  .[`;v,`Period;:;`${@[x;-1+#x;,;" +"]}@time@!(-rtd)+#d`Period] ]
}];)
                     (`Copy;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`copy;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];)
                     (`Paste;{[f;junk]c:name.c v:f .j.v;if[(1~the[c;`alwaysSel])|~empty s:att[v;`s];of[c;`paste;(v;s)]]}[{@[x;-1+#x,:();~:]}-2_];))
                   )
                  (`cl
                   .((`econ;`Economy;)
                     (`mult;`"Multiplicative\nFactor\non Rate";)
                     (`sprd;`"Additive Factor\nto Rate\n(Spread)";))
                   )
                  (`cltip
                   .((`econ;`"<html>&nbsp;Home economy whose inflation is used as the basis&nbsp;<br>&nbsp;for the external rate calculation&nbsp;</html>";)
                     (`mult;`"<html>&nbsp;The rate (after lagging and averaging)&nbsp;<br>&nbsp;is multiplied by this factor (before adding the spread)&nbsp;</html>";)
                     (`sprd;`"<html>&nbsp;This factor (i.e. spread), expressed as a fraction (i.e. .05 = 5%),&nbsp;<br>&nbsp;is added to the rate (after lagging, smoothing and&nbsp;<br>&nbsp;applying the multicative factor)&nbsp;</html>";))
                   )
                  (`cell
                   .,(`econ
                      .((`c;`combo;)
                        (`o
                         `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                         ))
                      )
                   )
                  (`editor
                   .,(`econ;1;)
                   )
                  (`g
                   .((`mult;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`sprd;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};))
                   )
                  (`u
                   .((`mult;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`sprd;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};))
                   ))
                )
               (`T;;)
               (`G;{[d;e]
 d[],:d[;-1+#*d[]]
 d:@[d;_n;1_]
 d[`Period]:`${@[x;-1+#x;,;" +"]}@time@1+!#d[`Period]
 d};)
               (`C;`External_Rate_Inflation;)
               (`Z;{[c;f;d;v;i]
	l:v,c
	b:d . l
	a:f b

	/ before comparing, insert a blank before a "+" if it was not there (was previously causing warnings).
	a:@[a; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]
	b:@[b; _n; {:[(($x) _ss "[^ ]+")~(!0); x; `$$(_ssr[$x; "+"; " +"])]}]

	if[a~b; :_n]
	h:_ssr/[$:[_n~h:d . .u.attr[v],`j`cl,c;c;h];"\n_";" "]
	.[d;l;:;a]
	,(0
		:[1=#a
			("&0 adjusted to have the value &1";h;*a)
			("&0 adjusted to have values range from &1 to &2";h;*a;*|a)]
		`rc
	0 0 ) }[`Period;{`$@[.L.P.time@!#x;-1+#x;,;" +"]}];)
               (`X;`UserValues_Arguments_Source_ExternalRate_FactorofInflation.html;)
               (`M
                ,`Inflation
                ))))
          .((`j
             .((`c;`panel;)
               (`a
                `m `Bond_Yield
                ))
             )
            (`X;`UserValues_Arguments_Source_ExternalRate.html;)))
         (`Treasury_Curve
          .((`Economy
             `US
             .,(`V;{[p;x]
  :[~x _in `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
    (1;("Economy &0 is not in the list of economies to run for this simulation";$x))]};))
            (`Maturity
             1.0
             .,(`V;{[p;x]:[x<0;(1;"Must be a non-negative number")]};))
            (`Item;`Continuous_Nominal_Yield;.())
            (`Period;`Current;.()))
          .,(`j
             .((`c;`Slot;)
               (`l;`"Treasury Curve";)
               (`cell
                .((`Economy
                   .((`c;`combo;)
                     (`o
                      `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Continuous_Nominal_Yield `Annual_Nominal_Yield `Continuous_Real_Yield `Annual_Real_Yield `Nominal_Price `Real_Price
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;))
             ))
         (`Market_Index
          .((`Index
             `Market_Index_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Market_Index;0#`];))
            (`Item;`Dividend_Yield;.())
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`l;`"Market Index";)
               (`cell
                .((`Index
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Market_Index_ `Market_Index_1
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Dividend_Yield `"Price/Level" `Modeled_Level `Modeled_Dividend_Yield `Variance `Volatility
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`p
                .((`Index;`Market_Index_1;)
                  (`Item;`Dividend_Yield;)
                  (`Period;`Current;)
                  (`Economy;`US;))
                )
               (`u
                .,(`Index;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`V;{[p;x]
            r:()
            t:.k.get_s@0,`A`User`Investments`Existing_and_New_Issues`Market_Indices`Definitions,x.Index,`m
            if[`Unspecified_=x.Index
              r,:,(1;"A valid input must be specified:";,,`Index)
              t:`
              ] / if #bad:&`Unspecified_=x.Index
            if[(~t=`Modeled_Market_Index)&x.Item _lin`Modeled_Level`Modeled_Dividend_Yield
              r,:,(1;"\"Modeled Level\" and \"Modeled Dividend Yield\" are available only in Modeled Market Indices";,`Item`Index)
              ] / if #bad:&(~t=`Modeled_Market_Index)&x.Item _lin`Modeled_Level`Modeled_Dividend_Yield
            if[(~t=`Copy_of_Common_Stock_Index)&x.Item _lin`Variance`Volatility
              r,:,(1;"\"Variance\" and\"Volatility\" are available only in Copies of Common Stock Indices";,`Item`Index)
              ] / if #bad:&(~t=`Copy_of_Common_Stock_Index)&x.Item _lin`Variance`Volatility
            :[#r;r;_n]};)
            (`J
             .,(`Market_Index
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Index;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Index];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Index];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Index;,0#`];)
                  (`F
                   ,`Index
                   ))
                )
             )
            (`U
             ,`Market_Index
             )))
         (`Common_Stock_Index
          .((`Economy
             `US
             .,(`V;{[p;x]
  :[~x _in `All,{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)
    (1;("Economy &0 is not in the list of economies to run for this simulation";$x))]};))
            (`Index;`Large_Cap;.())
            (`Item;`Price;.())
            (`Period;`Current;.()))
          .,(`j
             .((`c;`Slot;)
               (`l;`"Common Stock Index";)
               (`cell
                .((`Economy
                   .((`c;`combo;)
                     (`o
                      `US `DE `GB `CH `AU `CA `JP `DK `NO `SE `BR `PL `KR `TW `HK `CN
                      ))
                   )
                  (`Index
                   .((`c;`combo;)
                     (`o
                      `Large_Cap `Mid_Cap `Broad_Cap `Small_Cap `Other_Sector
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Price `Volatility `Dividend_Yield
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;))
             ))
         (`Return_Class_Return
          .((`Class
             `Return_Class_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Return_Class;0#`];))
            (`Component;`Total;.())
            (`Frequency;`Simulation;.())
            (`Currency
             `USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cl
                .,(`Currency;`"Return\nCurrency";)
                )
               (`cell
                .((`Class
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Return_Class_ `Return_Class_1
                      ))
                   )
                  (`Component
                   .((`c;`combo;)
                     (`o
                      `Total `Income `Price
                      ))
                   )
                  (`Frequency
                   .((`c;`combo;)
                     (`o
                      `Simulation `Annualized `YY_Annual `Cumulative
                      ))
                   )
                  (`Currency
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_ReturnClassReturn.html;)
            (`J
             .,(`Return_Class
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
                  (`F
                   ,`Class
                   ))
                )
             )
            (`U
             ,`Return_Class
             )))
         (`Asset_Class_Return
          .((`Class
             `Asset_Class_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;0#`];))
            (`Component;`Total;.())
            (`Frequency;`Simulation;.())
            (`Currency
             `USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cl
                .((`Currency;`"Return\nCurrency";)
                  (`Class;`"Asset Class";))
                )
               (`cell
                .((`Class
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                      ))
                   )
                  (`Component
                   .((`c;`combo;)
                     (`o
                      `Total `Income `Price
                      ))
                   )
                  (`Frequency
                   .((`c;`combo;)
                     (`o
                      `Simulation `Annualized `YY_Annual `Cumulative `Index
                      ))
                   )
                  (`Currency
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_AssetClassReturn.html;)
            (`J
             .,(`Asset_Class
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
                  (`F
                   ,`Class
                   ))
                )
             )
            (`U
             ,`Asset_Class
             )
            (`V;{[p;x]r:()
          if[(`Index~x`Frequency)&~(x`Component) _in`Price`Total
            r,:,(1;"Component must be Price or Total for Frequency=Index") ]
          if[(`Index~x`Frequency)&~(x`Currency)~acb:.k.get_s (0;`A;`User;`Investments;`Asset_Classes;x`Class;`Basis)
            r,:,(1;("Currency must be the Index basis of &0";$acb)) ]
          :[#r;r;_n]};)))
         (`Portfolio_Return
          .((`Class
             `Asset_Class_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;0#`];))
            (`Component;`Total;.())
            (`Frequency;`Simulation;.())
            (`Currency
             `USD
             .,(`V;{[p;x]
  e2c:.C`Economy_Currency
  c2r:`All`Default,e2c[(),{(!x)@&x[]}@.k.get_s (0;`A;`User;`GEMS_User_Inputs;`Economies_to_Run)]
  :[~x _in c2r;(1;("Currency &0 is not in the list of currencies to run for this simulation";$x))]};))
            (`Period;`Current;.())
            (`Return_Portfolio
             `All
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Portfolio;,`All];)))
          .((`j
             .((`c;`Slot;)
               (`cl
                .((`Currency;`"Return\nCurrency";)
                  (`Return_Portfolio;`Portfolio;)
                  (`Class;`"Asset Class";))
                )
               (`cell
                .((`Class
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                      ))
                   )
                  (`Component
                   .((`c;`combo;)
                     (`o
                      `Total `Income `Price
                      ))
                   )
                  (`Frequency
                   .((`c;`combo;)
                     (`o
                      `Simulation `Annualized `YY_Annual `Cumulative
                      ))
                   )
                  (`Currency
                   .((`c;`combo;)
                     (`o
                      `USD `EUR `GBP `CHF `AUD `CAD `JPY `DKK `NOK `SEK `BRL `PLN `KRW `TWD `HKD `CNY
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   )
                  (`Return_Portfolio
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Portfolio_ `All `Portfolio_1
                      ))
                   ))
                )
               (`editor;1;)
               (`a
                `Return_Portfolio `Class `Component `Frequency `Currency `Period
                )
               (`u
                .((`Return_Portfolio;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                  (`Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
                ))
             )
            (`X;`UserValues_Arguments_Source_PortfolioReturn.html;)
            (`J
             .((`Asset_Class
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Class;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Class];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Class];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Class;,0#`];)
                  (`F
                   ,`Class
                   ))
                )
               (`Portfolio
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Return_Portfolio;,,`All];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Return_Portfolio];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Return_Portfolio];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Return_Portfolio;,,`All];)
                  (`F
                   ,`Return_Portfolio
                   ))
                ))
             )
            (`U
             `Asset_Class `Portfolio
             )))
         (`Life_Insurance
          .((`Product_Group
             `Product_Group_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Product_Group;0#`];))
            (`Category;`Income_Statement;.())
            (`Type;`Benefits;.())
            (`Item;`Total;.())
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`l;`"Life Insurance";)
               (`cl
                .,(`Product_Group;`"Product\nGroup";)
                )
               (`cell
                .((`Product_Group
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Product_Group_ `Product_Group_1
                      ))
                   )
                  (`Category
                   .((`c;`combo;)
                     (`o
                      `BaFin `Basis_Post `Basis_Pre `Benefit `Bonus_Post `Bonus_Pre `Cashflow `Change `Dividend `Expense `Income_Post `Income_Pre `Income_Statement `Participation `Reserve_Post `Reserve_Pre `Reserves `Reserves_Post `Scaled `Surplus_Post `Surplus_Pre `Tax `Volume
                      ))
                   )
                  (`Type
                   .((`c;`combo;)
                     (`o
                      `Acquisition `Adjustment `Amount `Base `Basis `Benefits `Convexity_Fisher_Weil `Convexity_Modified `Declared `Direct `Dividend `Duration_Fisher_Weil `Duration_Modified `Dynamic_Interest `Economic `Expenses `Face_Amount `Final `Free `Gain `HGB `HGB_Life `IFRS `Income `Interest `Investment `Maintenance `Negative `Net_Present_Value `On_Deposit `Other `Other_Exp `Paid `Policyholder `Pre_Dividend `Pre_Trade `Premium `Premium_from_Equity `Required `Reversionary `Separate `Shareholder `Solvency_II `Tax `Terminal `Terminal_Prev_Decl `Total `US `US_GAAP `US_Statutory_Life `Underwriting `VTRUE
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Acquisition `Adjusted_Premium `Adjustments `Advanced_Premium `Allocated `Allocated_Dynamic `Allocated_Fixed `Amount `Annuity `Annuity_Allocated `Annuity_Allocated_Fixed `Annuity_Declaration `Annuity_Declaration_Difference `Annuity_Earned `Annuity_Extra_Fixed `Annuity_Maturing `Annuity_Non_Interest `Annuity_Premium `Annuity_Projected `Annuity_Required `Annuity_Total_Dynamic `Annuity_Total_Fixed `Annuity_Unallocated `Base `Basis `Benefit `Cash_Value `Commission `Committed `Credit `DAC_Asset `DAC_Balance `Death `Death_Benefits `Declaration `Declaration_Difference `Deposit `Dir_or_Ind_Dist `Direct `Disability_AH `Div_Accum `Dividend `Divs_on_Def_Annuities `Dynamic_Interest `Earned `Earned_Reduction `Excess_Interest `Expense `Experience_Rated_Refunds `Extra_Fixed `Factor `Fees_Charged `Free `Future `General_Deductions `Gross `Group_Life_Premium `Income `Increase `Inforce `Interest `Interest_Credited `Interest_Extra `Interest_NonExtra `Interest_on_Deposit `Investment `Lapse `Life `Maintenance `Maturing `Maturity `Miscellaneous `NAR `Negative `Net `Net_Amount_at_Risk `Non_Annuity_Allocated `Non_Annuity_Allocated_Fixed `Non_Annuity_Declaration `Non_Annuity_Declaration_Difference `Non_Annuity_Earned `Non_Annuity_Extra_Fixed `Non_Annuity_Maturing `Non_Annuity_Non_Interest `Non_Annuity_Projected `Non_Annuity_Required `Non_Annuity_Total_Dynamic `Non_Annuity_Total_Fixed `Non_Annuity_Unallocated `Non_Exit `Non_Interest `Non_Interest_Dynamic `Non_Premium `Non_Terminal `On_Deposit `Operations_Loss_Deduction `Other `Overhead `PH_Surplus `Payable `Payout `Policy `Policyholder_Divs_Paid `Positive `Premium `Premium_Adjustments `Premium_Mortality `Premium_Reserve `Projected `Rebates `Received `Req_Add_Reserve `Required `Required_Interest `Reserve `Reserve_Payout `Reserve_Str_Account `Reserve_Str_Bonus `Risk `SGA_Base `SGA_Benefit `Separate `Special_Reserve `Supplementary_Contracts `Surrender `Terminal `Tied `Total `Total_Dynamic `Total_Fixed `Transfer `Unallocated `Unallocated_Dynamic `Unallocated_Fixed `User_Data_1 `User_Data_2
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Product_Group;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_LifeInsurance.html;)
            (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Basis_Pre `Terminal `Annuity_Declaration
              `Basis_Pre `Terminal `Non_Annuity_Declaration
              `Basis_Pre `Terminal `Declaration
              `Basis_Pre `Terminal `SGA_Base
              `Basis_Pre `Terminal_Prev_Decl `SGA_Benefit
              `Basis_Pre `Terminal_Prev_Decl `Earned
              `Benefit `Total `Death
              `Benefit `Total `Surrender
              `Benefit `Total `Maturity
              `Benefit `Total `Annuity
              `Benefit `Total `Total
              `Benefit `Base `Death
              `Benefit `Base `Surrender
              `Benefit `Base `Maturity
              `Benefit `Base `Annuity
              `Benefit `Base `Total
              `Benefit `Dynamic_Interest `Death
              `Benefit `Dynamic_Interest `Surrender
              `Benefit `Dynamic_Interest `Maturity
              `Benefit `Dynamic_Interest `Annuity
              `Benefit `Dynamic_Interest `Total
              `Benefit `Terminal `Death
              `Benefit `Terminal `Surrender
              `Benefit `Terminal `Maturity
              `Benefit `Terminal `Annuity
              `Benefit `Terminal `Total
              `Benefit `Terminal `Transfer
              `Benefit `Interest `Total
              `Benefit `Declared `Total
              `Benefit `Adjustment `Reserve
              `Benefit `Adjustment `Terminal
              `Benefit `Adjustment `Non_Interest
              `Benefit `Adjustment `Total
              `Benefit `Declared `Direct
              `Benefit `Paid `Direct
              `Benefit `Declared `Dividend
              `Benefit `Declared `Terminal
              `Bonus_Pre `Total `Non_Interest
              `Bonus_Pre `Total `Non_Interest_Dynamic
              `Bonus_Pre `Total `Extra_Fixed
              `Bonus_Pre `Terminal `Non_Interest
              `Bonus_Pre `Terminal `Non_Interest_Dynamic
              `Bonus_Pre `Terminal `Extra_Fixed
              `Bonus_Pre `Dividend `Non_Interest
              `Bonus_Pre `Dividend `Non_Interest_Dynamic
              `Bonus_Pre `Dividend `Extra_Fixed
              `Bonus_Pre `Direct `Non_Interest
              `Bonus_Pre `Direct `Non_Interest_Dynamic
              `Bonus_Pre `Direct `Extra_Fixed
              `Bonus_Pre `Reversionary `Non_Interest
              `Bonus_Pre `Reversionary `Non_Interest_Dynamic
              `Bonus_Pre `Reversionary `Extra_Fixed
              `Bonus_Pre `Base `Non_Interest
              `Bonus_Pre `Base `Non_Interest_Dynamic
              `Bonus_Pre `Base `Extra_Fixed
              `Bonus_Pre `Terminal `Annuity_Non_Interest
              `Bonus_Pre `Terminal `Non_Annuity_Non_Interest
              `Bonus_Pre `Terminal `Annuity_Extra_Fixed
              `Bonus_Pre `Terminal `Non_Annuity_Extra_Fixed
              `Bonus_Pre `Total `Factor
              `Bonus_Pre `Total `Req_Add_Reserve
              `Bonus_Pre `Terminal `Annuity_Earned
              `Bonus_Pre `Terminal `Non_Annuity_Earned
              `Bonus_Pre `Terminal `Annuity_Maturing
              `Bonus_Pre `Terminal `Non_Annuity_Maturing
              `Bonus_Pre `Terminal `Annuity_Total_Dynamic
              `Bonus_Pre `Terminal `Non_Annuity_Total_Dynamic
              `Bonus_Pre `Terminal `Declaration
              `Bonus_Pre `Terminal `Earned
              `Bonus_Pre `Terminal `Total
              `Bonus_Pre `Terminal `Total_Fixed
              `Bonus_Pre `Terminal `Total_Dynamic
              `Bonus_Pre `Terminal `Gross
              `Bonus_Pre `Terminal `Maturing
              `Change `Base `Total
              `Change `Dynamic_Interest `Total
              `Change `On_Deposit `Total
              `Change `Other `Total
              `Change `Separate `Total
              `Change `Terminal `Total
              `Change `Premium `Total
              `Change `Income `Total
              `Change `Negative `Total
              `Expense `Acquisition `Total
              `Expense `Maintenance `Total
              `Expense `Other_Exp `Total
              `Expense `Total `Total
              `Income_Pre `Premium `Total
              `Income_Pre `Premium_from_Equity `Total
              `Income_Pre `Other `Total
              `Income_Pre `Underwriting `Total
              `Income_Pre `Premium `Rebates
              `Income_Pre `Premium `Received
              `Reserve_Pre `Base `Total
              `Reserve_Pre `Dynamic_Interest `Total
              `Reserve_Pre `Premium `Total
              `Reserve_Pre `Other `Total
              `Reserve_Pre `Separate `Total
              `Reserve_Pre `Dividend `Total
              `Reserve_Pre `Interest `Total
              `Reserve_Pre `Investment `Total
              `Reserve_Pre `Total `Total
              `Reserve_Pre `On_Deposit `Total
              `Reserve_Pre `Negative `Total
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Maturing
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Maturing
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Earned
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Earned
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Declaration
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Declaration
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Unallocated
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Unallocated
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Allocated
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Allocated
              `Reserve_Pre `Terminal_Prev_Decl `Allocated
              `Reserve_Pre `Terminal_Prev_Decl `Gross
              `Reserve_Pre `Terminal_Prev_Decl `Maturing
              `Reserve_Pre `Terminal_Prev_Decl `Unallocated
              `Reserve_Pre `Terminal_Prev_Decl `Declaration
              `Reserve_Pre `Terminal_Prev_Decl `Earned
              `Reserve_Pre `Terminal_Prev_Decl `Total
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Allocated_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Allocated_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Annuity_Total_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Non_Annuity_Total_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Total_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Total_Dynamic
              `Reserve_Pre `Terminal_Prev_Decl `Allocated_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Allocated_Dynamic
              `Reserve_Pre `Terminal_Prev_Decl `Unallocated_Fixed
              `Reserve_Pre `Terminal_Prev_Decl `Unallocated_Dynamic
              `Reserve_Pre `Terminal `Annuity_Declaration
              `Reserve_Pre `Terminal `Non_Annuity_Declaration
              `Reserve_Pre `Terminal `Annuity_Earned
              `Reserve_Pre `Terminal `Non_Annuity_Earned
              `Reserve_Pre `Terminal `Annuity_Required
              `Reserve_Pre `Terminal `Non_Annuity_Required
              `Reserve_Pre `Terminal `Annuity_Projected
              `Reserve_Pre `Terminal `Non_Annuity_Projected
              `Reserve_Pre `Terminal `Projected
              `Reserve_Pre `Terminal `Required
              `Reserve_Pre `Terminal `Gross
              `Reserve_Pre `Terminal `Declaration
              `Reserve_Pre `Terminal `Earned
              `Reserve_Pre `Terminal `Total
              `Reserve_Pre `Terminal `Maturing
              `Reserve_Pre `Terminal `Allocated
              `Reserve_Pre `Terminal `Unallocated
              `Reserve_Pre `Terminal `Annuity_Total_Fixed
              `Reserve_Pre `Terminal `Non_Annuity_Total_Fixed
              `Reserve_Pre `Terminal `Allocated_Fixed
              `Reserve_Pre `Terminal `Allocated_Dynamic
              `Reserve_Pre `Terminal `Unallocated_Fixed
              `Reserve_Pre `Terminal `Unallocated_Dynamic
              `Reserve_Pre `Terminal `Total_Fixed
              `Reserve_Pre `Terminal `Total_Dynamic
              `Reserve_Pre `Dividend `Future
              `Reserve_Pre `Interest `Terminal
              `Basis_Pre `Total `Reserve_Payout
              `Scaled `Base `User_Data_1
              `Scaled `Base `User_Data_2
              `Surplus_Pre `Basis `Benefit
              `Surplus_Pre `Basis `NAR
              `Surplus_Pre `Basis `Premium
              `Surplus_Pre `Basis `Reserve
              `Surplus_Pre `Required `Benefit
              `Surplus_Pre `Required `NAR
              `Surplus_Pre `Required `Premium
              `Surplus_Pre `Required `Reserve
              `Surplus_Pre `Required `Total
              `Volume `Face_Amount `Inforce
              `Income_Statement `Income `Premium
              `Income_Statement `Income `Other
              `Income_Statement `Benefits `Death
              `Income_Statement `Benefits `Surrender
              `Income_Statement `Benefits `Lapse
              `Income_Statement `Benefits `Maturity
              `Income_Statement `Benefits `Annuity
              `Income_Statement `Benefits `Disability_AH
              `Income_Statement `Benefits `Non_Exit
              `Income_Statement `Benefits `Adjustments
              `Income_Statement `Benefits `Total
              `Income_Statement `Expenses `Acquisition
              `Income_Statement `Expenses `Commission
              `Income_Statement `Expenses `Maintenance
              `Income_Statement `Expenses `Overhead
              `Income_Statement `Expenses `Other
              `Income_Statement `Expenses `Total
              `Reserves `HGB_Life `Base
              `Reserves `HGB_Life `Dynamic_Interest
              `Reserves `HGB_Life `Policy
              `Reserves `HGB_Life `Separate
              `Reserves `HGB_Life `Premium
              `Reserves `HGB_Life `Negative
              `Reserves `HGB_Life `On_Deposit
              `Reserves `HGB_Life `Other
              `Reserves `HGB_Life `Total
              `Reserves `HGB_Life `Terminal
              `Reserves `HGB_Life `Interest
              `Reserves `HGB_Life `Investment
              `Reserves `HGB_Life `Dividend
              `Reserves `HGB_Life `Non_Terminal
              `Reserves `HGB_Life `Non_Premium
              `Reserves `HGB_Life `Income
              `Reserves `US_GAAP `Premium
              `Reserves `US_GAAP `Benefit
              `Reserves `US_GAAP `Expense
              `Reserves `US_GAAP `Fees_Charged
              `Reserves `US_GAAP `Interest_Credited
              `Reserves `US_GAAP `DAC_Asset
              `Reserves `US_GAAP `Total
              `Reserves `IFRS `Premium
              `Reserves `IFRS `Benefit
              `Reserves `IFRS `Expense
              `Reserves `IFRS `Fees_Charged
              `Reserves `IFRS `Interest_Credited
              `Reserves `IFRS `DAC_Asset
              `Reserves `IFRS `Total
              `Reserves `Economic `Premium
              `Reserves `Economic `Benefit
              `Reserves `Economic `Expense
              `Reserves `Economic `Fees_Charged
              `Reserves `Economic `Interest_Credited
              `Reserves `Economic `Total
              `Reserves `Solvency_II `Premium
              `Reserves `Solvency_II `Benefit
              `Reserves `Solvency_II `Expense
              `Reserves `Solvency_II `Fees_Charged
              `Reserves `Solvency_II `Interest_Credited
              `Reserves `Solvency_II `Total
              `Reserves `US_Statutory_Life `Premium
              `Reserves `US_Statutory_Life `Life
              `Reserves `US_Statutory_Life `Disability_AH
              `Reserves `US_Statutory_Life `Deposit
              `Reserves `US_Statutory_Life `Expense
              `Reserves `US_Statutory_Life `Total
              `BaFin `Amount `Reserve
              `BaFin `Amount `Net_Amount_at_Risk
              `BaFin `Amount `Premium
              `BaFin `Amount `Benefit
              `BaFin `Amount `Total
              `BaFin `Basis `Reserve
              `BaFin `Basis `Net_Amount_at_Risk
              `BaFin `Basis `Premium
              `BaFin `Basis `Benefit
              `Cashflow `Net_Present_Value `Premium
              `Cashflow `Net_Present_Value `Expense
              `Cashflow `Net_Present_Value `Benefit
              `Cashflow `Net_Present_Value `Other
              `Cashflow `Net_Present_Value `Positive
              `Cashflow `Net_Present_Value `Negative
              `Cashflow `Net_Present_Value `Net
              `Cashflow `Total `Premium
              `Cashflow `Total `Expense
              `Cashflow `Total `Benefit
              `Cashflow `Total `Other
              `Cashflow `Total `Positive
              `Cashflow `Total `Negative
              `Cashflow `Total `Net
              `Participation `Gain `Basis
              `Participation `Gain `Expense
              `Participation `Gain `Interest
              `Participation `Gain `Miscellaneous
              `Participation `Gain `Risk
              `Participation `Dividend `Premium
              `Participation `Pre_Trade `Committed
              `Participation `Pre_Trade `Payable
              `Tax `US `Reserve
              `Tax `US `Premium_Reserve
              `Tax `US `Supplementary_Contracts
              `Tax `US `Div_Accum
              `Tax `US `Special_Reserve
              `Tax `US `Advanced_Premium
              `Tax `US `Required_Interest
              `Tax `US `Excess_Interest
              `Tax `US `Divs_on_Def_Annuities
              `Tax `US `Interest_on_Deposit
              `Tax `US `Policyholder_Divs_Paid
              `Tax `US `Premium_Adjustments
              `Tax `US `Experience_Rated_Refunds
              `Tax `US `Premium_Mortality
              `Tax `US `Annuity_Premium
              `Tax `US `Group_Life_Premium
              `Tax `US `General_Deductions
              `Tax `US `Operations_Loss_Deduction
              `Tax `US `Death_Benefits
              `Tax `US `Dir_or_Ind_Dist
              `Tax `US `DAC_Balance
              `Tax `US `Cash_Value
              `Tax `US `PH_Surplus
              `Tax `HGB `Reserve
              `Tax `HGB `Premium_Reserve
              `Tax `HGB `Supplementary_Contracts
              `Tax `HGB `Div_Accum
              `Tax `HGB `Special_Reserve
              `Tax `HGB `Advanced_Premium
              `Tax `HGB `Required_Interest
              `Tax `HGB `Excess_Interest
              `Tax `HGB `Divs_on_Def_Annuities
              `Tax `HGB `Interest_on_Deposit
              `Tax `HGB `Policyholder_Divs_Paid
              `Tax `HGB `Premium_Adjustments
              `Tax `HGB `Experience_Rated_Refunds
              `Tax `HGB `Premium_Mortality
              `Tax `HGB `Annuity_Premium
              `Tax `HGB `Group_Life_Premium
              `Tax `HGB `General_Deductions
              `Tax `HGB `Operations_Loss_Deduction
              `Tax `HGB `Death_Benefits
              `Tax `HGB `Dir_or_Ind_Dist
              `Tax `HGB `DAC_Balance
              `Tax `HGB `Cash_Value
              `Tax `HGB `PH_Surplus
              `Cashflow `Duration_Modified `Premium
              `Cashflow `Duration_Modified `Expense
              `Cashflow `Duration_Modified `Benefit
              `Cashflow `Duration_Modified `Other
              `Cashflow `Duration_Modified `Positive
              `Cashflow `Duration_Modified `Negative
              `Cashflow `Duration_Modified `Net
              `Cashflow `Convexity_Modified `Premium
              `Cashflow `Convexity_Modified `Expense
              `Cashflow `Convexity_Modified `Benefit
              `Cashflow `Convexity_Modified `Other
              `Cashflow `Convexity_Modified `Positive
              `Cashflow `Convexity_Modified `Negative
              `Cashflow `Convexity_Modified `Net
              `Cashflow `Duration_Fisher_Weil `Premium
              `Cashflow `Duration_Fisher_Weil `Expense
              `Cashflow `Duration_Fisher_Weil `Benefit
              `Cashflow `Duration_Fisher_Weil `Other
              `Cashflow `Duration_Fisher_Weil `Positive
              `Cashflow `Duration_Fisher_Weil `Negative
              `Cashflow `Duration_Fisher_Weil `Net
              `Cashflow `Convexity_Fisher_Weil `Premium
              `Cashflow `Convexity_Fisher_Weil `Expense
              `Cashflow `Convexity_Fisher_Weil `Benefit
              `Cashflow `Convexity_Fisher_Weil `Other
              `Cashflow `Convexity_Fisher_Weil `Positive
              `Cashflow `Convexity_Fisher_Weil `Negative
              `Cashflow `Convexity_Fisher_Weil `Net
              `Basis_Post `Terminal `Earned
              `Basis_Post `Terminal `SGA_Benefit
              `Basis_Post `Terminal `Increase
              `Bonus_Post `Total `Non_Interest
              `Bonus_Post `Total `Interest
              `Bonus_Post `Total `Total
              `Bonus_Post `Total `Payout
              `Bonus_Post `Terminal `Non_Interest
              `Bonus_Post `Terminal `Interest
              `Bonus_Post `Terminal `Total
              `Bonus_Post `Terminal `Payout
              `Bonus_Post `Dividend `Non_Interest
              `Bonus_Post `Dividend `Interest
              `Bonus_Post `Dividend `Total
              `Bonus_Post `Dividend `Payout
              `Bonus_Post `Direct `Non_Interest
              `Bonus_Post `Direct `Interest
              `Bonus_Post `Direct `Total
              `Bonus_Post `Direct `Payout
              `Bonus_Post `Reversionary `Non_Interest
              `Bonus_Post `Reversionary `Interest
              `Bonus_Post `Reversionary `Total
              `Bonus_Post `Reversionary `Payout
              `Bonus_Post `Base `Non_Interest
              `Bonus_Post `Base `Interest
              `Bonus_Post `Base `Total
              `Bonus_Post `Base `Payout
              `Bonus_Post `Dividend `Interest_Extra
              `Bonus_Post `Dividend `Interest_NonExtra
              `Bonus_Post `Dividend `Reserve_Str_Bonus
              `Bonus_Post `Direct `Interest_Extra
              `Bonus_Post `Direct `Interest_NonExtra
              `Bonus_Post `Direct `Reserve_Str_Bonus
              `Bonus_Post `Total `Amount
              `Bonus_Post `Dividend `Amount
              `Bonus_Post `Reversionary `Amount
              `Bonus_Post `Direct `Amount
              `Bonus_Post `Free `Amount
              `Bonus_Post `Total `Reserve_Str_Account
              `Bonus_Post `Total `Reserve_Str_Bonus
              `Bonus_Post `Terminal `Annuity_Declaration
              `Bonus_Post `Terminal `Non_Annuity_Declaration
              `Bonus_Post `Terminal `Annuity_Earned
              `Bonus_Post `Terminal `Non_Annuity_Earned
              `Bonus_Post `Terminal `Annuity_Declaration_Difference
              `Bonus_Post `Terminal `Non_Annuity_Declaration_Difference
              `Bonus_Post `Terminal `Earned
              `Bonus_Post `Terminal `Declaration
              `Bonus_Post `Terminal `Declaration_Difference
              `Bonus_Post `Terminal `Earned_Reduction
              `Bonus_Post `Terminal `Total_Fixed
              `Bonus_Post `Terminal `Total_Dynamic
              `Dividend `Policyholder `Required
              `Dividend `Policyholder `Total
              `Income_Post `VTRUE `Total
              `Income_Post `Investment `Total
              `Income_Post `Pre_Dividend `Total
              `Income_Post `Shareholder `Total
              `Income_Post `Tax `Total
              `Income_Post `Premium_from_Equity `Total
              `Income_Post `VTRUE `Basis
              `Reserve_Post `Terminal `Earned
              `Reserve_Post `Terminal `Declaration
              `Reserve_Post `Terminal `Total
              `Reserve_Post `Terminal `Allocated
              `Reserve_Post `Terminal `Gross
              `Reserve_Post `Terminal `Maturing
              `Reserve_Post `Terminal `Unallocated
              `Reserve_Post `Terminal `Total_Fixed
              `Reserve_Post `Terminal `Total_Dynamic
              `Reserve_Post `Terminal `Allocated_Fixed
              `Reserve_Post `Terminal `Allocated_Dynamic
              `Reserve_Post `Terminal `Unallocated_Fixed
              `Reserve_Post `Terminal `Unallocated_Dynamic
              `Surplus_Post `Shareholder `Total
              `Surplus_Post `Policyholder `Tied
              `Surplus_Post `Policyholder `Free
              `Surplus_Post `Policyholder `Total
              `Surplus_Post `Policyholder `Terminal
              `Reserves_Post `Economic `Total
              `Reserves_Post `Economic `Benefit
              `Reserves_Post `Economic `Expense
              `Reserves_Post `Economic `Premium
              `Reserves_Post `Economic `Other
              `Reserves_Post `US_GAAP `Total
              `Reserves_Post `US_GAAP `Benefit
              `Reserves_Post `US_GAAP `Expense
              `Reserves_Post `US_GAAP `Premium
              `Reserves_Post `US_GAAP `Other
              `Reserves_Post `IFRS `Total
              `Reserves_Post `IFRS `Benefit
              `Reserves_Post `IFRS `Expense
              `Reserves_Post `IFRS `Premium
              `Reserves_Post `IFRS `Other
              `Reserves_Post `Solvency_II `Total
              `Reserves_Post `Solvency_II `Benefit
              `Reserves_Post `Solvency_II `Expense
              `Reserves_Post `Solvency_II `Premium
              `Reserves_Post `Solvency_II `Other
              `Participation `Dividend `Credit
              `Participation `Dividend `Adjusted_Premium
              `Participation `Final `Committed
              `Participation `Final `Payable);`Category `Type `Item];)
            (`J
             .,(`Product_Group
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Product_Group;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Product_Group];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Product_Group];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Product_Group;,0#`];)
                  (`F
                   ,`Product_Group
                   ))
                )
             )
            (`U
             ,`Product_Group
             )
            (`XX
             `Annuity_Declaration `Non_Annuity_Declaration `Declaration `SGA_Base `SGA_Benefit `Earned `Death `Surrender `Maturity `Annuity `Total `Transfer `Reserve `Terminal `Non_Interest `Direct `Dividend `Non_Interest_Dynamic `Extra_Fixed `Annuity_Non_Interest `Non_Annuity_Non_Interest `Annuity_Extra_Fixed `Non_Annuity_Extra_Fixed `Factor `Req_Add_Reserve `Annuity_Earned `Non_Annuity_Earned `Annuity_Maturing `Non_Annuity_Maturing `Annuity_Total_Dynamic `Non_Annuity_Total_Dynamic `Total_Fixed `Total_Dynamic `Gross `Maturing `Rebates `Received `Annuity_Unallocated `Non_Annuity_Unallocated `Annuity_Allocated `Non_Annuity_Allocated `Allocated `Unallocated `Annuity_Allocated_Fixed `Non_Annuity_Allocated_Fixed `Annuity_Total_Fixed `Non_Annuity_Total_Fixed `Allocated_Fixed `Allocated_Dynamic `Unallocated_Fixed `Unallocated_Dynamic `Annuity_Required `Non_Annuity_Required `Annuity_Projected `Non_Annuity_Projected `Projected `Required `Future `Reserve_Payout `User_Data_1 `User_Data_2 `Benefit `NAR `Premium `Inforce `Other `Lapse `Disability_AH `Non_Exit `Adjustments `Acquisition `Commission `Maintenance `Overhead `Base `Dynamic_Interest `Policy `Separate `Negative `On_Deposit `Interest `Investment `Non_Terminal `Non_Premium `Income `Expense `Fees_Charged `Interest_Credited `DAC_Asset `Life `Deposit `Net_Amount_at_Risk `Positive `Net `Basis `Miscellaneous `Risk `Committed `Payable `Premium_Reserve `Supplementary_Contracts `Div_Accum `Special_Reserve `Advanced_Premium `Required_Interest `Excess_Interest `Divs_on_Def_Annuities `Interest_on_Deposit `Policyholder_Divs_Paid `Premium_Adjustments `Experience_Rated_Refunds `Premium_Mortality `Annuity_Premium `Group_Life_Premium `General_Deductions `Operations_Loss_Deduction `Death_Benefits `Dir_or_Ind_Dist `DAC_Balance `Cash_Value `PH_Surplus `Increase `Payout `Interest_Extra `Interest_NonExtra `Reserve_Str_Bonus `Amount `Reserve_Str_Account `Annuity_Declaration_Difference `Non_Annuity_Declaration_Difference `Declaration_Difference `Earned_Reduction `Tied `Free `Credit `Adjusted_Premium
             )))
         (`Property_Casualty
          .((`Product
             `Product_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Product;,`Any_Product_];))
            (`Basis
             `Net
             .,(`V;{[p;x]:[(x _in`Ceded`Net)&~`Reinsurance _in .G.submodules; :,(1;"Cannot choose Ceded or Net basis without running Reinsurance module")]};))
            (`Item
             `Underwriting_Result
             .,(`V;{[modon;p;x] :[x _in modon@{x@&~x _lin y}[!modon;.G.submodules]; (1;"Item is disabled in module selection button")]}[.((`Underwriting_Expenses;`UWE;)
                  (`Commissions_and_Brokerage;`CBE;)
                  (`Taxes_Licenses_and_Fees;`TLF;)
                  (`Contingent_Commissions;`Contingent_Commission;)
                  (`Management_Fees;`MGT;)
                  (`Policyholder_Dividends;`PHD;)
                  (`Allocated;`ALAE;)
                  (`Unallocated;`ULAE;)
                  (`Salvage_and_Subrogation;`SS;))];))
            (`Transaction
             `Cashflow
             .,(`V;{[p;x]:[(`Unpaid~x)&~`Reserves _in .G.submodules; (1;"Reserves disabled in module selection button")]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cl
                .,(`Product;`Product;)
                )
               (`cell
                .((`Product
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Product_ `Any_Product_ `Product_1
                      ))
                   )
                  (`Basis
                   .((`c;`combo;)
                     (`o
                      `Ceded `Gross `Net
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `ALAE `Acquisition_Costs `CBE `Contingent_Commission `Exposure `Float `Loss `Loss_ALAE_Net_SS `Loss_Catastrophe `Loss_LAE_Net_SS `Loss_Non_Catastrophe `MGT `PHD `Premium `SS `TLF `ULAE `UWE `Underwriting_Result
                      ))
                   )
                  (`Transaction
                   .((`c;`combo;)
                     (`o
                      `Accrued `Balance `Cashflow `Drafts_Outstanding `Earned `Incurred `Paid `Payable `Receivable `Received `True_Ultimate `Unearned `Unpaid `Written
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Product;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_PCInsurance.html;)
            (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Gross `Premium `Written
              `Gross `Premium `Earned
              `Gross `Premium `True_Ultimate
              `Gross `Premium `Received
              `Gross `Premium `Cashflow
              `Gross `Premium `Unearned
              `Gross `Premium `Receivable
              `Ceded `Premium `Written
              `Ceded `Premium `Earned
              `Ceded `Premium `True_Ultimate
              `Ceded `Premium `Received
              `Ceded `Premium `Cashflow
              `Ceded `Premium `Unearned
              `Ceded `Premium `Receivable
              `Net `Premium `Written
              `Net `Premium `Earned
              `Net `Premium `True_Ultimate
              `Net `Premium `Received
              `Net `Premium `Cashflow
              `Net `Premium `Unearned
              `Net `Premium `Receivable
              `Gross `Exposure `Written
              `Gross `Exposure `Earned
              `Gross `Loss `True_Ultimate
              `Gross `Loss `Paid
              `Gross `Loss `Unpaid
              `Gross `ALAE `True_Ultimate
              `Gross `ALAE `Paid
              `Gross `ALAE `Unpaid
              `Gross `Loss_LAE_Net_SS `True_Ultimate
              `Gross `Loss_LAE_Net_SS `Paid
              `Gross `Loss_LAE_Net_SS `Unpaid
              `Ceded `Loss `True_Ultimate
              `Ceded `Loss `Paid
              `Ceded `Loss `Unpaid
              `Ceded `ALAE `True_Ultimate
              `Ceded `ALAE `Paid
              `Ceded `ALAE `Unpaid
              `Ceded `Loss_LAE_Net_SS `True_Ultimate
              `Ceded `Loss_LAE_Net_SS `Paid
              `Ceded `Loss_LAE_Net_SS `Unpaid
              `Net `Loss `True_Ultimate
              `Net `Loss `Paid
              `Net `Loss `Unpaid
              `Net `ALAE `True_Ultimate
              `Net `ALAE `Paid
              `Net `ALAE `Unpaid
              `Net `Loss_LAE_Net_SS `True_Ultimate
              `Net `Loss_LAE_Net_SS `Paid
              `Net `Loss_LAE_Net_SS `Unpaid
              `Gross `ULAE `True_Ultimate
              `Gross `ULAE `Paid
              `Gross `ULAE `Unpaid
              `Gross `UWE `Written
              `Gross `UWE `Earned
              `Gross `UWE `True_Ultimate
              `Gross `UWE `Payable
              `Gross `TLF `Written
              `Gross `TLF `Earned
              `Gross `TLF `True_Ultimate
              `Gross `TLF `Payable
              `Gross `MGT `Written
              `Gross `MGT `Earned
              `Gross `MGT `True_Ultimate
              `Gross `MGT `Payable
              `Gross `CBE `Written
              `Gross `CBE `Earned
              `Gross `CBE `True_Ultimate
              `Gross `CBE `Payable
              `Gross `PHD `Written
              `Gross `PHD `Earned
              `Gross `PHD `True_Ultimate
              `Gross `PHD `Payable
              `Ceded `UWE `Written
              `Ceded `UWE `Earned
              `Ceded `UWE `True_Ultimate
              `Ceded `UWE `Payable
              `Ceded `TLF `Written
              `Ceded `TLF `Earned
              `Ceded `TLF `True_Ultimate
              `Ceded `TLF `Payable
              `Ceded `MGT `Written
              `Ceded `MGT `Earned
              `Ceded `MGT `True_Ultimate
              `Ceded `MGT `Payable
              `Ceded `CBE `Written
              `Ceded `CBE `Earned
              `Ceded `CBE `True_Ultimate
              `Ceded `CBE `Payable
              `Ceded `PHD `Written
              `Ceded `PHD `Earned
              `Ceded `PHD `True_Ultimate
              `Ceded `PHD `Payable
              `Net `UWE `Written
              `Net `UWE `Earned
              `Net `UWE `True_Ultimate
              `Net `UWE `Payable
              `Net `TLF `Written
              `Net `TLF `Earned
              `Net `TLF `True_Ultimate
              `Net `TLF `Payable
              `Net `MGT `Written
              `Net `MGT `Earned
              `Net `MGT `True_Ultimate
              `Net `MGT `Payable
              `Net `CBE `Written
              `Net `CBE `Earned
              `Net `CBE `True_Ultimate
              `Net `CBE `Payable
              `Net `PHD `Written
              `Net `PHD `Earned
              `Net `PHD `True_Ultimate
              `Net `PHD `Payable
              `Gross `UWE `Paid
              `Gross `TLF `Paid
              `Gross `MGT `Paid
              `Gross `CBE `Paid
              `Gross `PHD `Paid
              `Gross `Acquisition_Costs `Paid
              `Gross `Float `Balance
              `Ceded `Float `Balance
              `Net `Float `Balance
              `Gross `Underwriting_Result `True_Ultimate
              `Gross `Loss `True_Ultimate
              `Gross `ALAE `True_Ultimate
              `Gross `SS `True_Ultimate
              `Gross `Loss_Catastrophe `True_Ultimate
              `Gross `Loss_ALAE_Net_SS `True_Ultimate
              `Gross `Loss_Non_Catastrophe `True_Ultimate
              `Ceded `Underwriting_Result `True_Ultimate
              `Ceded `Loss `True_Ultimate
              `Ceded `ALAE `True_Ultimate
              `Ceded `SS `True_Ultimate
              `Ceded `Loss_Catastrophe `True_Ultimate
              `Ceded `Loss_ALAE_Net_SS `True_Ultimate
              `Ceded `Loss_Non_Catastrophe `True_Ultimate
              `Net `Underwriting_Result `True_Ultimate
              `Net `Loss `True_Ultimate
              `Net `ALAE `True_Ultimate
              `Net `SS `True_Ultimate
              `Net `Loss_Catastrophe `True_Ultimate
              `Net `Loss_ALAE_Net_SS `True_Ultimate
              `Net `Loss_Non_Catastrophe `True_Ultimate
              `Gross `Acquisition_Costs `True_Ultimate
              `Ceded `Acquisition_Costs `True_Ultimate
              `Gross `Loss `Drafts_Outstanding
              `Gross `ALAE `Drafts_Outstanding
              `Gross `Contingent_Commission `True_Ultimate
              `Gross `Contingent_Commission `Cashflow
              `Gross `Contingent_Commission `Payable
              `Gross `Contingent_Commission `Accrued
              `Gross `Contingent_Commission `Incurred
              `Gross `Underwriting_Result `True_Ultimate
              `Ceded `Underwriting_Result `True_Ultimate
              `Net `Underwriting_Result `True_Ultimate);`Basis `Item `Transaction];)
            (`J
             .,(`Product
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Product;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Product];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Product];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Product;,0#`];)
                  (`F
                   ,`Product
                   ))
                )
             )
            (`U
             ,`Product
             )
            (`XX
             `Written `Earned `True_Ultimate `Received `Cashflow `Unearned `Receivable `Paid `Unpaid `Payable `Balance `Drafts_Outstanding `Accrued `Incurred
             )))
         (`PC_Reinsurance
          .((`Treaty
             `Treaty_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Treaty;,`Any_Treaty_];))
            (`Item
             `Loss
             .,(`V;{[modon;p;x] :[x _in modon@{x@&~x _lin y}[!modon;.G.submodules]; (1;"Item is disabled in module selection button")]}[.((`Commissions_and_Brokerage;`CBE;)
                  (`Allocated;`ALAE;))];))
            (`Transaction
             `True_Ultimate
             .,(`V;{[p;x]:[(`Unpaid~x)&~`Reserves _in .G.submodules; (1;"Reserves disabled in module selection button")]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`l;`"P&C Reinsurance";)
               (`cell
                .((`Treaty
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Treaty_ `Any_Treaty_ `Treaty_1
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `ALAE `Acquisition_Costs `Loss `Loss_ALAE_Net_SS `Premium
                      ))
                   )
                  (`Transaction
                   .((`c;`combo;)
                     (`o
                      `Cashflow `Earned `Paid `Payable `Receivable `Received `True_Ultimate `Unearned `Unpaid `Written
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Treaty;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_PCReinsurance.html;)
            (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Premium `Written
              `Premium `Earned
              `Premium `True_Ultimate
              `Premium `Received
              `Premium `Cashflow
              `Premium `Unearned
              `Premium `Receivable
              `Acquisition_Costs `Written
              `Acquisition_Costs `Earned
              `Acquisition_Costs `True_Ultimate
              `Acquisition_Costs `Paid
              `Acquisition_Costs `Cashflow
              `Acquisition_Costs `Unearned
              `Acquisition_Costs `Payable
              `Loss `True_Ultimate
              `Loss `Paid
              `Loss `Unpaid
              `ALAE `True_Ultimate
              `ALAE `Paid
              `ALAE `Unpaid
              `Loss_ALAE_Net_SS `True_Ultimate
              `Loss_ALAE_Net_SS `Paid
              `Loss_ALAE_Net_SS `Unpaid);`Item `Transaction];)
            (`J
             .,(`Treaty
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Treaty;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Treaty];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Treaty];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Treaty;,0#`];)
                  (`F
                   ,`Treaty
                   ))
                )
             )
            (`U
             ,`Treaty
             )
            (`XX
             `Written `Earned `True_Ultimate `Received `Cashflow `Unearned `Receivable `Paid `Payable `Unpaid
             )))
         (`Financing
          .((`Instrument
             `Financing_Instrument_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Financing_Instrument;0#`];))
            (`Category;`Share_Balances;.())
            (`Timing;`Final;.())
            (`Item;`Outstanding;.())
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`rl
                .,(`Instrument;`"Financing Instrument";)
                )
               (`cell
                .((`Instrument
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Financing_Instrument_ `Financing_Instrument_1
                      ))
                   )
                  (`Category
                   .((`c;`combo;)
                     (`o
                      `Money_Balances `Share_Balances `Transactions
                      ))
                   )
                  (`Timing
                   .((`c;`combo;)
                     (`o
                      `Pre_Trade `Final
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Additional_Paid_In `Committed `Credit `Credit_Adjustment `Dividend `Dividend_Adjustment `Dividend_Adjustment_Paid `Dividends_Declared `Dividends_Deferred `Dividends_Paid `Dividends_Unpaid `Extra_Decrease `Extra_Increase `Interest_Backlog `Interest_Deferred `Interest_Due `Interest_Paid `Interest_Unpaid `Issued `Market_Value `Outstanding `Par_Value `Payable `Principal `Principal_Paid `Repurchased `Retired `Uncommitted
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Instrument;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_Financing.html;)
            (`V;{[p;x] f:.k.get_s (0;`A;`User;`Financing)
             if[`Unspecified_~x`Instrument; :_n]
             r:.L.V.user_value_list[.C`Financing_List;`Instrument`Category`Timing`Item;p;@[x;`Instrument;:;f[x`Instrument;`m]]]
             :[#r;r;_n]};)
            (`J
             .,(`Financing_Instrument
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Instrument;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Instrument];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Instrument];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Instrument;,0#`];)
                  (`F
                   ,`Instrument
                   ))
                )
             )
            (`U
             ,`Financing_Instrument
             )
            (`XX
             `Dividend `Credit `Outstanding `Committed `Uncommitted `Payable `Dividends_Declared `Dividends_Paid `Interest_Due `Interest_Backlog `Interest_Paid `Principal_Paid `Par_Value `Market_Value `Principal `Additional_Paid_In `Dividends_Unpaid `Dividend_Adjustment `Credit_Adjustment `Extra_Increase `Extra_Decrease `Dividend_Adjustment_Paid `Dividends_Deferred `Retired `Issued `Repurchased `Interest_Deferred `Interest_Unpaid
             )))
         (`Investments
          .((`Module
             `Investments
             .,(`V;{[label;p;x]
  g:`None,.G`submodules
  if[label~"Module"
    if[`HGB_Life _in g; g,:`HGB]
    if[`US_Statutory_Life _in g; g,:`US_Statutory]
    ]
 :[~x _in g;(1;("&0 is not an active &1";$x;label))]}["Module"];))
            (`Portfolio
             `All
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Portfolio;,`All];))
            (`Asset_Class
             `Asset_Class_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Asset_Class;,`HGB_Funds];))
            (`Timing;`Final;.())
            (`Item;`Quantity;.())
            (`Currency
             `Reporting
             .,(`V;{[p;x]:[x~`Original;(0;"Currency of Original may not be available in future releases of the software.");_n]};))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cell
                .((`Portfolio
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Portfolio_ `All `Portfolio_1
                      ))
                   )
                  (`Module
                   .((`c;`combo;)
                     (`o
                      `Investments `Economic `Solvency_II `US_GAAP `IFRS `US_Statutory `HGB
                      ))
                   )
                  (`Asset_Class
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Asset_Class_ `Asset_Class_1
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Accrued_Expenses `Accrued_Expenses_Paid `Accrued_Expenses_Received `Accrued_Income `Accrued_Income_FX_Effect `Accrued_Income_Paid `Accrued_Income_Received `Accrued_Interest `Accrued_Interest_Paid `Accrued_Interest_Received `Amount_Invested `Appreciation `Balance_Sheet_Value `Balance_Sheet_Value_AFS `Balance_Sheet_Value_AV `Balance_Sheet_Value_HTM `Balance_Sheet_Value_LAR `Balance_Sheet_Value_Trading `BzW `Change_in_Accrued_Expenses `Change_in_Accrued_Income `Change_in_Income_Basis `Change_in_Unrealized_Gain `Consideration_Paid `Consideration_Received `Constant_Yield_Adjustment `Constant_Yield_Amortized_Cost `Cost_Value `Depreciation `Derivatives_Cash_Flow `Dividends_Declared `Dividends_Receivable `Dividends_Received `Expenses_Paid `Fluctuation_Reserve `HGB_Cost_AV `HGB_Cost_UV `Hidden_Reserves `Hidden_Reserves_AV `Hidden_Reserves_Negative `Hidden_Reserves_Positive `IRR `Income_Basis `Income_Basis_FX_Effect `Income_Basis_of_Purchases `Income_Basis_of_Trades `Income_FX_Effect `Income_Received `Interest_Received `Market_Value `Market_Value_QIS5_Shock_Down `Market_Value_QIS5_Shock_Up `Market_Value_Times_Convexity_Fisher_Weil `Market_Value_Times_Convexity_Modified `Market_Value_Times_Duration_Fisher_Weil `Market_Value_Times_Duration_Modified `Market_Value_Times_Maturity `Market_Value_for_Fisher_Weil `Market_Value_of_Maturing `Net_Income_Earned `Net_Ordinary_Income_Gain `Notional_Amount `Price_Paid `Price_Received `Principal_Received `Property_Expenses_Paid `Quantity `Quantity_AV `Quantity_UV `Realized_Gain `Realized_Gain_AVR `Realized_Gain_IMR `Realized_Gain_Negative `Realized_Gain_Positive `Reclassification_Gain `Rent_Received `Return_of_Market_Value `Risk_Adjusted_IRR `Sell_Realized_Gain `Total_Gain `Unrealized_Gain `Unrealized_Gain_FX `Unrealized_Gain_FX_Effect `Unrealized_Gain_Negative `Unrealized_Gain_Positive `Unrealized_Gain_nonFX
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   )
                  (`Timing
                   .((`c;`combo;)
                     (`o
                      `Pre_Trade `Final
                      ))
                   )
                  (`Currency
                   .((`c;`combo;)
                     (`o
                      `Original `Reporting
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .((`Portfolio;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                  (`Asset_Class;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
                ))
             )
            (`X;`UserValues_Arguments_Source_Investments.html;)
            (`V;{[c;l;p;x]
  r:()
  if[~x[l] _in c
    list:x[l]
    good:(); i:0; do[#list; if[#&list[!1+i]~/:c[;!1+i];good,:l i]; i+:1]        / find the part of data that is good
    valid:?c[;#good]@&list[!#good]~/:c[;!#good]                                 / list of valid items for the next index
    bad:$l[#good]                                                               / bad element for making valid suggestions
    good::[#good;{2_ ,/ :[2=#x;@[x;1;{" and",1_ x}];2<#x;@[x;-1+#x;{", and",1_ x}];x]}[{", ",($x)," = ",$y}'[good;list[!#good]]];"first entry"]
    valid::[1=#valid;$*valid;2_ ,/@[", ",/:$:'valid;-1+#valid;{", and",1_ x}]]
    r,:,(1;("Invalid User Value entries.  Valid &0 entries for &1 are &2.";bad;good;valid);,,l)
    ]
  :[#r;r;_n]}[(`Investments `Pre_Trade `Quantity
              `Investments `Pre_Trade `Notional_Amount
              `Investments `Pre_Trade `Cost_Value
              `Investments `Pre_Trade `Constant_Yield_Amortized_Cost
              `Investments `Pre_Trade `Market_Value
              `Investments `Pre_Trade `Market_Value_QIS5_Shock_Up
              `Investments `Pre_Trade `Market_Value_QIS5_Shock_Down
              `Investments `Pre_Trade `Constant_Yield_Adjustment
              `Investments `Pre_Trade `Accrued_Interest
              `Investments `Pre_Trade `Interest_Received
              `Investments `Pre_Trade `Return_of_Market_Value
              `Investments `Pre_Trade `Market_Value_for_Fisher_Weil
              `Investments `Pre_Trade `Market_Value_Times_Duration_Fisher_Weil
              `Investments `Pre_Trade `Market_Value_Times_Convexity_Fisher_Weil
              `Investments `Pre_Trade `Market_Value_Times_Duration_Modified
              `Investments `Pre_Trade `Market_Value_Times_Convexity_Modified
              `Investments `Pre_Trade `Market_Value_Times_Maturity
              `Investments `Pre_Trade `Market_Value_of_Maturing
              `Investments `Pre_Trade `Dividends_Declared
              `Investments `Pre_Trade `Dividends_Received
              `Investments `Pre_Trade `Dividends_Receivable
              `Investments `Pre_Trade `Consideration_Paid
              `Investments `Pre_Trade `Price_Paid
              `Investments `Pre_Trade `Consideration_Received
              `Investments `Pre_Trade `Price_Received
              `Investments `Pre_Trade `Principal_Received
              `Investments `Pre_Trade `Rent_Received
              `Investments `Pre_Trade `Property_Expenses_Paid
              `Investments `Pre_Trade `Derivatives_Cash_Flow
              `Economic `Pre_Trade `Income_Basis
              `Economic `Pre_Trade `Balance_Sheet_Value
              `Economic `Pre_Trade `Balance_Sheet_Value_HTM
              `Economic `Pre_Trade `Balance_Sheet_Value_LAR
              `Economic `Pre_Trade `Balance_Sheet_Value_AFS
              `Economic `Pre_Trade `Balance_Sheet_Value_Trading
              `Economic `Pre_Trade `Realized_Gain
              `Economic `Pre_Trade `Unrealized_Gain
              `Economic `Pre_Trade `Change_in_Unrealized_Gain
              `Economic `Pre_Trade `Accrued_Income
              `Economic `Pre_Trade `Income_Basis_of_Trades
              `Economic `Pre_Trade `Change_in_Income_Basis
              `Economic `Pre_Trade `Income_Received
              `Economic `Pre_Trade `Expenses_Paid
              `Economic `Pre_Trade `Net_Income_Earned
              `Economic `Pre_Trade `Income_Basis_FX_Effect
              `Economic `Pre_Trade `Accrued_Income_FX_Effect
              `Economic `Pre_Trade `Income_FX_Effect
              `Economic `Pre_Trade `Unrealized_Gain_FX_Effect
              `Economic `Pre_Trade `Appreciation
              `Economic `Pre_Trade `Depreciation
              `Economic `Pre_Trade `Realized_Gain_Positive
              `Economic `Pre_Trade `Realized_Gain_Negative
              `Economic `Pre_Trade `Unrealized_Gain_Positive
              `Economic `Pre_Trade `Unrealized_Gain_Negative
              `Economic `Pre_Trade `BzW
              `Economic `Pre_Trade `Fluctuation_Reserve
              `Economic `Pre_Trade `Amount_Invested
              `Economic `Pre_Trade `Hidden_Reserves
              `Economic `Pre_Trade `Hidden_Reserves_Positive
              `Economic `Pre_Trade `Hidden_Reserves_Negative
              `Economic `Pre_Trade `Balance_Sheet_Value_AV
              `Economic `Pre_Trade `Quantity_AV
              `Economic `Pre_Trade `Quantity_UV
              `Economic `Pre_Trade `HGB_Cost_AV
              `Economic `Pre_Trade `HGB_Cost_UV
              `Economic `Pre_Trade `Hidden_Reserves_AV
              `Solvency_II `Pre_Trade `Income_Basis
              `Solvency_II `Pre_Trade `Balance_Sheet_Value
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_HTM
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_LAR
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_AFS
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_Trading
              `Solvency_II `Pre_Trade `Realized_Gain
              `Solvency_II `Pre_Trade `Unrealized_Gain
              `Solvency_II `Pre_Trade `Change_in_Unrealized_Gain
              `Solvency_II `Pre_Trade `Accrued_Income
              `Solvency_II `Pre_Trade `Income_Basis_of_Trades
              `Solvency_II `Pre_Trade `Change_in_Income_Basis
              `Solvency_II `Pre_Trade `Income_Received
              `Solvency_II `Pre_Trade `Expenses_Paid
              `Solvency_II `Pre_Trade `Net_Income_Earned
              `Solvency_II `Pre_Trade `Income_Basis_FX_Effect
              `Solvency_II `Pre_Trade `Accrued_Income_FX_Effect
              `Solvency_II `Pre_Trade `Income_FX_Effect
              `Solvency_II `Pre_Trade `Unrealized_Gain_FX_Effect
              `Solvency_II `Pre_Trade `Appreciation
              `Solvency_II `Pre_Trade `Depreciation
              `Solvency_II `Pre_Trade `Realized_Gain_Positive
              `Solvency_II `Pre_Trade `Realized_Gain_Negative
              `Solvency_II `Pre_Trade `Unrealized_Gain_Positive
              `Solvency_II `Pre_Trade `Unrealized_Gain_Negative
              `Solvency_II `Pre_Trade `BzW
              `Solvency_II `Pre_Trade `Fluctuation_Reserve
              `Solvency_II `Pre_Trade `Amount_Invested
              `Solvency_II `Pre_Trade `Hidden_Reserves
              `Solvency_II `Pre_Trade `Hidden_Reserves_Positive
              `Solvency_II `Pre_Trade `Hidden_Reserves_Negative
              `Solvency_II `Pre_Trade `Balance_Sheet_Value_AV
              `Solvency_II `Pre_Trade `Quantity_AV
              `Solvency_II `Pre_Trade `Quantity_UV
              `Solvency_II `Pre_Trade `HGB_Cost_AV
              `Solvency_II `Pre_Trade `HGB_Cost_UV
              `Solvency_II `Pre_Trade `Hidden_Reserves_AV
              `US_GAAP `Pre_Trade `Income_Basis
              `US_GAAP `Pre_Trade `Balance_Sheet_Value
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_HTM
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_LAR
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_AFS
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_Trading
              `US_GAAP `Pre_Trade `Realized_Gain
              `US_GAAP `Pre_Trade `Unrealized_Gain
              `US_GAAP `Pre_Trade `Change_in_Unrealized_Gain
              `US_GAAP `Pre_Trade `Accrued_Income
              `US_GAAP `Pre_Trade `Income_Basis_of_Trades
              `US_GAAP `Pre_Trade `Change_in_Income_Basis
              `US_GAAP `Pre_Trade `Income_Received
              `US_GAAP `Pre_Trade `Expenses_Paid
              `US_GAAP `Pre_Trade `Net_Income_Earned
              `US_GAAP `Pre_Trade `Income_Basis_FX_Effect
              `US_GAAP `Pre_Trade `Accrued_Income_FX_Effect
              `US_GAAP `Pre_Trade `Income_FX_Effect
              `US_GAAP `Pre_Trade `Unrealized_Gain_FX_Effect
              `US_GAAP `Pre_Trade `Appreciation
              `US_GAAP `Pre_Trade `Depreciation
              `US_GAAP `Pre_Trade `Realized_Gain_Positive
              `US_GAAP `Pre_Trade `Realized_Gain_Negative
              `US_GAAP `Pre_Trade `Unrealized_Gain_Positive
              `US_GAAP `Pre_Trade `Unrealized_Gain_Negative
              `US_GAAP `Pre_Trade `BzW
              `US_GAAP `Pre_Trade `Fluctuation_Reserve
              `US_GAAP `Pre_Trade `Amount_Invested
              `US_GAAP `Pre_Trade `Hidden_Reserves
              `US_GAAP `Pre_Trade `Hidden_Reserves_Positive
              `US_GAAP `Pre_Trade `Hidden_Reserves_Negative
              `US_GAAP `Pre_Trade `Balance_Sheet_Value_AV
              `US_GAAP `Pre_Trade `Quantity_AV
              `US_GAAP `Pre_Trade `Quantity_UV
              `US_GAAP `Pre_Trade `HGB_Cost_AV
              `US_GAAP `Pre_Trade `HGB_Cost_UV
              `US_GAAP `Pre_Trade `Hidden_Reserves_AV
              `IFRS `Pre_Trade `Income_Basis
              `IFRS `Pre_Trade `Balance_Sheet_Value
              `IFRS `Pre_Trade `Balance_Sheet_Value_HTM
              `IFRS `Pre_Trade `Balance_Sheet_Value_LAR
              `IFRS `Pre_Trade `Balance_Sheet_Value_AFS
              `IFRS `Pre_Trade `Balance_Sheet_Value_Trading
              `IFRS `Pre_Trade `Realized_Gain
              `IFRS `Pre_Trade `Unrealized_Gain
              `IFRS `Pre_Trade `Change_in_Unrealized_Gain
              `IFRS `Pre_Trade `Accrued_Income
              `IFRS `Pre_Trade `Income_Basis_of_Trades
              `IFRS `Pre_Trade `Change_in_Income_Basis
              `IFRS `Pre_Trade `Income_Received
              `IFRS `Pre_Trade `Expenses_Paid
              `IFRS `Pre_Trade `Net_Income_Earned
              `IFRS `Pre_Trade `Income_Basis_FX_Effect
              `IFRS `Pre_Trade `Accrued_Income_FX_Effect
              `IFRS `Pre_Trade `Income_FX_Effect
              `IFRS `Pre_Trade `Unrealized_Gain_FX_Effect
              `IFRS `Pre_Trade `Appreciation
              `IFRS `Pre_Trade `Depreciation
              `IFRS `Pre_Trade `Realized_Gain_Positive
              `IFRS `Pre_Trade `Realized_Gain_Negative
              `IFRS `Pre_Trade `Unrealized_Gain_Positive
              `IFRS `Pre_Trade `Unrealized_Gain_Negative
              `IFRS `Pre_Trade `BzW
              `IFRS `Pre_Trade `Fluctuation_Reserve
              `IFRS `Pre_Trade `Amount_Invested
              `IFRS `Pre_Trade `Hidden_Reserves
              `IFRS `Pre_Trade `Hidden_Reserves_Positive
              `IFRS `Pre_Trade `Hidden_Reserves_Negative
              `IFRS `Pre_Trade `Balance_Sheet_Value_AV
              `IFRS `Pre_Trade `Quantity_AV
              `IFRS `Pre_Trade `Quantity_UV
              `IFRS `Pre_Trade `HGB_Cost_AV
              `IFRS `Pre_Trade `HGB_Cost_UV
              `IFRS `Pre_Trade `Hidden_Reserves_AV
              `US_Statutory `Pre_Trade `Income_Basis
              `US_Statutory `Pre_Trade `Balance_Sheet_Value
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_HTM
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_LAR
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_AFS
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_Trading
              `US_Statutory `Pre_Trade `Realized_Gain
              `US_Statutory `Pre_Trade `Unrealized_Gain
              `US_Statutory `Pre_Trade `Change_in_Unrealized_Gain
              `US_Statutory `Pre_Trade `Accrued_Income
              `US_Statutory `Pre_Trade `Income_Basis_of_Trades
              `US_Statutory `Pre_Trade `Change_in_Income_Basis
              `US_Statutory `Pre_Trade `Income_Received
              `US_Statutory `Pre_Trade `Expenses_Paid
              `US_Statutory `Pre_Trade `Net_Income_Earned
              `US_Statutory `Pre_Trade `Income_Basis_FX_Effect
              `US_Statutory `Pre_Trade `Accrued_Income_FX_Effect
              `US_Statutory `Pre_Trade `Income_FX_Effect
              `US_Statutory `Pre_Trade `Unrealized_Gain_FX_Effect
              `US_Statutory `Pre_Trade `Appreciation
              `US_Statutory `Pre_Trade `Depreciation
              `US_Statutory `Pre_Trade `Realized_Gain_Positive
              `US_Statutory `Pre_Trade `Realized_Gain_Negative
              `US_Statutory `Pre_Trade `Unrealized_Gain_Positive
              `US_Statutory `Pre_Trade `Unrealized_Gain_Negative
              `US_Statutory `Pre_Trade `BzW
              `US_Statutory `Pre_Trade `Fluctuation_Reserve
              `US_Statutory `Pre_Trade `Amount_Invested
              `US_Statutory `Pre_Trade `Hidden_Reserves
              `US_Statutory `Pre_Trade `Hidden_Reserves_Positive
              `US_Statutory `Pre_Trade `Hidden_Reserves_Negative
              `US_Statutory `Pre_Trade `Balance_Sheet_Value_AV
              `US_Statutory `Pre_Trade `Quantity_AV
              `US_Statutory `Pre_Trade `Quantity_UV
              `US_Statutory `Pre_Trade `HGB_Cost_AV
              `US_Statutory `Pre_Trade `HGB_Cost_UV
              `US_Statutory `Pre_Trade `Hidden_Reserves_AV
              `HGB `Pre_Trade `Income_Basis
              `HGB `Pre_Trade `Balance_Sheet_Value
              `HGB `Pre_Trade `Balance_Sheet_Value_HTM
              `HGB `Pre_Trade `Balance_Sheet_Value_LAR
              `HGB `Pre_Trade `Balance_Sheet_Value_AFS
              `HGB `Pre_Trade `Balance_Sheet_Value_Trading
              `HGB `Pre_Trade `Realized_Gain
              `HGB `Pre_Trade `Unrealized_Gain
              `HGB `Pre_Trade `Change_in_Unrealized_Gain
              `HGB `Pre_Trade `Accrued_Income
              `HGB `Pre_Trade `Income_Basis_of_Trades
              `HGB `Pre_Trade `Change_in_Income_Basis
              `HGB `Pre_Trade `Income_Received
              `HGB `Pre_Trade `Expenses_Paid
              `HGB `Pre_Trade `Net_Income_Earned
              `HGB `Pre_Trade `Income_Basis_FX_Effect
              `HGB `Pre_Trade `Accrued_Income_FX_Effect
              `HGB `Pre_Trade `Income_FX_Effect
              `HGB `Pre_Trade `Unrealized_Gain_FX_Effect
              `HGB `Pre_Trade `Appreciation
              `HGB `Pre_Trade `Depreciation
              `HGB `Pre_Trade `Realized_Gain_Positive
              `HGB `Pre_Trade `Realized_Gain_Negative
              `HGB `Pre_Trade `Unrealized_Gain_Positive
              `HGB `Pre_Trade `Unrealized_Gain_Negative
              `Investments `Final `Quantity
              `Investments `Final `Cost_Value
              `Investments `Final `Constant_Yield_Amortized_Cost
              `Investments `Final `Market_Value
              `Investments `Final `Market_Value_QIS5_Shock_Up
              `Investments `Final `Market_Value_QIS5_Shock_Down
              `Investments `Final `Interest_Received
              `Investments `Final `Dividends_Received
              `Investments `Final `Rent_Received
              `Investments `Final `Accrued_Interest
              `Investments `Final `Consideration_Paid
              `Investments `Final `Price_Paid
              `Investments `Final `Accrued_Interest_Paid
              `Investments `Final `Consideration_Received
              `Investments `Final `Price_Received
              `Investments `Final `Accrued_Interest_Received
              `Investments `Final `Notional_Amount
              `Investments `Final `Market_Value_for_Fisher_Weil
              `Investments `Final `Market_Value_Times_Duration_Fisher_Weil
              `Investments `Final `Market_Value_Times_Convexity_Fisher_Weil
              `Investments `Final `Market_Value_Times_Duration_Modified
              `Investments `Final `Market_Value_Times_Convexity_Modified
              `Investments `Final `Market_Value_Times_Maturity
              `HGB `Final `Income_Basis
              `HGB `Final `Realized_Gain
              `HGB `Final `Unrealized_Gain
              `HGB `Final `Sell_Realized_Gain
              `HGB `Final `Reclassification_Gain
              `HGB `Final `Net_Ordinary_Income_Gain
              `HGB `Final `Balance_Sheet_Value
              `HGB `Final `Balance_Sheet_Value_HTM
              `HGB `Final `Balance_Sheet_Value_LAR
              `HGB `Final `Balance_Sheet_Value_AFS
              `HGB `Final `Balance_Sheet_Value_Trading
              `HGB `Final `Income_Basis_of_Purchases
              `HGB `Final `Change_in_Income_Basis
              `HGB `Final `Accrued_Income
              `HGB `Final `Accrued_Income_Paid
              `HGB `Final `Accrued_Income_Received
              `HGB `Final `Accrued_Expenses
              `HGB `Final `Accrued_Expenses_Received
              `HGB `Final `Accrued_Expenses_Paid
              `HGB `Final `Change_in_Accrued_Income
              `HGB `Final `Change_in_Accrued_Expenses
              `HGB `Final `Net_Income_Earned
              `HGB `Final `Change_in_Unrealized_Gain
              `HGB `Final `Appreciation
              `HGB `Final `Depreciation
              `HGB `Final `Realized_Gain_Positive
              `HGB `Final `Realized_Gain_Negative
              `HGB `Final `Unrealized_Gain_Positive
              `HGB `Final `Unrealized_Gain_Negative
              `HGB `Final `Total_Gain
              `HGB `Final `BzW
              `HGB `Final `Fluctuation_Reserve
              `HGB `Final `Amount_Invested
              `HGB `Final `Hidden_Reserves
              `HGB `Final `Hidden_Reserves_Positive
              `HGB `Final `Hidden_Reserves_Negative
              `HGB `Final `Balance_Sheet_Value_AV
              `HGB `Final `Quantity_AV
              `HGB `Final `Quantity_UV
              `HGB `Final `Hidden_Reserves_AV
              `Economic `Final `Income_Basis
              `Economic `Final `Realized_Gain
              `Economic `Final `Unrealized_Gain
              `Economic `Final `Sell_Realized_Gain
              `Economic `Final `Reclassification_Gain
              `Economic `Final `Net_Ordinary_Income_Gain
              `Economic `Final `Balance_Sheet_Value
              `Economic `Final `Balance_Sheet_Value_HTM
              `Economic `Final `Balance_Sheet_Value_LAR
              `Economic `Final `Balance_Sheet_Value_AFS
              `Economic `Final `Balance_Sheet_Value_Trading
              `Economic `Final `Income_Basis_of_Purchases
              `Economic `Final `Change_in_Income_Basis
              `Economic `Final `Accrued_Income
              `Economic `Final `Accrued_Income_Paid
              `Economic `Final `Accrued_Income_Received
              `Economic `Final `Accrued_Expenses
              `Economic `Final `Accrued_Expenses_Received
              `Economic `Final `Accrued_Expenses_Paid
              `Economic `Final `Change_in_Accrued_Income
              `Economic `Final `Change_in_Accrued_Expenses
              `Economic `Final `Net_Income_Earned
              `Economic `Final `Change_in_Unrealized_Gain
              `Economic `Final `Appreciation
              `Economic `Final `Depreciation
              `Economic `Final `Realized_Gain_Positive
              `Economic `Final `Realized_Gain_Negative
              `Economic `Final `Unrealized_Gain_Positive
              `Economic `Final `Unrealized_Gain_Negative
              `Economic `Final `Total_Gain
              `Solvency_II `Final `Income_Basis
              `Solvency_II `Final `Realized_Gain
              `Solvency_II `Final `Unrealized_Gain
              `Solvency_II `Final `Sell_Realized_Gain
              `Solvency_II `Final `Reclassification_Gain
              `Solvency_II `Final `Net_Ordinary_Income_Gain
              `Solvency_II `Final `Balance_Sheet_Value
              `Solvency_II `Final `Balance_Sheet_Value_HTM
              `Solvency_II `Final `Balance_Sheet_Value_LAR
              `Solvency_II `Final `Balance_Sheet_Value_AFS
              `Solvency_II `Final `Balance_Sheet_Value_Trading
              `Solvency_II `Final `Income_Basis_of_Purchases
              `Solvency_II `Final `Change_in_Income_Basis
              `Solvency_II `Final `Accrued_Income
              `Solvency_II `Final `Accrued_Income_Paid
              `Solvency_II `Final `Accrued_Income_Received
              `Solvency_II `Final `Accrued_Expenses
              `Solvency_II `Final `Accrued_Expenses_Received
              `Solvency_II `Final `Accrued_Expenses_Paid
              `Solvency_II `Final `Change_in_Accrued_Income
              `Solvency_II `Final `Change_in_Accrued_Expenses
              `Solvency_II `Final `Net_Income_Earned
              `Solvency_II `Final `Change_in_Unrealized_Gain
              `Solvency_II `Final `Appreciation
              `Solvency_II `Final `Depreciation
              `Solvency_II `Final `Realized_Gain_Positive
              `Solvency_II `Final `Realized_Gain_Negative
              `Solvency_II `Final `Unrealized_Gain_Positive
              `Solvency_II `Final `Unrealized_Gain_Negative
              `Solvency_II `Final `Total_Gain
              `US_GAAP `Final `Income_Basis
              `US_GAAP `Final `Realized_Gain
              `US_GAAP `Final `Unrealized_Gain
              `US_GAAP `Final `Sell_Realized_Gain
              `US_GAAP `Final `Reclassification_Gain
              `US_GAAP `Final `Net_Ordinary_Income_Gain
              `US_GAAP `Final `Balance_Sheet_Value
              `US_GAAP `Final `Balance_Sheet_Value_HTM
              `US_GAAP `Final `Balance_Sheet_Value_LAR
              `US_GAAP `Final `Balance_Sheet_Value_AFS
              `US_GAAP `Final `Balance_Sheet_Value_Trading
              `US_GAAP `Final `Income_Basis_of_Purchases
              `US_GAAP `Final `Change_in_Income_Basis
              `US_GAAP `Final `Accrued_Income
              `US_GAAP `Final `Accrued_Income_Paid
              `US_GAAP `Final `Accrued_Income_Received
              `US_GAAP `Final `Accrued_Expenses
              `US_GAAP `Final `Accrued_Expenses_Received
              `US_GAAP `Final `Accrued_Expenses_Paid
              `US_GAAP `Final `Change_in_Accrued_Income
              `US_GAAP `Final `Change_in_Accrued_Expenses
              `US_GAAP `Final `Net_Income_Earned
              `US_GAAP `Final `Change_in_Unrealized_Gain
              `US_GAAP `Final `Appreciation
              `US_GAAP `Final `Depreciation
              `US_GAAP `Final `Realized_Gain_Positive
              `US_GAAP `Final `Realized_Gain_Negative
              `US_GAAP `Final `Unrealized_Gain_Positive
              `US_GAAP `Final `Unrealized_Gain_Negative
              `US_GAAP `Final `Total_Gain
              `IFRS `Final `Income_Basis
              `IFRS `Final `Realized_Gain
              `IFRS `Final `Unrealized_Gain
              `IFRS `Final `Sell_Realized_Gain
              `IFRS `Final `Reclassification_Gain
              `IFRS `Final `Net_Ordinary_Income_Gain
              `IFRS `Final `Balance_Sheet_Value
              `IFRS `Final `Balance_Sheet_Value_HTM
              `IFRS `Final `Balance_Sheet_Value_LAR
              `IFRS `Final `Balance_Sheet_Value_AFS
              `IFRS `Final `Balance_Sheet_Value_Trading
              `IFRS `Final `Income_Basis_of_Purchases
              `IFRS `Final `Change_in_Income_Basis
              `IFRS `Final `Accrued_Income
              `IFRS `Final `Accrued_Income_Paid
              `IFRS `Final `Accrued_Income_Received
              `IFRS `Final `Accrued_Expenses
              `IFRS `Final `Accrued_Expenses_Received
              `IFRS `Final `Accrued_Expenses_Paid
              `IFRS `Final `Change_in_Accrued_Income
              `IFRS `Final `Change_in_Accrued_Expenses
              `IFRS `Final `Net_Income_Earned
              `IFRS `Final `Change_in_Unrealized_Gain
              `IFRS `Final `Appreciation
              `IFRS `Final `Depreciation
              `IFRS `Final `Realized_Gain_Positive
              `IFRS `Final `Realized_Gain_Negative
              `IFRS `Final `Unrealized_Gain_Positive
              `IFRS `Final `Unrealized_Gain_Negative
              `IFRS `Final `Total_Gain
              `US_Statutory `Final `Income_Basis
              `US_Statutory `Final `Realized_Gain
              `US_Statutory `Final `Unrealized_Gain
              `US_Statutory `Final `Sell_Realized_Gain
              `US_Statutory `Final `Reclassification_Gain
              `US_Statutory `Final `Net_Ordinary_Income_Gain
              `US_Statutory `Final `Balance_Sheet_Value
              `US_Statutory `Final `Balance_Sheet_Value_HTM
              `US_Statutory `Final `Balance_Sheet_Value_LAR
              `US_Statutory `Final `Balance_Sheet_Value_AFS
              `US_Statutory `Final `Balance_Sheet_Value_Trading
              `US_Statutory `Final `Income_Basis_of_Purchases
              `US_Statutory `Final `Change_in_Income_Basis
              `US_Statutory `Final `Accrued_Income
              `US_Statutory `Final `Accrued_Income_Paid
              `US_Statutory `Final `Accrued_Income_Received
              `US_Statutory `Final `Accrued_Expenses
              `US_Statutory `Final `Accrued_Expenses_Received
              `US_Statutory `Final `Accrued_Expenses_Paid
              `US_Statutory `Final `Change_in_Accrued_Income
              `US_Statutory `Final `Change_in_Accrued_Expenses
              `US_Statutory `Final `Net_Income_Earned
              `US_Statutory `Final `Change_in_Unrealized_Gain
              `US_Statutory `Final `Appreciation
              `US_Statutory `Final `Depreciation
              `US_Statutory `Final `Realized_Gain_Positive
              `US_Statutory `Final `Realized_Gain_Negative
              `US_Statutory `Final `Unrealized_Gain_Positive
              `US_Statutory `Final `Unrealized_Gain_Negative
              `US_Statutory `Final `Total_Gain
              `Investments `Pre_Trade `IRR
              `Investments `Pre_Trade `Risk_Adjusted_IRR
              `Investments `Final `IRR
              `Investments `Final `Risk_Adjusted_IRR);`Module `Timing `Item];)
            (`J
             .((`Portfolio
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Portfolio;,,`All];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Portfolio];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Portfolio];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Portfolio;,,`All];)
                  (`F
                   ,`Portfolio
                   ))
                )
               (`Asset_Class
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Asset_Class;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Asset_Class];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Asset_Class];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Asset_Class;,0#`];)
                  (`F
                   ,`Asset_Class
                   ))
                ))
             )
            (`U
             `Portfolio `Asset_Class
             )
            (`XX
             `IRR `Risk_Adjusted_IRR `Quantity `Notional_Amount `Cost_Value `Constant_Yield_Amortized_Cost `Market_Value `Market_Value_QIS5_Shock_Up `Market_Value_QIS5_Shock_Down `Constant_Yield_Adjustment `Accrued_Interest `Interest_Received `Return_of_Market_Value `Market_Value_for_Fisher_Weil `Market_Value_Times_Duration_Fisher_Weil `Market_Value_Times_Convexity_Fisher_Weil `Market_Value_Times_Duration_Modified `Market_Value_Times_Convexity_Modified `Market_Value_Times_Maturity `Market_Value_of_Maturing `Dividends_Declared `Dividends_Received `Dividends_Receivable `Consideration_Paid `Price_Paid `Consideration_Received `Price_Received `Principal_Received `Rent_Received `Property_Expenses_Paid `Derivatives_Cash_Flow `Accrued_Interest_Paid `Accrued_Interest_Received `Income_Basis `Balance_Sheet_Value `Balance_Sheet_Value_HTM `Balance_Sheet_Value_LAR `Balance_Sheet_Value_AFS `Balance_Sheet_Value_Trading `Realized_Gain `Unrealized_Gain `Change_in_Unrealized_Gain `Accrued_Income `Income_Basis_of_Trades `Change_in_Income_Basis `Income_Received `Expenses_Paid `Net_Income_Earned `Income_Basis_FX_Effect `Accrued_Income_FX_Effect `Income_FX_Effect `Unrealized_Gain_FX_Effect `Appreciation `Depreciation `Realized_Gain_Positive `Realized_Gain_Negative `Unrealized_Gain_Positive `Unrealized_Gain_Negative `BzW `Fluctuation_Reserve `Amount_Invested `Hidden_Reserves `Hidden_Reserves_Positive `Hidden_Reserves_Negative `Balance_Sheet_Value_AV `Quantity_AV `Quantity_UV `HGB_Cost_AV `HGB_Cost_UV `Hidden_Reserves_AV `Unrealized_Gain_FX `Unrealized_Gain_nonFX `Realized_Gain_IMR `Realized_Gain_AVR `Sell_Realized_Gain `Reclassification_Gain `Net_Ordinary_Income_Gain `Income_Basis_of_Purchases `Accrued_Income_Paid `Accrued_Income_Received `Accrued_Expenses `Accrued_Expenses_Received `Accrued_Expenses_Paid `Change_in_Accrued_Income `Change_in_Accrued_Expenses `Total_Gain
             )))
         (`Accounting
          .((`Entity
             `Entity_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Entity;,`Any_Entity_];))
            (`Standard
             `Economic
             .,(`V;{[label;p;x]
  g:`None,.G`submodules
  if[label~"Module"
    if[`HGB_Life _in g; g,:`HGB]
    if[`US_Statutory_Life _in g; g,:`US_Statutory]
    ]
 :[~x _in g;(1;("&0 is not an active &1";$x;label))]}["Standard"];))
            (`Statement;`Income_Statement;.())
            (`Timing;`Final;.())
            (`Item;`A_1_Fixed_Income;.())
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`cell
                .((`Entity
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Entity_ `Any_Entity_ `Entity_1
                      ))
                   )
                  (`Standard
                   .((`c;`combo;)
                     (`o
                      `Economic `Solvency_II `US_GAAP `IFRS `US_Statutory `US_Statutory_Life `HGB `HGB_Life
                      ))
                   )
                  (`Statement
                   .((`c;`combo;)
                     (`o
                      `Assets `Liabilities `Capital_and_Surplus `Income_Statement `Change_in_Surplus
                      ))
                   )
                  (`Timing
                   .((`c;`combo;)
                     (`o
                      `Pre_Trade_Pre_Supplemental `Pre_Trade `Final
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `A_01_Net_Earned_Premium `A_01_a_Gross_Written_Premium `A_01_b_Ceded_Written_Premium `A_01_c_Change_in_Gross_Unearned_Premium `A_01_d_Change_in_Ceded_Unearned_Premium `A_02_Premiums_from_Reserve_for_Premium_Refunds `A_02_Technical_Interest `A_03_Income_from_Investments `A_03_Other_Underwriting_Income `A_03_a_Income_from_Affiliates `A_03_b_Realized_Gains `A_03_c_Other_Investment_Income `A_04_Net_Incurred_Claims `A_04_Non_Realized_Gain_from_Investments `A_04_a_Net_Claims_Paid `A_04_a_aa_Gross_Claims_Paid `A_04_a_bb_Ceded_Claims_Paid `A_04_b_Change_in_Net_Loss_and_LAE_Reserves `A_04_b_aa_Change_in_Gross_Loss_and_LAE_Reserves `A_04_b_bb_Change_in_Ceded_Loss_and_LAE_Reserves `A_05_Change_in_Other_Net_Underwriting_Provisions `A_05_Other_Underwriting_Income `A_06_Net_Claims_Incurred `A_06_Payments_to_Reserve_for_Premium_Refunds `A_06_a_Net_Claims_Paid `A_06_b_Change_in_Net_Provision_for_Outstanding_Claims `A_07_Change_in_Other_Net_Underwriting_Provisions `A_07_Underwriting_Expenses `A_07_a_Gross_Underwriting_Expenses `A_07_b_Ceded_Underwriting_Expenses `A_08_Other_Underwriting_Expenses `A_08_Payments_to_Reserve_for_Premium_Refunds `A_09_Subtotal `A_09_Underwriting_Expenses `A_10_Change_in_Claim_Equalization_Reserves `A_10_Investment_Expenses `A_11_Non_Realized_Loss_from_Investments `A_11_Underwriting_Result `A_12_Other_Underwriting_Expenses `A_13_Underwriting_Result `A_1_1_Preferred_Stock `A_1_2_Common_Stock `A_1_3_Special_Surplus `A_1_Fixed_Income `A_1_Gross_Earned_Premium `A_1_Paid_Up_Ordinary_Share_Capital `A_1_Subscribed_Capital `A_1_TP_Best_Estimate_Non_Life_Excluding_Health `A_1_Unpaid_Losses `A_1_a_Gross_Written_Premium `A_1_b_Change_in_Gross_Unearned_Premium `A_1a_Fixed_Income_HTM `A_1b_Fixed_Income_LAR `A_1c_Fixed_Income_AFS `A_1d_Fixed_Income_Trading `A_2_Assumed_Incurred_Premium `A_2_Called_Up_Ordinary_Share_Capital `A_2_Capital_Reserve `A_2_Real_Estate `A_2_Risk_Margin_Non_Life_Excluding_Health `A_2_Unpaid_LAE `A_2_a_Assumed_Paid_Premium `A_2_b_Change_in_Assumed_Accrued_Premium `A_3_1_Legal_Reserve `A_3_2_Other_Revenue_Reserves `A_3_Ceded_Earned_Premium `A_3_Mortgages `A_3_Policyholders_Account_Balances `A_3_Revenue_Reserve `A_3_a_Ceded_Written_Premium `A_3_b_Change_in_Ceded_Unearned_Premium `A_4_Ceded_Incurred_Premium `A_4_Equities `A_4_Net_Retained_Profit `A_4_Other_Policyholder_Funds_Payable `A_4_a_Ceded_Paid_Premium `A_4_b_Change_in_Ceded_Accrued_Premium `A_4a_Equities_Unaffiliated `A_4a_Equities_Unaffiliated_AFS `A_4b_Equities_Affiliated `A_4c_Equities_Unaffiliated_Trading `A_5_Derivatives `A_5_Future_Policy_Benefits `A_6_Other_Investments `A_6_Policy_Claims `A_7_Policyholder_Dividends_Payable `A_7_Short_Term_Investments `A_Goodwill `A_Gross_Technical_Provisions_Non_Life_Excluding_Health `A_Investments `A_Net_Earned_Premium `A_Ordinary_Share_Capital `A_Reserves_for_Benefits_Claims_Expenses `A_Shareholders_Equity `A_Subscribed_Capital_Unpaid `B_01_Income_from_Investments `B_01_Other_Income `B_02_Investment_Expenses `B_02_Other_Expenses `B_03_Ordinary_Result `B_03_Technical_Interest `B_04_Extraordinary_Income `B_04_Other_Income `B_05_Extraordinary_Expenses `B_05_Other_Expenses `B_06_Extraordinary_Result `B_06_Result_from_Ordinary_Business_Activities `B_07_Extraordinary_Income `B_07_Taxes_On_Income `B_08_Extraordinary_Expenses `B_08_Other_Taxes `B_09_Extraordinary_Result `B_09_Profit_Transfers `B_10_Net_Income `B_10_Taxes_on_Income `B_11_Other_Taxes `B_11_Retained_Profit_Carried_Forward `B_12_Net_Income `B_12_Withdrawal_from_Capital_Reserve `B_12_a_Withdrawal_from_Preferred_Stock `B_12_b_Withdrawal_from_Common_Stock `B_12_c_Withdrawal_from_Special_Surplus `B_12_d_Withdrawal_from_Capital_Reserve `B_13_Retained_Profit_Carried_Forward `B_13_Withdrawal_from_Revenue_Reserve `B_13_a_Withdrawal_from_Legal_Reserve `B_13_b_Withdrawal_from_Other_Revenue_Reserves `B_13_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_13_d_Withdrawal_from_Shareholder_Equity `B_14_Net_Retained_Profit `B_14_Withdrawal_from_Capital_Reserve `B_14_a_Withdrawal_from_Preferred_Stock `B_14_b_Withdrawal_from_Common_Stock `B_14_c_Withdrawal_from_Special_Surplus `B_14_d_Withdrawal_from_Capital_Reserve `B_15_Withdrawal_from_Revenue_Reserve `B_15_a_Withdrawal_from_Legal_Reserve `B_15_b_Withdrawal_from_Other_Revenue_Reserves `B_15_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_16_Net_Retained_Profit `B_1_Paid_Up_Initial_Fund `B_1_TP_Best_Estimate_Health_Similar_To_Non_Life `B_2_Called_Up_Initial_Fund `B_2_Risk_Margin_Health_Similar_To_Non_Life `B_3_Callable_Up_Initial_Fund `B_Cash `B_Equity_from_Profit_Participation_Rights `B_Fee_Income_UL_Annuity_Policies `B_Gross_Technical_Provisions_Health_Similar_To_Non_Life `B_Initial_Fund `B_Intangible_Assets `B_Other_Intangible_Assets `B_Unearned_Premiums `C_1_Net_Investment_Income `C_1_Property `C_1_TP_Best_Estimate_Health_Similar_To_Life `C_2_Investments_in_Affiliates `C_2_Realized_Investment_Gains `C_2_Risk_Margin_Health_Similar_To_Life `C_3_1_Shares `C_3_1_a_Directly_Held_Shares `C_3_1_b_Fonds `C_3_2_Bearer_Bonds `C_3_3_Mortgages `C_3_4_Other_Loans `C_3_5_Deposits_with_Banks `C_3_6_Miscellaneous_Other_Investments `C_3_Other_Investments_Total `C_Accrued_Investment_Income `C_Drafts_Outstanding `C_Gross_Technical_Provisions_Health_Similar_To_Life `C_Investments `C_Profit_from_Investments `C_Property_Plant_Equipment_Held_For_Own_Use `C_Share_Premium_Account `C_Subordinate_Liabilities `Change_in_Shareholders_Equity `D_10_Derivatives `D_11_Long_Term_Bank_Deposits `D_12_Other_Investments `D_1_Property_Other_Than_Own_Use `D_1_TP_Best_Estimate_Life_Excluding_Health_And_Unit_Linked `D_2_Participations `D_2_Risk_Margin_Life_Excluding_Health_And_Unit_Linked `D_3_Equities_Other_Than_Participations_Listed `D_4_Equities_Other_Than_Participations_Unlisted `D_5_Bonds_Government_And_Multilateral_Banks `D_6_Bonds_Corporate_Asset_Backed_Securities `D_7_Bonds_Corporate_Other `D_8_Structured_Notes `D_9_Investment_Funds `D_Deposits `D_Funds_Held `D_Gross_Technical_Provisions_Life_Excluding_Health_And_Unit_Linked `D_Investments_Other_Than_Assets_Held_For_Unit_Linked_Funds `D_Other_Income `D_Retained_Earnings `D_Separate_Account_Investments `D_Special_Items_with_Reserve_Character `E_1_Adjustments_To_Assets `E_1_Net_Unearned_Premium `E_1_Receivable_on_Direct_Insurance `E_1_TP_Best_Estimate_Unit_Linked_Funds `E_1_Underwriting_Expenses_Payable `E_1_a_Gross_Unearned_Premium `E_1_b_Ceded_Unearned_Premium `E_2_Accrued_Underwriting_Expenses `E_2_Adjustments_To_Technical_Provisions `E_2_Net_Premium_Reserves `E_2_Receivable_on_Reinsurance `E_2_Risk_Margin_Unit_Linked_Funds `E_2_a_Gross_Premium_Reserves `E_2_b_Ceded_Premium_Reserves `E_3_Expected_Profit_In_Future_Premiums `E_3_Investment_Expenses_Payable `E_3_Net_Provision_for_Outstanding_Claims `E_3_Other_Receivables `E_3_a_Gross_Provision_for_Outstanding_Claims `E_3_b_Ceded_Provision_for_Outstanding_Claims `E_3_c_Net_Drafts_Outstanding `E_4_Accrued_Investment_Expenses `E_4_Adjustments_To_Other_Liabilities `E_4_Net_Reserve_for_Premium_Refunds `E_4_a_Gross_Reserve_for_Premium_Refunds `E_4_b_Ceded_Reserve_for_Premium_Refunds `E_5_Claim_Equalization_Reserves `E_5_Other_Adjustments `E_6_Other_Insurance_Reserves `E_6_a_Other_Gross_Insurance_Reserves `E_6_b_Other_Ceded_Insurance_Reserves `E_Accrued_Expenses_and_Other `E_Assets_Held_For_Unit_Linked_Funds `E_Deferred_Policy_Acquisition_Costs `E_Gross_Technical_Provisions_Unit_Linked_Funds `E_Interest_Credited `E_Reconciliation_Reserve `E_Total_Amounts_Receivable `E_Underwriting_Reserves `F_1_Fixed_Assets_and_Inventories `F_1_Gross_Benefits_and_Losses_Paid `F_2_Ceded_Benefits_and_Losses_Paid `F_2_Current_Bank_Accounts `F_3_Miscellaneous_Other_Assets `F_Cash_Deposits_From_Reinsurers `F_Cash_Deposits_To_Cedants `F_Net_Benefits_and_Losses_Paid `F_Prepaid_Reinsurance_Premiums `F_Reinsurance_Balances_Payable `F_Reserves_For_Separate_Accounts `F_Surplus_Funds_Expected_Profit_In_Future_Premiums `F_Total_Other_Assets `G_1_Accrued_Interest_and_Rent `G_1_Change_in_Gross_Benefit_and_Loss_Reserves `G_1_Provision_for_Pension_Liabilities `G_1_Uncollateralized_Loans_Made `G_2_Change_in_Ceded_Benefit_and_Loss_Reserves `G_2_Collateralized_Loans_Made_Other_Than_Loans_On_Policies `G_2_Other_Prepaid_Expenses `G_2_Taxes_Payable `G_3_Ceded_Uncollectible_Loss_Accrual `G_3_Intra_Company_Liabilities `G_3_Loans_On_Policies `G_4_Assumed_Uncollectible_Loss_Accrual `G_Change_in_Net_Benefit_and_Loss_Reserves `G_Mortgages_And_Loans_Made `G_Other_Paid_In_Capital_Instruments `G_Other_Provisions `G_Premiums_Receivable `G_Reinsurance_Accounts_Payable `G_Shareholder_Dividends_Payable `G_Total_Prepaid_Expenses `H_1_Gross_LAE_Incurred `H_1_Reinsurance_Share_Of_TP_Non_Life_Excluding_Health `H_1_a_Gross_LAE_Paid `H_1_b_Change_in_Gross_LAE_Reserves `H_2_Ceded_LAE_Incurred `H_2_Reinsurance_Share_Of_TP_Health_Similar_To_Non_Life `H_2_a_Ceded_LAE_Paid `H_2_b_Change_in_Ceded_LAE_Reserves `H_2_c_Ceded_Uncollectible_LAE_Accrual `H_2_d_Assumed_Uncollectible_LAE_Accrual `H_3_Reinsurance_Share_Of_TP_Health_Similar_To_Life `H_4_Reinsurance_Share_Of_TP_Life_Excluding_Health_And_Unit_Linked `H_5_Reinsurance_Share_Of_TP_Life_Unit_Linked `H_6_Other_Reinsurance_Recoverables `H_Deferred_Tax_Liability `H_Derivatives `H_Net_LAE_Incurred `H_Preference_Shares `H_Reinsurance_Balances_Receivable `H_Reinsurance_Recoverables `H_Total_Assets `I_1_Amounts_Payable_on_Direct_Insurance `I_1_Policy_Acquisition_Costs_Paid `I_1_Unpaid_Benefits_and_Losses_and_LAE_Recoverable `I_1_a_Unpaid_Benefits_and_Losses_Recoverable `I_1_b_Unpaid_LAE_Recoverable `I_2_Amounts_Payable_on_Reinsurance `I_2_Change_in_DAC `I_2_Provision_for_Reinsurance `I_3_Contingent_Commissions `I_3_Liabilities_to_Banks `I_4_Debt_and_Notes `I_5_Miscellaneous_Liabilities `I_Debt `I_Deferred_Tax_Liabilities `I_Policy_Acquisition_Costs `I_Reinsurance_Recoverable `I_SPV_Recoverables `I_Subordinated_Liabilities `I_Total_Other_Liabilities `J_1_Capital_Notes `J_2_Surplus_Notes `J_Deferred_Tax_Asset `J_Financing_Costs `J_Intermediaries_Recoverables `J_Notes `J_Other_Expenses `J_Provisions_Other_Than_Technical_Provisions `J_Subordinated_Mutual_Member_Accounts `K_1_Dividends_to_Policyholders `K_2_Depreciation `K_3_Foreign_Exchange_Effect `K_Amounts_Owed_To_Credit_Institutions `K_Deferred_Income `K_Insurance_Recoverables_Excluding_Intermediaries `K_Other `K_Other_Items_Not_Specified_Above `K_Other_Liabilities `K_Property_Plant_and_Equipment `L01__Aggregate_Reserve_For_Life_Contracts `L01__Bonds `L01__Losses `L01__Premiums_And_Annuity_Considerations `L01__Premiums_Earned `L02__Aggregate_Reserve_For_AH_Contracts `L02__Considerations_For_Supplementary_Contracts_With_Life `L02__Losses_Incurred `L02__Reinsurance_Payable `L02a_Preferred_Stocks `L02b_Common_Stocks `L03__Liability_For_Deposit_Type_Contracts `L03__Loss_Adjustment_Expenses `L03__Loss_Expenses_Incurred `L03__Mortgages `L03__Net_Investment_Income `L03a_Investment_Income `L03b_Investment_Expenses `L03c_Interest_Paid `L03x_Losses_LAE `L04__Amortization_Of_IMR `L04__Commissions_Payable `L04__Contract_Claims `L04__Other_UW_Expenses `L04a_Occupied_Real_Estate `L04a__Life_Contract_Claims `L04b_Real_Estate_Held_For_Income `L04b__AH_Contract_Claims `L04c_Real_Estate_For_Sale `L05__AWI_UW_Deductions `L05__Cash `L05__Other_Expenses `L05__Policyholder_Dividends `L05__Separate_Accounts_Net_Operation_Gain `L06__Commissions_and_Expense_Allowances_On_Reinsurance_Ceded `L06__Contract_Loans `L06__Provision_For_Policyholder_Dividends_And_Coupons_Payable_In_Following_Year `L06__Taxes_Licenses_Fees `L06__Total_UW_Deductions `L07__Amount_Provisionally_Held_For_Deferred_Dividend_Policies_Not_Included_In_Line_6 `L07__Net_Income_of_Protected_Cells `L07__Other_Investments `L07__Reserve_Adjustments_On_Reinsurance_Ceded `L07a__Federal_Income_Taxes `L07b__Net_Deferred_Tax_Liability `L08__Borrowed_Money `L08__Miscellaneous_Income `L08__Net_UW_Gain `L08__Premiums_And_Annuity_Considerations_For_Life_And_AH_Contracts_Received_In_Advance `L08__Receivable_For_Securities `L08a__Income_From_Fees_From_Separate_Accounts `L08b__Charges_And_Fees_For_Deposit_Type_Contracts `L08c__AWI_For_Miscellaneous_Income `L09__AWI_Investments `L09__Contract_Liabilities_Not_Included_Elsewhere `L09__Investment_Income_Earned `L09__Total_Lines_1_To_8 `L09__Unearned_Premium `L09a_Net_Investment_Income_Earned `L09a__Surrender_Values_On_Canceled_Contracts `L09b_Investment_Expenses `L09b__Provision_For_Experience_Rating_Refunds `L09c_Interest_Paid `L09c__Other_Amounts_Payable_On_Reinsurance `L09d__IMR `L09x_Gross_Unearned_Premium `L09y_Deferred_Acquisition_Costs `L10__Advance_Premiums `L10__Cash_and_Investments_Subtotal `L10__Commissions_Due_And_Accrued `L10__Death_Benefits `L10__Realized_Capital_Gains `L11__Commissions_And_Expense_Allowances_Payable_On_reinsurance_Assumed `L11__Investment_Gain `L11__Matured_Endowments `L11__Title_Plants `L11a_Stockholder_Dividends `L11b_Policyholder_Dividends `L12__Annuity_Benefits `L12__Ceded_Premium_Payable `L12__General_Expenses_Due_and_Accrued `L12__Investment_Income_Due `L12__Net_Gain_PAB_Charged_Off `L13__Disability_Benefits_And_Benefits_Under_AH_Contracts `L13__Finance_Service_Charges `L13__Funds_Held `L13__Transfers_To_Separate_Accounts_Due_And_Accrued `L13a_PAB_In_Collection `L13b_PAB_Deferred `L13c_Accrued_Retro_Premium `L14__AWI_Misc_Income `L14__Amounts_Withheld `L14__Coupons_Guaranteed_Annual_Pure_Endowments `L14__Taxes_Licenses_Fees_Due_and_Accrued `L14a__Reinsurance_Recoverable `L14b__Funds_Deposited `L14c__Other_Reinsurance_Recoverable `L15__Amounts_Receivable_Relating_To_Uninsured_Plans `L15__Remittances `L15__Surrender_Benefits_And_Withdrawals_For_Life_Contracts `L15__Total_Other_Income `L15a__Current_Federal_And_Foreign_Income_Taxes_Including_Taxes_On_Realized_Capital_Gains `L15b__Net_Deferred_Tax_Liability `L16__Group_Conversions `L16__Income_B4_Divs_Taxes `L16__Provision_Reinsurance `L16__Unearned_Investment_Income `L16a__Tax_Recoverable `L16b__Net_Deferred_Tax_Asset `L17__Amounts_Withheld_By_Company `L17__Guarantee_Funds `L17__Interest_And_Adjustments_On_Contracts_Or_Deposit_Funds `L17__Net_FX_Adjustments `L17__Policyholder_Dividends `L18__Amounts_Held_For_Agents_Acount `L18__Drafts_Outstanding `L18__EDP_Equipment `L18__Income_B4_Taxes `L18__Payments_On_Supplementary_Contracts_With_Life_Contingencies `L19__Federal_Income_Taxes `L19__Furniture_and_Equipment `L19__Increase_In_Aggregate_Reserves_For_Life_And_AH `L19__Payable_PSA `L19__Remittances `L20__Net_Adj_Foreign_Exchange `L20__Net_FX_Adjustments `L20__Net_Income `L20__Payable_For_Securities `L20__Total_Lines_10_To_19 `L21__Amounts_Held_Under_Uninsured_Plans `L21__Commissions `L21__Liability_For_Benefits_For_Employees_And_Agents `L21__PP_Policyholder_Surplus `L21__Receivable_PSA `L22__A_H_Receivable `L22__Borrowed_Money `L22__Capital_Notes `L22__Commissions_And_Expense_Allowances_On_Reinsurance_Assumed `L22__Net_Income `L23_Stockholder_Dividends `L23__AWI `L23__AWI_Other `L23__General_Insurance_Expenses `L23__Other_Non_Admitted `L24__AWI_Other `L24__Assets_Total `L24__Ch_Unrealized_Capital_Gains `L24__Insurance_Taxes_Licenses_And_Fees `L24__Liabilities_Total `L24__Miscellaneous_Liabilities `L24a__AVR `L24b__Reinsurance_On_Unauthorized_Companies `L24c__Funds_Held_Under_Reinsurance_Treaties_With_Unauthorized_Reinsurers `L24d__Payable_To_Parent_Subsidiaries_And_Affiliates `L24e__Drafts_Outstanding `L24f__Liability_For_Amounts_Held_Under_Uninsured_Plans `L24g__Funds_Held_Under_Coinsurance `L24h__Payable_For_Securities `L24i__Capital_Notes `L24x_Assets_excluding_DTA `L25__AWI `L25__Assets_Total `L25__Ch_FX_Adjustment `L25__Increase_In_Loading_On_Deferred_And_Uncollected_Premiums `L25x_Assets_excluding_DTA `L26__Ch_Net_Deferred_Tax `L26__Net_Transfer_To_Separate_Accounts_Net_Of_Reinsurance `L26__Total_Liabilities_Excluding_Separate_Accounts `L27__AWI_For_Deductions `L27__AWI_Special_Surplus `L27__Ch_Non_Admitted_Assets `L27__From_Separate_Accounts `L28__Ch_Provision_Reinsurance `L28__Common_Capital_Stock `L28__Total_Liabilities `L28__Total_Lines_20_To_27 `L29__Ch_Surplus_Notes `L29__Common_Capital_Stock `L29__Net_Gain_Before_Dividends_To_Policyholders_And_Taxes `L29__Preferred_Capital_Stock `L30__AWI_Other `L30__Dividends_To_Policyholders `L30__Preferred_Capital_Stock `L31__AWI_Other `L31__Cumulative_Effect_Accounting_Changes `L31__Net_Gain_After_Dividends_To_Policyholders `L31__Surplus_Notes `L32__Federal_Income_Taxes `L32__Paid_In_Surplus `L32__Surplus_Notes `L32a_Ch_Capital_Paid_In `L32b_Capital_From_Surplus `L32c_Capital_To_Surplus `L33__Net_Gain_After_Dividends_To_Policyholders_And_Taxes `L33__Paid_In_Surplus `L33__Unassigned_Funds `L33a_Ch_Surplus_Paid_In `L33b_Surplus_To_Capital `L33c_Surplus_From_Capital `L34__AWI_Special_Surplus `L34__From_Home_Office `L34__Net_Realized_Capital_Gains `L34__Treasury_Stock `L35__Net_Income `L35__Policyholders_Surplus `L35__Stockholders_Dividends `L35__Unassigned_Funds `L36__Ch_Treasury_Stock `L36__PP_Capital_And_Surplus `L36__Treasury_Stock `L37__AWI_Ch_Surplus `L37__Net_Income `L37__Surplus `L38__Ch_Policyholders_Surplus `L38__Ch_Unrealized_Capital_Gains `L39__Ch_FX_Adjustment `L39__Policyholders_Surplus `L40__Ch_Net_Deferred_Tax `L41__Ch_Non_Admitted_Assets `L42__Ch_Provision_Reinsurance_In_Unauthorized_Companies `L43__Ch_Reserve_Due_To_Ch_Valuation_Basis `L44__Ch_in_AVR `L45__Ch_Treasury_Stock `L46__Surplus_Withdrawn_From_Separate_Accounts `L47__Other_Ch_Surplus_In_Separate_Accounts `L48__Ch_Surplus_Notes `L49__Cumulative_Effect_Accounting_Changes `L50a_Ch_Capital_Paid_In `L50b_Ch_Capital_Transferred_From_Surplus `L50c_Ch_Capital_Transferred_To_Surplus `L51a_Surplus_Adjustment_Paid_In `L51b_Surplus_Adjustment_Transferred_To_Capital `L51c_Surplus_Adjustment_Transferred_From_Capital `L51d_Surplus_Adjustment_Due_To_Reinsurance `L52__Stockholders_Dividends `L53__AWI_Ch_Surplus `L54__Net_Ch_Capital_And_Surplus `L55__Capital_And_Surplus `L_Deferred_Acquisition_Costs `L_Financial_Liabilities_Other_Than_Amounts_Owed_To_Credit_Institutions `L_Financing_Costs `L_Minority_Interests `L_Other_Assets `L_Separate_Account_Liabilities `L_Total_Capital_and_Surplus_and_Liabilities `M_1_Preferred_Stock_Par_Value `M_1_Tax_Paid `M_2_Change_in_Tax_Payable `M_2_Preferred_Stock_Additional_Paid_In `M_3_Change_in_Deferred_Tax `M_Payables_Trade_Not_Insurance `M_Preferred_Stock `M_Receivables_Trade_Not_Insurance `M_Tax_Incurred `N_1_Common_Stock_Par_Value `N_2_Common_Stock_Additional_Paid_In `N_Common_Stock `N_Pension_Benefit_Obligations `N_Pension_Benefit_Surplus `N_Shareholder_Dividends `Net_Benefits_and_Losses_Incurred `Net_Income `O_1_Change_in_Preferred_Stock `O_1_Deductible_Temporary_Differences `O_2_Change_in_Common_Stock `O_2_The_Carry_Forward_Of_Unused_Tax_Losses_And_Unused_Tax_Credits `O_3_Cannot_Be_Realised_In_A_Reasonable_Time_Frame `O_Change_in_Stock `O_Deferred_Tax_Assets `O_Special_Surplus `O_Uncalled_Investments `Operating_Result `Other_Net_Result `P_1_Change_in_Unrealized_Gain_on_Investments `P_2_Change_in_Unrealized_Gain_on_FOREX `P_3_Change_in_Unrealized_Gain_on_Derivatives `P_Cash_And_Cash_Equivalents `P_Change_in_Accumulated_Other_Comprehensive_Income `P_Change_in_Unrealized_Gain `P_Contingent_Liabilities `P_Other_Surplus `Profit_Before_Tax `Q_1_Change_in_Special_Surplus `Q_1_Unrealized_Gain_on_Investments `Q_2_Change_in_Other_Surplus `Q_2_Unrealized_Gain_on_FOREX `Q_3_Unrealized_Gain_on_Derivatives `Q_Accumulated_Other_Comprehensive_Income `Q_Change_in_Surplus `Q_Other_Liabilities `Q_Short_Term_Bank_Deposits `R_Amounts_Due_In_Respect_Of_Called_But_Unpaid_Capital `R_Retained_Earnings `R_Total_Other_Financial_Sector_Liabilities `S_Any_Other_Assets_Not_Elsewhere_Shown `Shareholders_Equity `Total_Assets `Total_Assets_Excluding_Other_Financial_Sector_Assets `Total_Basic_Own_Funds `Total_Capital_and_Surplus `Total_Liabilities `Total_Liabilities_Excluding_Other_Financial_Sector_Liabilities `Total_Liabilities_Including_Other_Financial_Sector_Liabilities `Total_Revenue `Total_Taxes `U_Other_Financial_Sector_Assets
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`Entity;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_Accounting.html;)
            (`V;{[p;x]
            r::[#r:.L.V.user_value_list[{,/{x,/:y}'[!x;!:'x[]]}@.C[`Accounting;x`Standard];`Statement`Item;p;x];r;()]
            / se = Spanned Entities (boolean)
            e:.k.get_s (0;`A;`User;`Accounting;x`Standard;`by_Entity;:[se:`Any_Entity_=xe:x`Entity; _n; xe];`m)
            if[se
              if[|/eo:`off=e
                xe:!.k.get_s (0;`A;`User;`Accounting;x`Standard;`by_Entity)
                r,:,(1;("&0 Standard is not active for entities &1";$x`Standard;2_,/" ,",/:$xe@&eo);,`Standard`Entity)
                ] / if `off _in e
              ] / if se
            if[~se
              if[`off~e; r,:,(1;("&0 Standard is not active for entity &1";$x`Standard;$x`Entity);,`Standard`Entity)]]
            :[#r;r;_n]};)
            (`J
             .,(`Entity
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Entity;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Entity];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Entity];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Entity;,0#`];)
                  (`F
                   ,`Entity
                   ))
                )
             )
            (`U
             ,`Entity
             )
            (`XX
             `A_1_Fixed_Income `A_2_Real_Estate `A_3_Mortgages `A_4a_Equities_Unaffiliated `A_4b_Equities_Affiliated `A_4_Equities `A_5_Derivatives `A_6_Other_Investments `A_7_Short_Term_Investments `A_Investments `B_Cash `C_Accrued_Investment_Income `D_Deposits `E_Deferred_Policy_Acquisition_Costs `F_Prepaid_Reinsurance_Premiums `G_Premiums_Receivable `H_Reinsurance_Balances_Receivable `I_1_a_Unpaid_Benefits_and_Losses_Recoverable `I_1_b_Unpaid_LAE_Recoverable `I_1_Unpaid_Benefits_and_Losses_and_LAE_Recoverable `I_2_Provision_for_Reinsurance `I_Reinsurance_Recoverable `J_Deferred_Tax_Asset `K_Property_Plant_and_Equipment `L_Other_Assets `Total_Assets `A_1_Unpaid_Losses `A_2_Unpaid_LAE `A_3_Policyholders_Account_Balances `A_4_Other_Policyholder_Funds_Payable `A_5_Future_Policy_Benefits `A_6_Policy_Claims `A_7_Policyholder_Dividends_Payable `A_Reserves_for_Benefits_Claims_Expenses `B_Unearned_Premiums `C_Drafts_Outstanding `D_Funds_Held `E_1_Underwriting_Expenses_Payable `E_2_Accrued_Underwriting_Expenses `E_3_Investment_Expenses_Payable `E_4_Accrued_Investment_Expenses `E_Accrued_Expenses_and_Other `F_Reinsurance_Balances_Payable `G_Shareholder_Dividends_Payable `H_Deferred_Tax_Liability `I_Debt `J_1_Capital_Notes `J_2_Surplus_Notes `J_Notes `K_Other_Liabilities `L_Separate_Account_Liabilities `Total_Liabilities `Shareholders_Equity `M_Preferred_Stock `N_1_Common_Stock_Par_Value `N_2_Common_Stock_Additional_Paid_In `N_Common_Stock `O_Special_Surplus `P_Other_Surplus `Q_Accumulated_Other_Comprehensive_Income `R_Retained_Earnings `A_1_a_Gross_Written_Premium `A_1_b_Change_in_Gross_Unearned_Premium `A_1_Gross_Earned_Premium `A_2_a_Assumed_Paid_Premium `A_2_b_Change_in_Assumed_Accrued_Premium `A_2_Assumed_Incurred_Premium `A_3_a_Ceded_Written_Premium `A_3_b_Change_in_Ceded_Unearned_Premium `A_3_Ceded_Earned_Premium `A_4_a_Ceded_Paid_Premium `A_4_b_Change_in_Ceded_Accrued_Premium `A_4_Ceded_Incurred_Premium `A_Net_Earned_Premium `B_Fee_Income_UL_Annuity_Policies `C_1_Net_Investment_Income `C_2_Realized_Investment_Gains `C_Profit_from_Investments `D_Other_Income `Total_Revenue `E_Interest_Credited `F_1_Gross_Benefits_and_Losses_Paid `F_2_Ceded_Benefits_and_Losses_Paid `F_Net_Benefits_and_Losses_Paid `G_1_Change_in_Gross_Benefit_and_Loss_Reserves `G_2_Change_in_Ceded_Benefit_and_Loss_Reserves `G_3_Ceded_Uncollectible_Loss_Accrual `G_4_Assumed_Uncollectible_Loss_Accrual `G_Change_in_Net_Benefit_and_Loss_Reserves `Net_Benefits_and_Losses_Incurred `H_1_a_Gross_LAE_Paid `H_1_b_Change_in_Gross_LAE_Reserves `H_1_Gross_LAE_Incurred `H_2_a_Ceded_LAE_Paid `H_2_b_Change_in_Ceded_LAE_Reserves `H_2_c_Ceded_Uncollectible_LAE_Accrual `H_2_d_Assumed_Uncollectible_LAE_Accrual `H_2_Ceded_LAE_Incurred `H_Net_LAE_Incurred `I_1_Policy_Acquisition_Costs_Paid `I_2_Change_in_DAC `I_3_Contingent_Commissions `I_Policy_Acquisition_Costs `J_Other_Expenses `K_1_Dividends_to_Policyholders `K_2_Depreciation `K_3_Foreign_Exchange_Effect `K_Other `Operating_Result `L_Financing_Costs `Profit_Before_Tax `M_1_Tax_Paid `M_2_Change_in_Tax_Payable `M_3_Change_in_Deferred_Tax `M_Tax_Incurred `Net_Income `N_Shareholder_Dividends `O_1_Change_in_Preferred_Stock `O_2_Change_in_Common_Stock `O_Change_in_Stock `P_Change_in_Accumulated_Other_Comprehensive_Income `Q_1_Change_in_Special_Surplus `Q_2_Change_in_Other_Surplus `Q_Change_in_Surplus `Change_in_Shareholders_Equity `A_Goodwill `B_Other_Intangible_Assets `C_Property_Plant_Equipment_Held_For_Own_Use `D_1_Property_Other_Than_Own_Use `D_2_Participations `D_3_Equities_Other_Than_Participations_Listed `D_4_Equities_Other_Than_Participations_Unlisted `D_5_Bonds_Government_And_Multilateral_Banks `D_6_Bonds_Corporate_Asset_Backed_Securities `D_7_Bonds_Corporate_Other `D_8_Structured_Notes `D_9_Investment_Funds `D_10_Derivatives `D_11_Long_Term_Bank_Deposits `D_12_Other_Investments `D_Investments_Other_Than_Assets_Held_For_Unit_Linked_Funds `E_Assets_Held_For_Unit_Linked_Funds `F_Cash_Deposits_To_Cedants `G_1_Uncollateralized_Loans_Made `G_2_Collateralized_Loans_Made_Other_Than_Loans_On_Policies `G_3_Loans_On_Policies `G_Mortgages_And_Loans_Made `H_1_Reinsurance_Share_Of_TP_Non_Life_Excluding_Health `H_2_Reinsurance_Share_Of_TP_Health_Similar_To_Non_Life `H_3_Reinsurance_Share_Of_TP_Health_Similar_To_Life `H_4_Reinsurance_Share_Of_TP_Life_Excluding_Health_And_Unit_Linked `H_5_Reinsurance_Share_Of_TP_Life_Unit_Linked `H_6_Other_Reinsurance_Recoverables `H_Reinsurance_Recoverables `I_SPV_Recoverables `J_Intermediaries_Recoverables `K_Insurance_Recoverables_Excluding_Intermediaries `L_Deferred_Acquisition_Costs `M_Receivables_Trade_Not_Insurance `N_Pension_Benefit_Surplus `O_1_Deductible_Temporary_Differences `O_2_The_Carry_Forward_Of_Unused_Tax_Losses_And_Unused_Tax_Credits `O_3_Cannot_Be_Realised_In_A_Reasonable_Time_Frame `O_Deferred_Tax_Assets `P_Cash_And_Cash_Equivalents `Q_Short_Term_Bank_Deposits `R_Amounts_Due_In_Respect_Of_Called_But_Unpaid_Capital `S_Any_Other_Assets_Not_Elsewhere_Shown `Total_Assets_Excluding_Other_Financial_Sector_Assets `U_Other_Financial_Sector_Assets `A_1_TP_Best_Estimate_Non_Life_Excluding_Health `A_2_Risk_Margin_Non_Life_Excluding_Health `A_Gross_Technical_Provisions_Non_Life_Excluding_Health `B_1_TP_Best_Estimate_Health_Similar_To_Non_Life `B_2_Risk_Margin_Health_Similar_To_Non_Life `B_Gross_Technical_Provisions_Health_Similar_To_Non_Life `C_1_TP_Best_Estimate_Health_Similar_To_Life `C_2_Risk_Margin_Health_Similar_To_Life `C_Gross_Technical_Provisions_Health_Similar_To_Life `D_1_TP_Best_Estimate_Life_Excluding_Health_And_Unit_Linked `D_2_Risk_Margin_Life_Excluding_Health_And_Unit_Linked `D_Gross_Technical_Provisions_Life_Excluding_Health_And_Unit_Linked `E_1_TP_Best_Estimate_Unit_Linked_Funds `E_2_Risk_Margin_Unit_Linked_Funds `E_Gross_Technical_Provisions_Unit_Linked_Funds `F_Cash_Deposits_From_Reinsurers `G_Reinsurance_Accounts_Payable `H_Derivatives `I_Deferred_Tax_Liabilities `J_Provisions_Other_Than_Technical_Provisions `K_Amounts_Owed_To_Credit_Institutions `L_Financial_Liabilities_Other_Than_Amounts_Owed_To_Credit_Institutions `M_Payables_Trade_Not_Insurance `N_Pension_Benefit_Obligations `O_Uncalled_Investments `P_Contingent_Liabilities `Q_Other_Liabilities `Total_Liabilities_Excluding_Other_Financial_Sector_Liabilities `R_Total_Other_Financial_Sector_Liabilities `Total_Liabilities_Including_Other_Financial_Sector_Liabilities `Total_Basic_Own_Funds `A_1_Paid_Up_Ordinary_Share_Capital `A_2_Called_Up_Ordinary_Share_Capital `A_Ordinary_Share_Capital `B_1_Paid_Up_Initial_Fund `B_2_Called_Up_Initial_Fund `B_3_Callable_Up_Initial_Fund `B_Initial_Fund `C_Share_Premium_Account `E_1_Adjustments_To_Assets `E_2_Adjustments_To_Technical_Provisions `E_3_Expected_Profit_In_Future_Premiums `E_4_Adjustments_To_Other_Liabilities `E_5_Other_Adjustments `E_Reconciliation_Reserve `F_Surplus_Funds_Expected_Profit_In_Future_Premiums `G_Other_Paid_In_Capital_Instruments `H_Preference_Shares `I_Subordinated_Liabilities `J_Subordinated_Mutual_Member_Accounts `K_Other_Items_Not_Specified_Above `L_Minority_Interests `D_Retained_Earnings `A_1a_Fixed_Income_HTM `A_1b_Fixed_Income_LAR `A_1c_Fixed_Income_AFS `A_1d_Fixed_Income_Trading `A_4a_Equities_Unaffiliated_AFS `A_4c_Equities_Unaffiliated_Trading `M_1_Preferred_Stock_Par_Value `M_2_Preferred_Stock_Additional_Paid_In `Q_1_Unrealized_Gain_on_Investments `Q_2_Unrealized_Gain_on_FOREX `Q_3_Unrealized_Gain_on_Derivatives `P_1_Change_in_Unrealized_Gain_on_Investments `P_2_Change_in_Unrealized_Gain_on_FOREX `P_3_Change_in_Unrealized_Gain_on_Derivatives `P_Change_in_Unrealized_Gain `L01__Bonds `L02a_Preferred_Stocks `L02b_Common_Stocks `L03__Mortgages `L04a_Occupied_Real_Estate `L04b_Real_Estate_Held_For_Income `L04c_Real_Estate_For_Sale `L05__Cash `L06__Contract_Loans `L07__Other_Investments `L08__Receivable_For_Securities `L09__AWI_Investments `L10__Cash_and_Investments_Subtotal `L11__Title_Plants `L12__Investment_Income_Due `L13a_PAB_In_Collection `L13b_PAB_Deferred `L13c_Accrued_Retro_Premium `L14a__Reinsurance_Recoverable `L14b__Funds_Deposited `L14c__Other_Reinsurance_Recoverable `L15__Amounts_Receivable_Relating_To_Uninsured_Plans `L16a__Tax_Recoverable `L16b__Net_Deferred_Tax_Asset `L17__Guarantee_Funds `L18__EDP_Equipment `L19__Furniture_and_Equipment `L20__Net_Adj_Foreign_Exchange `L21__Receivable_PSA `L22__A_H_Receivable `L23__Other_Non_Admitted `L24__AWI_Other `L25x_Assets_excluding_DTA `L25__Assets_Total `L01__Losses `L02__Reinsurance_Payable `L03__Loss_Adjustment_Expenses `L04__Commissions_Payable `L05__Other_Expenses `L06__Taxes_Licenses_Fees `L07a__Federal_Income_Taxes `L07b__Net_Deferred_Tax_Liability `L08__Borrowed_Money `L09x_Gross_Unearned_Premium `L09y_Deferred_Acquisition_Costs `L09__Unearned_Premium `L10__Advance_Premiums `L11a_Stockholder_Dividends `L11b_Policyholder_Dividends `L12__Ceded_Premium_Payable `L13__Funds_Held `L14__Amounts_Withheld `L15__Remittances `L16__Provision_Reinsurance `L17__Net_FX_Adjustments `L18__Drafts_Outstanding `L19__Payable_PSA `L20__Payable_For_Securities `L21__Amounts_Held_Under_Uninsured_Plans `L22__Capital_Notes `L23__AWI `L24__Liabilities_Total `L03x_Losses_LAE `L27__AWI_Special_Surplus `L28__Common_Capital_Stock `L29__Preferred_Capital_Stock `L30__AWI_Other `L31__Surplus_Notes `L32__Paid_In_Surplus `L33__Unassigned_Funds `L34__Treasury_Stock `L35__Policyholders_Surplus `L01__Premiums_Earned `L02__Losses_Incurred `L03__Loss_Expenses_Incurred `L04__Other_UW_Expenses `L05__AWI_UW_Deductions `L06__Total_UW_Deductions `L07__Net_Income_of_Protected_Cells `L08__Net_UW_Gain `L09a_Net_Investment_Income_Earned `L09b_Investment_Expenses `L09c_Interest_Paid `L09__Investment_Income_Earned `L10__Realized_Capital_Gains `L11__Investment_Gain `L12__Net_Gain_PAB_Charged_Off `L13__Finance_Service_Charges `L14__AWI_Misc_Income `L15__Total_Other_Income `L16__Income_B4_Divs_Taxes `L17__Policyholder_Dividends `L18__Income_B4_Taxes `L19__Federal_Income_Taxes `L20__Net_Income `L21__PP_Policyholder_Surplus `L22__Net_Income `L24__Ch_Unrealized_Capital_Gains `L25__Ch_FX_Adjustment `L26__Ch_Net_Deferred_Tax `L27__Ch_Non_Admitted_Assets `L28__Ch_Provision_Reinsurance `L29__Ch_Surplus_Notes `L31__Cumulative_Effect_Accounting_Changes `L32a_Ch_Capital_Paid_In `L32b_Capital_From_Surplus `L32c_Capital_To_Surplus `L33a_Ch_Surplus_Paid_In `L33b_Surplus_To_Capital `L33c_Surplus_From_Capital `L34__From_Home_Office `L35__Stockholders_Dividends `L36__Ch_Treasury_Stock `L37__AWI_Ch_Surplus `L38__Ch_Policyholders_Surplus `L39__Policyholders_Surplus `L23__AWI_Other `L24x_Assets_excluding_DTA `L24__Assets_Total `L01__Aggregate_Reserve_For_Life_Contracts `L02__Aggregate_Reserve_For_AH_Contracts `L03__Liability_For_Deposit_Type_Contracts `L04a__Life_Contract_Claims `L04b__AH_Contract_Claims `L04__Contract_Claims `L05__Policyholder_Dividends `L06__Provision_For_Policyholder_Dividends_And_Coupons_Payable_In_Following_Year `L07__Amount_Provisionally_Held_For_Deferred_Dividend_Policies_Not_Included_In_Line_6 `L08__Premiums_And_Annuity_Considerations_For_Life_And_AH_Contracts_Received_In_Advance `L09a__Surrender_Values_On_Canceled_Contracts `L09b__Provision_For_Experience_Rating_Refunds `L09c__Other_Amounts_Payable_On_Reinsurance `L09d__IMR `L09__Contract_Liabilities_Not_Included_Elsewhere `L10__Commissions_Due_And_Accrued `L11__Commissions_And_Expense_Allowances_Payable_On_reinsurance_Assumed `L12__General_Expenses_Due_and_Accrued `L13__Transfers_To_Separate_Accounts_Due_And_Accrued `L14__Taxes_Licenses_Fees_Due_and_Accrued `L15a__Current_Federal_And_Foreign_Income_Taxes_Including_Taxes_On_Realized_Capital_Gains `L15b__Net_Deferred_Tax_Liability `L16__Unearned_Investment_Income `L17__Amounts_Withheld_By_Company `L18__Amounts_Held_For_Agents_Acount `L19__Remittances `L20__Net_FX_Adjustments `L21__Liability_For_Benefits_For_Employees_And_Agents `L22__Borrowed_Money `L23_Stockholder_Dividends `L24a__AVR `L24b__Reinsurance_On_Unauthorized_Companies `L24c__Funds_Held_Under_Reinsurance_Treaties_With_Unauthorized_Reinsurers `L24d__Payable_To_Parent_Subsidiaries_And_Affiliates `L24e__Drafts_Outstanding `L24f__Liability_For_Amounts_Held_Under_Uninsured_Plans `L24g__Funds_Held_Under_Coinsurance `L24h__Payable_For_Securities `L24i__Capital_Notes `L24__Miscellaneous_Liabilities `L25__AWI `L26__Total_Liabilities_Excluding_Separate_Accounts `L27__From_Separate_Accounts `L28__Total_Liabilities `L29__Common_Capital_Stock `L30__Preferred_Capital_Stock `L31__AWI_Other `L32__Surplus_Notes `L33__Paid_In_Surplus `L34__AWI_Special_Surplus `L35__Unassigned_Funds `L36__Treasury_Stock `L37__Surplus `L01__Premiums_And_Annuity_Considerations `L02__Considerations_For_Supplementary_Contracts_With_Life `L03a_Investment_Income `L03b_Investment_Expenses `L03c_Interest_Paid `L03__Net_Investment_Income `L04__Amortization_Of_IMR `L05__Separate_Accounts_Net_Operation_Gain `L06__Commissions_and_Expense_Allowances_On_Reinsurance_Ceded `L07__Reserve_Adjustments_On_Reinsurance_Ceded `L08a__Income_From_Fees_From_Separate_Accounts `L08b__Charges_And_Fees_For_Deposit_Type_Contracts `L08c__AWI_For_Miscellaneous_Income `L08__Miscellaneous_Income `L09__Total_Lines_1_To_8 `L10__Death_Benefits `L11__Matured_Endowments `L12__Annuity_Benefits `L13__Disability_Benefits_And_Benefits_Under_AH_Contracts `L14__Coupons_Guaranteed_Annual_Pure_Endowments `L15__Surrender_Benefits_And_Withdrawals_For_Life_Contracts `L16__Group_Conversions `L17__Interest_And_Adjustments_On_Contracts_Or_Deposit_Funds `L18__Payments_On_Supplementary_Contracts_With_Life_Contingencies `L19__Increase_In_Aggregate_Reserves_For_Life_And_AH `L20__Total_Lines_10_To_19 `L21__Commissions `L22__Commissions_And_Expense_Allowances_On_Reinsurance_Assumed `L23__General_Insurance_Expenses `L24__Insurance_Taxes_Licenses_And_Fees `L25__Increase_In_Loading_On_Deferred_And_Uncollected_Premiums `L26__Net_Transfer_To_Separate_Accounts_Net_Of_Reinsurance `L27__AWI_For_Deductions `L28__Total_Lines_20_To_27 `L29__Net_Gain_Before_Dividends_To_Policyholders_And_Taxes `L30__Dividends_To_Policyholders `L31__Net_Gain_After_Dividends_To_Policyholders `L32__Federal_Income_Taxes `L33__Net_Gain_After_Dividends_To_Policyholders_And_Taxes `L34__Net_Realized_Capital_Gains `L35__Net_Income `L36__PP_Capital_And_Surplus `L37__Net_Income `L38__Ch_Unrealized_Capital_Gains `L39__Ch_FX_Adjustment `L40__Ch_Net_Deferred_Tax `L41__Ch_Non_Admitted_Assets `L42__Ch_Provision_Reinsurance_In_Unauthorized_Companies `L43__Ch_Reserve_Due_To_Ch_Valuation_Basis `L44__Ch_in_AVR `L45__Ch_Treasury_Stock `L46__Surplus_Withdrawn_From_Separate_Accounts `L47__Other_Ch_Surplus_In_Separate_Accounts `L48__Ch_Surplus_Notes `L49__Cumulative_Effect_Accounting_Changes `L50a_Ch_Capital_Paid_In `L50b_Ch_Capital_Transferred_From_Surplus `L50c_Ch_Capital_Transferred_To_Surplus `L51a_Surplus_Adjustment_Paid_In `L51b_Surplus_Adjustment_Transferred_To_Capital `L51c_Surplus_Adjustment_Transferred_From_Capital `L51d_Surplus_Adjustment_Due_To_Reinsurance `L52__Stockholders_Dividends `L53__AWI_Ch_Surplus `L54__Net_Ch_Capital_And_Surplus `L55__Capital_And_Surplus `A_Subscribed_Capital_Unpaid `B_Intangible_Assets `C_1_Property `C_2_Investments_in_Affiliates `C_3_1_a_Directly_Held_Shares `C_3_1_b_Fonds `C_3_1_Shares `C_3_2_Bearer_Bonds `C_3_3_Mortgages `C_3_4_Other_Loans `C_3_5_Deposits_with_Banks `C_3_6_Miscellaneous_Other_Investments `C_3_Other_Investments_Total `C_Investments `D_Separate_Account_Investments `E_1_Receivable_on_Direct_Insurance `E_2_Receivable_on_Reinsurance `E_3_Other_Receivables `E_Total_Amounts_Receivable `F_1_Fixed_Assets_and_Inventories `F_2_Current_Bank_Accounts `F_3_Miscellaneous_Other_Assets `F_Total_Other_Assets `G_1_Accrued_Interest_and_Rent `G_2_Other_Prepaid_Expenses `G_Total_Prepaid_Expenses `H_Total_Assets `C_Subordinate_Liabilities `D_Special_Items_with_Reserve_Character `E_1_a_Gross_Unearned_Premium `E_1_b_Ceded_Unearned_Premium `E_1_Net_Unearned_Premium `E_2_a_Gross_Premium_Reserves `E_2_b_Ceded_Premium_Reserves `E_2_Net_Premium_Reserves `E_3_a_Gross_Provision_for_Outstanding_Claims `E_3_b_Ceded_Provision_for_Outstanding_Claims `E_3_c_Net_Drafts_Outstanding `E_3_Net_Provision_for_Outstanding_Claims `E_4_a_Gross_Reserve_for_Premium_Refunds `E_4_b_Ceded_Reserve_for_Premium_Refunds `E_4_Net_Reserve_for_Premium_Refunds `E_5_Claim_Equalization_Reserves `E_6_a_Other_Gross_Insurance_Reserves `E_6_b_Other_Ceded_Insurance_Reserves `E_6_Other_Insurance_Reserves `E_Underwriting_Reserves `F_Reserves_For_Separate_Accounts `G_1_Provision_for_Pension_Liabilities `G_2_Taxes_Payable `G_3_Intra_Company_Liabilities `G_Other_Provisions `J_Financing_Costs `I_1_Amounts_Payable_on_Direct_Insurance `I_2_Amounts_Payable_on_Reinsurance `I_3_Liabilities_to_Banks `I_4_Debt_and_Notes `I_5_Miscellaneous_Liabilities `I_Total_Other_Liabilities `K_Deferred_Income `L_Total_Capital_and_Surplus_and_Liabilities `A_1_1_Preferred_Stock `A_1_2_Common_Stock `A_1_3_Special_Surplus `A_1_Subscribed_Capital `A_2_Capital_Reserve `A_3_1_Legal_Reserve `A_3_2_Other_Revenue_Reserves `A_3_Revenue_Reserve `A_4_Net_Retained_Profit `A_Shareholders_Equity `B_Equity_from_Profit_Participation_Rights `Total_Capital_and_Surplus `A_01_a_Gross_Written_Premium `A_01_b_Ceded_Written_Premium `A_01_c_Change_in_Gross_Unearned_Premium `A_01_d_Change_in_Ceded_Unearned_Premium `A_01_Net_Earned_Premium `A_02_Technical_Interest `A_03_Other_Underwriting_Income `A_04_a_aa_Gross_Claims_Paid `A_04_a_bb_Ceded_Claims_Paid `A_04_a_Net_Claims_Paid `A_04_b_aa_Change_in_Gross_Loss_and_LAE_Reserves `A_04_b_bb_Change_in_Ceded_Loss_and_LAE_Reserves `A_04_b_Change_in_Net_Loss_and_LAE_Reserves `A_04_Net_Incurred_Claims `A_05_Change_in_Other_Net_Underwriting_Provisions `A_06_Payments_to_Reserve_for_Premium_Refunds `A_07_a_Gross_Underwriting_Expenses `A_07_b_Ceded_Underwriting_Expenses `A_07_Underwriting_Expenses `A_08_Other_Underwriting_Expenses `A_09_Subtotal `A_10_Change_in_Claim_Equalization_Reserves `A_11_Underwriting_Result `B_01_Income_from_Investments `B_02_Investment_Expenses `B_03_Technical_Interest `B_04_Other_Income `B_05_Other_Expenses `B_06_Result_from_Ordinary_Business_Activities `B_07_Extraordinary_Income `B_08_Extraordinary_Expenses `B_09_Extraordinary_Result `B_10_Taxes_on_Income `B_11_Other_Taxes `B_12_Net_Income `B_13_Retained_Profit_Carried_Forward `B_14_a_Withdrawal_from_Preferred_Stock `B_14_b_Withdrawal_from_Common_Stock `B_14_c_Withdrawal_from_Special_Surplus `B_14_d_Withdrawal_from_Capital_Reserve `B_14_Withdrawal_from_Capital_Reserve `B_15_a_Withdrawal_from_Legal_Reserve `B_15_b_Withdrawal_from_Other_Revenue_Reserves `B_15_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_15_Withdrawal_from_Revenue_Reserve `B_16_Net_Retained_Profit `A_02_Premiums_from_Reserve_for_Premium_Refunds `A_03_a_Income_from_Affiliates `A_03_b_Realized_Gains `A_03_c_Other_Investment_Income `A_03_Income_from_Investments `A_04_Non_Realized_Gain_from_Investments `A_05_Other_Underwriting_Income `A_06_a_Net_Claims_Paid `A_06_b_Change_in_Net_Provision_for_Outstanding_Claims `A_06_Net_Claims_Incurred `A_07_Change_in_Other_Net_Underwriting_Provisions `A_08_Payments_to_Reserve_for_Premium_Refunds `A_09_Underwriting_Expenses `A_10_Investment_Expenses `A_11_Non_Realized_Loss_from_Investments `A_12_Other_Underwriting_Expenses `A_13_Underwriting_Result `B_01_Other_Income `B_02_Other_Expenses `Other_Net_Result `B_03_Ordinary_Result `B_04_Extraordinary_Income `B_05_Extraordinary_Expenses `B_06_Extraordinary_Result `B_07_Taxes_On_Income `B_08_Other_Taxes `Total_Taxes `B_09_Profit_Transfers `B_10_Net_Income `B_11_Retained_Profit_Carried_Forward `B_12_a_Withdrawal_from_Preferred_Stock `B_12_b_Withdrawal_from_Common_Stock `B_12_c_Withdrawal_from_Special_Surplus `B_12_d_Withdrawal_from_Capital_Reserve `B_12_Withdrawal_from_Capital_Reserve `B_13_a_Withdrawal_from_Legal_Reserve `B_13_b_Withdrawal_from_Other_Revenue_Reserves `B_13_c_Withdrawal_from_Equity_from_Profit_Participation_Rights `B_13_d_Withdrawal_from_Shareholder_Equity `B_13_Withdrawal_from_Revenue_Reserve `B_14_Net_Retained_Profit
             )))
         (`Regulatory
          .((`Entity
             `Entity_1
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Entity;0#`];))
            (`Regulator
             `BCAR
             .,(`V;{[p;x].L.V.active_module["Regulator or Rating Agency";p;:[x~`SaP;`Standard_and_Poors;x~`BCAR;`AM_Best;x]]};))
            (`Timing;`Final;.())
            (`Item;`Surplus;.())
            (`Period;`Current;.()))
          .((`X;`UserValues_Arguments_Source_Regulatory.html;)
            (`j
             .((`c;`Slot;)
               (`cell
                .((`Entity
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_Entity_ `Any_Entity_ `Entity_1
                      ))
                   )
                  (`Regulator
                   .((`c;`combo;)
                     (`o
                      `BCAR `EU_Solvency_I
                      )
                     (`ol
                      (`BCAR `EU_Solvency_I
                       `AM_Best `EU_Solvency_I)
                      ))
                   )
                  (`Timing
                   .((`c;`combo;)
                     (`o
                      `Pre_Trade `Final
                      ))
                   )
                  (`Item
                   .((`c;`combo;)
                     (`o
                      `Adjusted_Surplus `Annual_Gross_Incurred_Losses `Annual_Gross_Premium `Annual_Net_Incurred_Losses `Average_Gross_Incurred_Losses `B1_Investment_Risk_Fixed_Income_Securities `B3_Interest_Rate_Risk `B4_Credit_Risk `B5_Reserve_Risk `B6_Premium_Risk `B7_Business_Risk `Capital_Adequacy_Ratio `Deferred_Acquisition_Costs `Gross_Incurred_Loss_LAE_Net_SS `Gross_Loss_Threshold `Gross_Premium `Gross_Premium_Threshold `Hidden_Reserves `Inflation_Since_Last_Adjustment `Loss_Reserve_Equity `Losses_Two_Step_Sum `Min_Loss_Ratio_Net_To_Gross `Net_Incurred_Loss_LAE_Net_SS `Net_Required_Capital `Premium_Two_Step_Sum `Solvency_Debit `Solvency_Debit_Losses `Solvency_Debit_Premium `Solvency_Margin `Solvency_Surplus `Spread_of_Risk_Factor_B1_B2 `Subordinate_Liabilities_Disallowed `Sum_of_Capital_and_Reserves `Surplus
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   )
                  (`Transformation
                   .((`c;`combo;)
                     (`o
                      `Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN `Transform_1
                      ))
                   ))
                )
               (`editor;1;)
               (`rl
                .,(`Regulator;`"Regulator or Rating Agency";)
                )
               (`u
                .,(`Entity;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`V;{[p;x]
            r::[#r:.L.V.user_value_list[.C`Regulatory_List;`Regulator`Timing`Item;p;x];r;()]
            e:.k.get_s (0;`A;`User;`Regulatory;x`Regulator;`Entity_Specific_Parameters;:[se:`Any_Entity_=xe:x`Entity; _n; xe];`m)
            if[se
              if[|/eo:`off=e
                xe:!.k.get_s (0;`A;`User;`Regulatory;x`Regulator;`Entity_Specific_Parameters)
                r,:,(1;("&0 Standard is not active for entities &1";$x`Standard;2_,/" ,",/:$xe@&eo);,`Standard`Entity)
                ] / if `off _in e
              ] / if se
            if[~se
              if[`off~e; r,:,(1;("&0 regulatory is not active for entity &1";$x`Regulator;$x`Entity);,`Regulatory`Entity)]]
            :[#r;r;_n]};)
            (`J
             .,(`Entity
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;   (`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`Entity;,0#`];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`Entity];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`Entity];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,`$("New_";"Any_"),\:($a),"_"),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`Entity;,0#`];)
                  (`F
                   ,`Entity
                   ))
                )
             )
            (`U
             ,`Entity
             )
            (`XX
             `Surplus `Deferred_Acquisition_Costs `Adjusted_Surplus `Loss_Reserve_Equity `Spread_of_Risk_Factor_B1_B2 `B1_Investment_Risk_Fixed_Income_Securities `B3_Interest_Rate_Risk `B4_Credit_Risk `B5_Reserve_Risk `B6_Premium_Risk `B7_Business_Risk `Net_Required_Capital `Capital_Adequacy_Ratio `Gross_Loss_Threshold `Gross_Premium_Threshold `Inflation_Since_Last_Adjustment `Gross_Premium `Gross_Incurred_Loss_LAE_Net_SS `Net_Incurred_Loss_LAE_Net_SS `Average_Gross_Incurred_Losses `Annual_Gross_Incurred_Losses `Annual_Net_Incurred_Losses `Annual_Gross_Premium `Premium_Two_Step_Sum `Min_Loss_Ratio_Net_To_Gross `Solvency_Debit_Premium `Losses_Two_Step_Sum `Solvency_Debit_Losses `Solvency_Debit `Sum_of_Capital_and_Reserves `Subordinate_Liabilities_Disallowed `Hidden_Reserves `Solvency_Surplus `Solvency_Margin
             )))
         (`Generic
          .((`Controls
             .((`Confidence;1;.())
               (`Period;`Current;.())
               (`Summary;`sum;.()))
             .,(`j
                .((`c;`Slot;)
                  (`cell
                   .((`Confidence
                      .,(`c;`check;)
                      )
                     (`Period
                      .((`c;`combo;)
                        (`o
                         `Current `Previous
                         ))
                      )
                     (`Summary
                      .((`c;`combo;)
                        (`o
                         `sum `min `max `count `average `stdev
                         )
                        (`ol
                         (`sum `min `max `count `average `stdev
                          `Sum `Minimum `Maximum `Count `Average `"Standard Deviation")
                         ))
                      ))
                   )
                  (`rl
                   .((`Confidence;`"Validation Warning";)
                     (`Period;`Period;)
                     (`Summary;`Summarization;))
                   )
                  (`rltip
                   .((`Confidence;`"<html>If checked (default), use of generic user value creates a validation warning.</html>";)
                     (`Period;`"<html>Use current or previous value as input?</html>";)
                     (`Summary;`"<html>Summarization method for aggregating shapes</html>";))
                   ))
                ))
            (`Source
             .((`Axis
                ,`
                .,(`V;{[p;x]r:{:[x~_n;x;x,,,,y]}'[axis_list[p]'x;!#x]; :[#r:r _dv _n;r;_n]};))
               (`Summary
                ,`sum
                .()))
             .,(`j
                .((`c;`Table;)
                  (`l;`"Tree-Structure Source of Data";)
                  (`cell
                   .,(`Summary
                      .((`c;`combo;)
                        (`o
                         `sum `min `max `count `average `stdev
                         )
                        (`ol
                         (`sum `min `max `count `average `stdev
                          `Sum `Minimum `Maximum `Count `Average `"Standard Deviation")
                         ))
                      )
                   )
                  (`cl
                   .((`Summary;`Summarization;)
                     (`Axis;`Variable;))
                   )
                  (`p
                   .((`Summary;`sum;)
                     (`Axis;`;))
                   )
                  (`cltip
                   .,(`Summary;`"<html>Summarization method for aggregating axes with multiple items</html>";)
                   )
                  (`g
                   .,(`Axis;{while[#x _ss ", ";x:_ssr[x;", ";","]];`$@[x;&" "~'x;:;"_"]};)
                   )
                  (`u
                   .,(`Axis;{if[~#Y:$y;:("";y)]; Y:1_'(Y _ss ",") _ Y:",",Y
		:[|/{*@[.:;,(`$$x;);:]}'[Y];	("Each item in the input list must begin with a-z, A-Z and contain only a-z, A-Z, 0-9, and space";x)
					("";y)]};)
                   )
                  (`f
                   .,(`Axis;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
                   ))
                )))
          .((`j
             .,(`c;`panel;)
             )
            (`X;`UserValues_Arguments_Source_Generic.html;)
            (`V;{[p;x]:[x.Controls.Confidence;,(0;"Generic User Values should be used in consultation with the professional services staff of Conning")]};)))
         (`User_Value
          .((`User_Value
             `Zero
             .,(`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`User_Value;`Zero `One `Period];))
            (`Period;`Current;.()))
          .((`j
             .((`c;`Slot;)
               (`l;`"User Values";)
               (`cltip
                .,(`User_Value;`"<html>&nbsp;User Value (avoiding circularities) or Zero, One or Period&nbsp;</html>";)
                )
               (`cell
                .((`User_Value
                   .((`c;`combo;)
                     (`o
                      `Unspecified_ `New_User_Value_ `Zero `One `Period `User_Value_1
                      ))
                   )
                  (`Period
                   .((`c;`combo;)
                     (`o
                      `Current `Previous
                      ))
                   ))
                )
               (`editor;1;)
               (`u
                .,(`User_Value;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};)
                ))
             )
            (`X;`UserValues_Arguments_Source_UserValues.html;)
            (`J
             .,(`User_Value
                .((`C;{[c;x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
			d:@[d;x;{:[x _in y;x;*y]};y,\:u] / if data not set, set to first available value
			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(`Unspecified_,(`$("New_"),($a),"_")),(z#y),x}[u];+2#,#:'y]]
			e:.[e;(`j;`u;x);:[;c]]
			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};,`User_Value;,`Zero `One `Period];)
                  (`D;{[x;  d;e;a;u]	x:x@&(x::[~#x;!d;x]) _lin !d; if[#i:x@&d[x] _lin (),u; d[i]:`Unspecified_];(d;e)}[,`User_Value];)
                  (`R;{[x;  d;e;a;u]	if[~#x; x:!d]; (@[d;x;{:[y _in !x;x@y;y]}[u]];e)}[,`User_Value];)
                  (`A;{[    d;e;a;u]	(d;e)};)
                  (`L;{[x;y;d;e;a;u]	if[~#x; x:!d; y:(#x)#y]
 			e:.[e;(`j;`cell;x;`o);:;(`Unspecified_,(`$("New_"),($a),"_")),/:y,\:u]
			if[`ol _in ,/!:'e.j.cell[x]
			  e:.[e;(`j;`cell;x;`ol;);{(z#y),x}[u];+2#,2+#:'y]]
			(d;e)}[,`User_Value;,`Zero `One `Period];)
                  (`F
                   ,`User_Value
                   ))
                )
             )
            (`U
             ,`User_Value
             )))
         (`Reference
          .((`display
             ,`".."
             .((`j
                .((`c;`vector;)
                  (`p;`;)
                  (`l;`"Input Reference";)
                  (`cell
                   .((`c;`combo;)
                     (`ol;{ / Reference.display..j.cell.ol
/          `0:"call: ",(5:x),"\n" / used to guess patterns of calls
          if[~x~_n; ::[-3=tx:4:x; `$x
                       0=tx; (.k`get_path_of_labels)@`$x
                         x]]
          if[~t:4:.j.i_ / if list of values available
            h:*.j.i_
            .j.i_:1_ .j.i_
            if[~#.j.i_; .j.i_:_n]
            :h] / return first (next) result
          v:`. .j.v
          if[`. du:(.k.attr .j.v),`du / if Display Uninitialized
            vv:`.(-1_.j.v),`value
            v:(.k`path_to_labels)@vv.s / Screen Value
            if[2<#vv.si
              v:(-1_ v),`$.u.dws'$vv.si@2
              ] / if 2<#vv.si
            .[`;.j.v;:[;v]] / should be a trigger interaction, here
            .[`;du;:;0]
            ] / if `. du:(.k.attr .j.v),`du / if Display Uninitialized
          h:(.k`get_path_of_labels)[v]
          h:h[;;0] / retain just the labels
          v:@[v;i:&~v _in'(#v)#h;:[;`".."]]
          if[#i; .[`;.j.v;:[;v]]] / if vector has changed, store the updated version
          if[(#v)<#h; h:(#v)#h]
          i:&v=`".." / indices where blank required
          i:i@&~`".."_in/:h@i / only those where blank not already available
          h:@[h;i;`"..",]
          if[t=1 / if just completed call to j.u
            if[~.j.i_<0; c:h@.j.i_; .j.i_:1_ h,,c; :*h]
            if[ .j.i_<0; c:h@-.j.i_+1; .j.i_:_n; :c]
            ] / if t=1
          / assumed to be initial display call from here on
          .j.i_::[1<#h; 1_ h; _n]
          *h};)
                     (`o;;))
                   )
                  (`u;{ / Reference.display..j.u
         if[x~y; .j.i_:-1-*.j.i; :x] / signal value
         .j.i_:*.j.i
         lp:(.k`get_path_of_labels)[v:.[`. .j.v;.j.i;:[;y]]]
         pc:#lp / Path Count
         v:(+/&\(pc#v)_lin'lp[;;0])#v / keep only those elements of current value that are in the path
         if[pc>#v / can never happen if last element of v was already a blank
           v,:`".." ]
         .[`;ts:(.k.attr .j.v),`ts;:;0] / turn trigger off
         .[`;.j.v;:[;v]]
         .[`;ts;:;1] / turn trigger on
         y};))
                )
               (`editor;1;)
               (`t;"if[display..ts&~value.o~display\n         value.o:display\n         value.s:(.k`labels_to_path)[display]\n         if[value.a:`\"..\"_in value.s; value[`a`ai`si]:_n]\n         if[~value.a~_n\n           value.si:{(&~=':4::'\"|\",x)_ x}[value.s] / temp storage\n           value.a:1_.k.tag[.S;0,`A,*value.si]\n           if[2=#value.si; value.a:value.a,value.si@1] / simple index present\n           if[3>#value.si; value[`ai`si]:_n] / extended data not present\n           if[2<#value.si / extended data present\n             value.s:*value.si\n             value.ai:1_.k.tag[.S;0,`A,(-1_ value.s),`label] / only `label currently supported by get_paths_into_structure\n             value.si[0]:(-1_ value.si[0]),-1#value.ai\n             ] / if 2<#value.si\n           ] / if not invalid path\n         ]";)
               (`ts;1;)
               (`du;1;)
               (`H_t;"if[display..ts&~value.o~display\n         value.o:display\n         value.s:(.k`labels_to_path)[display]\n         if[value.a:`\"..\"_in value.s; value[`a`ai`si]:_n]\n         if[~value.a~_n\n           value.si:{(&~=':4::'\"|\",x)_ x}[value.s] / temp storage\n           value.a:1_.k.tag[.S;0,`A,*value.si]\n           if[2=#value.si; value.a:value.a,value.si@1] / simple index present\n           if[3>#value.si; value[`ai`si]:_n] / extended data not present\n           if[2<#value.si / extended data present\n             value.s:*value.si\n             value.ai:1_.k.tag[.S;0,`A,(-1_ value.s),`label] / only `label currently supported by get_paths_into_structure\n             value.si[0]:(-1_ value.si[0]),-1#value.ai\n             ] / if 2<#value.si\n           ] / if not invalid path\n         ]";)))
            (`value
             .((`s
                ,`".."
                )
               (`o;;)
               (`a;;)
               (`ai;;)
               (`si;;))
             .,(`B;`Hidden;)))
          .((`j
             .((`c;`panel;)
               (`border;0;)
               (`a;{(!x)@&test'x[.;`B]};))
             )
            (`V;{[p;x] / reference_vector..V
    r::[`".."_in x.display
          (1;"incomplete reference argument")
        `".."_in t:(.k`labels_to_path)@x.display
          (1;"User Value refers to a missing input (path may be truncated)")
        ~(4:.k.get_s (.C`get_mod_s_path)0,`A,t)_in 1 2 / can't use value.si: removed prior to validation
          (1;"Non-scalar argument")
        ()]
    :[#r;,r;_n]};)
            (`X;`UserValues_Arguments_Source_InputReference.html;)
            (`J
             .((`Asset_Class
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Claim_Cost_Index
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Compression
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Consolidation
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Counterparty
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Entity
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Financing_Instrument
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Function
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Greek
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`HGB_Equalization_Line
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Inner_Loop
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Library_Pattern
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Life_Product
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Life_Table
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Lookup
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Market_Index
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Peril
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Plan
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Portfolio
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Product
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Product_Group
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`QIS5_Line
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`QIS5_Region
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Return_Class
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Risk_Class
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`State
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Supplemental_Model
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Transform
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Transition
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Treaty
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`Treaty_Group
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`User_Relative_Value
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                )
               (`User_Value
                .((`C;{[d;e;a;u](d;e)};)
                  (`A;{[d;e;a;u](d;e)};)
                  (`L;{[d;e;a;u](d;e)};)
                  (`D;{[d;e;a;u] / .L.J.reference_vector.D
  (.C`reference_vector_mod)[d;e;a;.+(u;`"..")]};)
                  (`R;{[d;e;a;u] / .L.J.reference_vector.R
  c:&~(f:!u)=t:u[] / Changed, From, To
  (.C`reference_vector_mod)[d;e;a;.+(f@c;t@c)]};))
                ))
             )
            (`U
             `Asset_Class `Claim_Cost_Index `Compression `Consolidation `Counterparty `Entity `Financing_Instrument `Function `Greek `HGB_Equalization_Line `Inner_Loop `Library_Pattern `Life_Product `Life_Table `Lookup `Market_Index `Peril `Plan `Portfolio `Product `Product_Group `QIS5_Line `QIS5_Region `Return_Class `Risk_Class `State `Supplemental_Model `Transform `Transition `Treaty `Treaty_Group `User_Relative_Value `User_Value
             )))
         (`Prior_Arguments
          .((`value
             `x
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{!.k.get_s (6#x),`Arguments`Source}];))
            (`initial
             `"0."
             .,(`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
          .,(`j
             .((`c;`slot;)
               (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
               (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
               (`rl
                .((`value;`"Current Value";)
                  (`initial;`"Initial Value";))
                ))
             ))
         (`Combination
          .((`m
             `pseudo
             .((`C;`model;)
               (`j
                .((`l;`"Combination Type";)
                  (`o
                   `pseudo `Spline `Function `Transform
                   )
                  (`ol
                   (`pseudo `Spline `Function `Transform
                    `"Formulaic Expression" `"Piecewise Linear" `"Library Function" `"Library Transform")
                   )
                  (`fill;`h;)
                  (`c;`combo;)
                  (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};))
                )
               (`M;();)
               (`P;;)))
            (`pseudo
             ,"x"
             .((`j
                .((`c;`Text;)
                  (`l;`"Formulaic Expression";)
                  (`wy;0.7;)
                  (`f;{ / to_local[]
  if[(x~_n)|~#x; :x] / if no string to translate
  as:sfsm.split x / Alternating Segments - data,string,data,etc
  if[~#as; :x]  / no modification if no text
  ,/@[as;2*!-_-(#as)%2;decode_source]};)
                  (`g;{ / to_canon[]
  if[(x~_n)|~#x; :x] / if no string to translate
  as:sfsm.split x / Alternating Segments - data,string,data,etc
  if[~#as; :x]  / no modification if no text
  ,/@[as;2*!-_-(#as)%2;encode_source]};))
                )
               (`Y;`formulaic_expression;)
               (`M
                ,`pseudo
                )))
            (`Spline
             .((`Input
                0 1.0
                .,(`V;{[p;x]:[~(x~x@<x)&/~x<0.;(1;"Must be a sorted vector of non-negative values")]};))
               (`Output
                0 0.0
                .()))
             .((`j
                .((`c;`Table;)
                  (`cltip
                   .,(`Input;`"Input values must be sorted from smallest to biggest";)
                   )
                  (`f
                   .((`Output;18.6;)
                     (`Input;18.6;))
                   )
                  (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                  (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                  (`p
                   .((`Input;1.0;)
                     (`Output;0.0;))
                   )
                  (`l;`"Spline (with linear interpolation)";))
                )
               (`P;1;)
               (`F
                .,(`csv;{[r;o;p;q;b;c;f]
 if[*d:.[csv;,f;:]
  write0[g:temp`csv]{x _di&&/'x _lin\:" \t\r\n"}@read0 f
  if[*d:.[csv;,g;:];'"Unable to import file: ",d 1];del g]
 md:{[f;b],/"\n",'{:[10>#x;x;(10#x),"\n  + ..."]}@,/{("  field=",($x),", record="),/:$&y}'[f;b]}
 if[~&/i:r _lin e:!d:d 1;'"File must contain the required fields:",,/"\n",'$r@&~i]      / signal missing fields
 if[0<#i:&~o _lin e;e:!d:@[d;o i;:;(#*d[])#'p i]]                                       / populate missing optionals
 if[~b;d:d _di e _dvl r,o;e:!d]                                                         / filter addionals
 d:@[_n;i;:;d i:r,o,a:e _dvl r,o]                                                       / order results
 t:u:n:_n
 t[!d]:- 4::'d[]                                                                        / types of results
 u[r,o]:4::'p,q                                                                         / types of prototypes
 n[!d]:d[]=(0N;0n;`)1 2 4?/:t[]                                                         / nulls of results
 if[~u[]~t r,o;'"Incorrect datatypes:",,/"\n",'$(r,o)@&~u[]=t r,o]                      / signal bad datatype
 if[|/|/n a;'"Missing data:",md[a;n a]]                                                 / signal missing data
 if[~c;if[|/|/n r,o;'"Missing data:",md[r,o;n r,o]]]                                    / signal missing data
 if[c;d:{[t;f;b;a].[t;(f;&b);:;a]}/[d;r,o;n r,o;p,q]]                                   / replace missing with prototype
 d}[`Input `Output;0#`;0 0.0;();0;0];)
                )
               (`V;{[p;x]:[~#x.Input;(1;"Must contain at least one row")]};)
               (`M
                ,`Spline
                )))
            (`Function
             `Zero
             .((`U;`Function;)
               (`j
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Function_ `Zero `One `Pi `NA `If `Function_1
                   )
                  (`u;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
                )
               (`J
                .((`C;{[c;x;d;e;a;u]	d::[d~_n;*x,u;d]
 			e:.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u]
 			e:.[e;(`j;`u);:[;c]]
 			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};`Zero `One `Pi `NA `If];)
                  (`D;{  [d;e;a;u]	if[d _in u;d:`Unspecified_];(d;e)};)
                  (`R;{  [d;e;a;u]	(:[d _in !u;u@d;d];e)};)
                  (`A;{  [d;e;a;u]	(d;e)};)
                  (`L;{[x;d;e;a;u]	(d;.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u])}[`Zero `One `Pi `NA `If];))
                )
               (`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Function;`Zero `One `Pi `NA `If];)
               (`M
                ,`Function
                )))
            (`Transform
             `Linear
             .((`U;`Transform;)
               (`j
                .((`c;`combo;)
                  (`o
                   `Unspecified_ `New_Transform_ `Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN `Transform_1
                   )
                  (`u;{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};))
                )
               (`J
                .((`C;{[c;x;d;e;a;u]	d::[d~_n;*x,u;d]
 			e:.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u]
 			e:.[e;(`j;`u);:[;c]]
 			(d;e)}[{[x;y]
		 if[{("New_"~4#x)&"_"~*|x}@$y
		   e:`. .k.attr jv:.j.v; ji:.j.i
		   u:`$4_ -1_ $y
		   p::[e.j.c _in`combo`Combo; ,,`j
		       e.j.c _in`Slot`slot`Table`table`Cross`cross; `j`cell,/:combos@&y _in/:e.j.cell[combos:(!e.j.cell)@&e.j.cell[;`c]=`combo;`o]
		       e.j.c _in`vector`Vector; ,`j`cell]
		   y:.k.new_u_[$!.G[`axes;u];(.k.get_s .V..Hash_Location,u)[];($u),"_"]
		   list:((u;`A;,y);(u;`L;(!.G[`axes;u]),y))
		   .k.xeq_u_[();list;.,(u;(.G[`axes;u;],1;(!.G[`axes;u]),y));1]
		   .k.set_s[.V..Hash_Location,u,y;.u.symbol_hash16@y]
		   e:./[e;p;{y:@[y;`o;,;x];:[`ol _in!y;.[y;(`ol;);,[;x]];y]}[y]]
		   .[`;.k.attr jv;:;e]
		   .[`;jv,ji;:;y]
		   ]
		 ("";y)};`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];)
                  (`D;{  [d;e;a;u]	if[d _in u;d:`Unspecified_];(d;e)};)
                  (`R;{  [d;e;a;u]	(:[d _in !u;u@d;d];e)};)
                  (`A;{  [d;e;a;u]	(d;e)};)
                  (`L;{[x;d;e;a;u]	(d;.[e;(`j;`o);:;`Unspecified_,(`$("New_"),($a),"_"),x,u])}[`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];))
                )
               (`V;{[axis;extras;p;x]
  alist:{.L.U.active_axis@x}
  if[#a:&~((),x) _lin extras,alist axis;::[@x; (1;"A chosen input is deselected"); (1;"A chosen input is deselected";,,a)]]
  if[axis=`Product_Group
    mapp:.k.get_s (0;`A;`User;`Insurance;`Map_Products_to_Product_Groups)
    mapm:.k.get_s (0;`A;`User;`Insurance;`Life_Products_to_Product_Groups)
    list:0#`
    if[`Property_Casualty _in .G`submodules; list,:(alist@axis)@&0<+/'(mapp[alist@axis;alist@`Product])]
    if[`Life_Insurance _in .G`submodules;    list,:(alist@axis)@&0<+/mapm[alist@`Life_Product;alist@axis]]
    if[#a:&~((),x) _lin extras,list
      ::[@x
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products")
        (1;"A chosen input is will not be calculated because it contains no activated products, treaties, or life products";,,a)]]
    ] / if axis=`Product_Group
  r:()
  if[(#x)&axis=`User_Value / this belongs in a generic insertion point validation
    if[|/#:'get_spanned_axes'(),x; r,:,(1;"Spanned user value not allowed here")]
    ] / if axis=`User_Value
  if[(#x)&(axis=`User_Relative_Value)&~`Life_Insurance _in .G`submodules / validate for Life Insurance Present
    accepted:extras@&{~#,/_ss[x]'("Bonus";"Policyholder";"Reserve";"Amounts";"Distributions";"Extraordinary";"Target";"Required")}'$extras
    r,:{(0;("&0 should only be used with Life Insurance";x);,,y)}'[$x@i;i:&~x _lin accepted]
    ] / if axis=`User_Relative_Value
  :[#r;r;_n]}[`Transform;`Linear `Inverse `Sqrt `Exp `Ln `Fact `Not `INT `ABS `Tan `Tanh `ATan `Sin `Sinh `ASin `Cos `Cosh `ACos `If_Positive `NORMSDIST `NORMSINV `GAMMALN];)
               (`M
                ,`Transform
                )))
            (`Single_Argument
             `x
             .((`j
                .((`c;`scalar;)
                  (`f;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`fill;`h;))
                )
               (`M
                `Spline `Transform
                )
               (`V;{[plf;p;x]r:.L.V.function_parser[.+(`m`pseudo;(`pseudo;,/$x));:[7=4:plf;plf@p;plf]]; :[#*r;*r;_n]}[{(!.k.get_s 8#x)_dv x@8}];)))
            (`Argument_List
             ,`x
             .((`j
                .((`c;`Vector;)
                  (`f;{:[-4=4:x; {_ssr[$x;"_";" "]}'x; _ssr[$x;"_";" "]]};)
                  (`g;{
  while[#x _ss "  ";x:_ssr[x;"  ";" "]]
  if[" "=*$x;x:1_ x]
  if[" "=*|$x;x:-1_ x]
  list:("(";")";"+";"=";",";"<";">";"[[]";"[]]"; "[*]"; "^"; "[-]";"/")
  x:,/@[x;j@&" "=x[j:i@&(i:?(,/(x _ss list)+1),/(x _ss list)-1) _lin !#x];{""}]
  x:_ssr[x;" ";"_"]
  `$x};)
                  (`u;{:[#$y;			("";y);	("Empty functions are not allowed";x)]};)
                  (`p;`x;)
                  (`fill;`b;))
                )
               (`M
                ,`Function
                )
               (`V;{[p;x]r:();r,:(,/function_validation[(!.k.get_s (6#p),`Arguments`Source)_dv p@8;p]'x)_dv _n;:[#r;r;_n]};)))
            (`Initial
             .((`m
                `func
                .((`C;`model;)
                  (`j
                   .((`l;`"Initial Value";)
                     (`o
                      `func `value
                      )
                     (`ol
                      (`func `value
                       `"Apply Function" `"Fixed Initial Value")
                      )
                     (`fill;`h;)
                     (`c;`combo;)
                     (`t;{ /Model change control trigger function.  Only called when the user changes a model choice in the model change control (usually a combo)
  result: j:*|i:get_II[];set_m_[p:i,:[j _in v;1+v?j;4]_ v;-1_ v:.j.v] /process model change in model drop down menu
  /Process expert items in the new model that was just chosen. processE must be called here as function activate is not called on a model choice change
  DO_E:: 1 /after java completes processing, process the active panel for expert items that may have changed with the change of model
  result};))
                   )
                  (`M;();)
                  (`P;;)))
               (`func

                .((`j
                   .((`c;`panel;)
                     (`l;`;)
                     (`border;0;))
                   )
                  (`M
                   ,`func
                   )))
               (`value
                0.0
                .((`j
                   .((`c;`Scalar;)
                     (`f;18.6;)
                     (`g;{ / always produces float
 if[~-3=4:x;x*:]
 v:@[.r.num.g[0.0];x _dvl"()$%\"";:]
 :[(|/1 2=4:v 1)&~v 0;(((1. -1)@"(" _in x)*(1 .01)@"%" _in x)*v 1;0n]};)
                     (`u;{:[~y _in (0n;0N);	("";y)
                   y~0n;("Input should be numeric";x)
                   y~0N;("Input should be integer-valued";x)]};)
                     (`l;`"Fixed Initial Value";)
                     (`fill;`h;))
                   )
                  (`M
                   ,`value
                   ))))
             .((`j
                .((`c;`panel;)
                  (`border;0;)
                  (`l;`;)
                  (`wy;1e-010;)
                  (`a
                   `m `func
                   ))
                )
               (`M
                `pseudo `Spline `Function `Transform
                )
               (`L;0;))))
          .((`j
             .((`c;`panel;)
               (`wy;0.5;)
               (`a
                `m `pseudo `Initial
                ))
             )
            (`P;1;)
            (`X;`UserValues_Arguments.html;))))
       )
      (`a
       .((`P;1;)
         (`j
          .((`c;`panel;)
            (`a
             ,`Fixed
             ))
          ))
       ))
    )))

p:.()
p..j.c: `panel
p..j.l: "Complex panels with draw issues"
p..j.xy: (500;500)
p..j.border: 1

p.split..j.c: `split
p.split..j.divweight: 0.25
/p.split..j.divsize: 10

p.split.l.tree[`Bold`Red`Italic`Green`a0`a1;`d`e;`f`g`h]: 0
p.split.l.tree..j.nlfont:((,`Bold;,`Italic);`"Dialog 1 12" `"Dialog 2 12")
p.split.l.tree..j.nlfg:((,`Red;,`Green);`r `g)

p.split.r..j.c:`panel

p.split.r.p: .()
p.split.r.p..j[`c`l]: (`panel;`"Arguments")

p.split.r.p.pArgList:.()
p.split.r.p.pArgList..j[`c`l]:(`panel;`"Argument List")

p.split.r.p.pArgList.table..j.l:`"Table"
p.split.r.p.pArgList.table[`Source]: `a
p.split.r.p.pArgList.table..j.cell.Source[`c`o`ol]: (`combo;`a`b;(`a`b;`"Parameter by Path"`"Random Draw"))

p.split.r.p.pX:.()
p.split.r.p.pX..j[`c`l]:(`panel;`"x")

p.split.r.p.pArgList.table..j.t:{	p[`split;`r;`p;`pX;`p.;`j;`c]:`null;
								source: p[`split;`r;`p;`pArgList;`table;`Source]
								if[`a=source;p[`split;`r;`p;`pX;`p`p.]:(paramByPath[0];paramByPath[1])]
								if[`b=source;p[`split;`r;`p;`pX;`p`p.]:(randomDraw[0];randomDraw[1])]}
/panel.left.text..j.l:"left `text";

p[`split;`r;`p;`pX;`p`p.]:(paramByPath[0];paramByPath[1])


p..j.xy:(1200;900)
.j.Java {
  .j.c `p
}

p..j.z: {
 if[1~.k[`p]; _exit 0]
 }